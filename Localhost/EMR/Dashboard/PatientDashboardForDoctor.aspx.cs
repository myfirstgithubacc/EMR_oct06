using System;
using System.Collections;
using System.Data;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Text;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Configuration;
using Telerik.Web.UI;
using System.Net;
using System.Web.Script.Serialization;
using Newtonsoft.Json;
using System.IO;
using Newtonsoft.Json.Linq;

public partial class EMR_Dashboard_PatientDashboardForDoctor : System.Web.UI.Page
{
    private string ftppath = ConfigurationManager.AppSettings["FTP"];
    private string FileFolder = ConfigurationManager.AppSettings["FileFolder"];

    private string sConString = ConfigurationManager.ConnectionStrings["akl"].ConnectionString;
    private static string WebAPIAddress = ConfigurationManager.AppSettings["WebAPIAddress"].ToString();
    bool IsOPDSummary; string sFontSize = "";
    //clsExceptionLog objException = new clsExceptionLog();
    //private static int TGTemplateId = 1, TGSectionId = 1, TGFieldId = 1;
    //private static int INTemplateId = 2, INSectionId = 2, INFieldId = 2;
    //private static int POCTemplateId = 3, POCSectionId = 3, POCFieldId = 3;
    //private static int HISTemplateId = 4, HISSectionId = 4, HISFieldId = 4;
    //private static int EXMTemplateId = 5, EXMSectionId = 5, EXMFieldId = 5;
    //private static int PTTemplateId = 6, PTSectionId = 6, PTFieldId = 6;
    //private static int CATemplateId = 7, CASectionId = 7, CAFieldId = 7;
    //private static int NSTemplateId = 8, NSSectionId = 8, NSFieldId = 8;
    //private static int LABTemplateId = 2060, LABSectionId = 2273, LABFieldId = 4409;

    private static int TGTemplateId = 1, TGSectionId = 1, TGFieldId = 1;
    private static int INTemplateId = 2, INSectionId = 2, INFieldId = 2;
    private static int UPTemplateId = 26093, UPSectionId = 46159, UPFieldId = 141161;
    private static int POCTemplateId = 5895, POCSectionId = 22735, POCFieldId = 83911;
    private static int HISTemplateId = 6048, HISSectionId = 27230, HISFieldId = 122195;
    private static int EXMTemplateId = 6049, EXMSectionId = 27231, EXMFieldId = 122196;
    private static int PTTemplateId = 6050, PTSectionId = 27232, PTFieldId = 122197;
    private static int CATemplateId = 6051, CASectionId = 27233, CAFieldId = 122198;
    private static int NSTemplateId = 6052, NSSectionId = 27234, NSFieldId = 122199;
    private static int LABTemplateId = 26117, LABSectionId = 46225, LABFieldId = 141410;
    private static int FTTemplateId = 3, FTSectionId = 3, FTFieldId = 3;   // Ritika(12-09-2022) FreeText

    private enum enumProblem : byte
    {
        Problem = 0,
        IsHPI = 1,
        Duration = 2,
        Date = 3,
        EnteredBy = 4,
        Edit = 5,
        Delete = 6
    }
    private enum enumHistory : byte
    {
        FieldName = 0,
        Date = 1,
        EnteredBy = 2,
        Edit = 3
    }
    private enum enumPrevTreatment : byte
    {
        FieldName = 0,
        Date = 1,
        EnteredBy = 2,
        Edit = 3
    }
    private enum enumExamination : byte
    {
        FieldName = 0,
        Date = 1,
        EnteredBy = 2,
        Edit = 3
    }
    private enum enumNutritional : byte
    {
        FieldName = 0,
        Date = 1,
        EnteredBy = 2,
        Edit = 3
    }
    private enum enumPlanOfCare : byte
    {
        FieldName = 0,
        Date = 1,
        EnteredBy = 2,
        Edit = 3
    }
    private enum enumCostAnalysis : byte
    {
        FieldName = 0,
        Date = 1,
        EnteredBy = 2,
        Edit = 3
    }
    private enum enumProvisionalDiagnosis : byte
    {
        ProvisionalDiagnosis = 0,
        IsProvisional = 1,
        //IsFinal=2,
        //Date = 3,
        Type = 2,
        EnteredBy = 3,
        Edit = 4,
        Delete = 5
    }
    private enum enumNonDrugOrder : byte
    {
        NonDrugOrders = 0,
        Date = 1,
        EnteredBy = 2,
        Edit = 3
    }
    private enum enumPHistory : byte
    {
        FieldName = 0,
        Date = 1,
        EnteredBy = 2,
        Edit = 3
    }
    protected void Page_PreInit(object sender, System.EventArgs e)
    {
        Page.Theme = "DefaultControls";
        if (common.myStr(Request.QueryString["From"]).Equals("POPUP"))
        {
            Page.MasterPageFile = "/Include/Master/BlankMaster.master";
        }
        else
        {
            Page.MasterPageFile = "/Include/Master/EMRMasterWithTopDetails.master";
        }
    }
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            try
            {
                RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Maximize;
                setTemplateTableInSection();
                //BindTemplate();
                BindICDPanel();
                // getDoctorImage();
                //Application.Lock();
                //Application["LoginID"] = "annathurai";
                //Application.UnLock();
                hdnIsTransitDataEntered.Value = "1"; // yogesh 1_09_2022
                hdnCurrentControlFocused.Value = null;
                Session["PreviousRowIndex"] = null;
                //lbtnExpand.Text = "Collapse All";
                //lbtnExpand.ImageUrl = "~/Images/minus.gif";
                lbtnExpand.ImageUrl = "~/Images/plus-icon.svg";
                ViewState["ExpandAllStatus"] = false;

                if (common.myInt(Session["HospitalLocationId"]).Equals(0) || common.myInt(Session["FacilityId"]).Equals(0)
                    || common.myInt(Session["EncounterId"]).Equals(0))
                {
                    Response.Redirect("/Default.aspx", false);
                    return;
                }
                ViewState["RegistrationId"] = Session["RegistrationId"].ToString();
                DataSet ds = new DataSet();
                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;
                string ServiceURL = WebAPIAddress.ToString() + "api/Common/GfsQueryCountManagement";
                APIRootClass.GfsCountManagement objRoot = new global::APIRootClass.GfsCountManagement();
                objRoot.Employeeid = common.myInt(Session["EmployeeId"]);

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                ds = JsonConvert.DeserializeObject<DataSet>(sValue);

                if (ds.Tables[0].Rows.Count > 0)
                {
                    Session["CountQueryData"] = ds.Tables[0].Rows.Count;
                    // Session["QueryData"] = ds;
                    //LinkButton lbl = Master.FindControl("lblQty") as LinkButton;
                    //if (lbl != null)
                    //{
                    //    lbl.Text = sValue;
                    //    lbl.ToolTip = "You have " + lbl.Text + " Unrespond Queries from Insurance.";
                    //}
                }
                /*
                 *  DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
                 * DataSet ds = dl.FillDataSet(CommandType.Text, "exec UspGetGfsQueryDoc @empID=" + common.myInt(Session["EmployeeId"]));  // 1 kk
                if (ds.Tables[0].Rows.Count > 0)
                {
                    //Session["QueryData"] = ds;
                    //RadWindowForNew.NavigateUrl = "../../Approval/QueryResponse.aspx";
                    //RadWindowForNew.Height = 600;
                    //RadWindowForNew.Width = 750;
                    //RadWindowForNew.Top = 10;
                    //RadWindowForNew.Left = 10;
                    //RadWindowForNew.VisibleOnPageLoad = true;
                    //RadWindowForNew.Modal = true;
                    //RadWindowForNew.Behaviors = WindowBehaviors.Maximize | WindowBehaviors.Minimize | WindowBehaviors.Close | WindowBehaviors.Move | WindowBehaviors.Pin | WindowBehaviors.Resize;
                    //RadWindowForNew.VisibleStatusbar = false;
                    LinkButton lbl = Master.FindControl("lblQty") as LinkButton;
                    if (lbl != null)
                    {
                        lbl.Text = ds.Tables[0].Rows.Count.ToString();
                        lbl.ToolTip = "You have " + lbl.Text + " Unrespond Queries from Insurance.";
                    }
                }
                */


                //dtpFromDate.DateInput.DateFormat = common.myStr(Session["OutputDateFormat"]);
                //dtpToDate.DateInput.DateFormat = common.myStr(Session["OutputDateFormat"]);
                //dtpFromDate.SelectedDate = common.myDate(Session["EncounterDate"]);
                //dtpToDate.SelectedDate = common.myDate(DateTime.Now);
                //bindPatientDetails();
                editorChiefComplaints.Text = string.Empty;
                //ClearEditorControls();
                ClearMessageControl();
                BindCommonData(string.Empty, string.Empty, string.Empty, 0, 1);
                BindDiagnosisSearchCode();
                ViewState["_ID"] = 0;
                dvConfirmCancelOptionsProvisionalDiag.Visible = false;
                BindDoctor();
                //  ShowHidePanel(false); 2/2/2020
                ShowHidePanel(true);

                dvConfirmCancelOptions.Visible = false;
                SetPermission();
                //padam
                //lnkIPExtension
                lnktriageform.Visible = false;
                if (common.myStr(Session["OPIP"]).Equals("I"))
                {
                    lnkIPExtension.Visible = true;
                    lnkpreauth.Visible = false;
                    btnTreatmentPlan.Visible = false;
                    //palendra hide Save Care Plan Button In IP Patient
                    btnSavePlan.Visible = false;
                }
                else
                {
                    lnkpreauth.Visible = true;
                    lnkIPExtension.Visible = false;
                }
                if (common.myStr(Session["OPIP"]).Equals("E") || common.myStr(Session["OPIP"]).Equals("O"))
                {


                    client.Headers["Content-type"] = "application/json";
                    client.Encoding = Encoding.UTF8;
                    ServiceURL = WebAPIAddress.ToString() + "api/Common/GetERtoken";
                    APIRootClass.ERtoken objtoken = new global::APIRootClass.ERtoken();
                    objtoken.ErEncounterID = common.myStr(Session["EncounterID"]);
                    string strtriageID = string.Empty;
                    inputJson = (new JavaScriptSerializer()).Serialize(objtoken);
                    sValue = client.UploadString(ServiceURL, inputJson);
                    strtriageID = JsonConvert.DeserializeObject<string>(sValue);



                    // DAL.DAL dlx = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString); // 2 kk
                    // string strtriageID = common.myStr(dlx.ExecuteScalar(CommandType.Text, "select ID from ERtoken with(nolock) where ErEncounterID=" + Session["EncounterID"])).ToString();
                    if (common.myInt(strtriageID) != 0)
                    {
                        lnktriageform.CommandName = common.myInt(strtriageID).ToString();
                        lnktriageform.Visible = true;
                    }
                    //lnktriageform.co
                    //if (common.myInt(Session["EmployeeId"]) != common.myInt(Session["DoctorID"]))
                    //{

                    //    btnAssigntoMe.Visible = true;
                    //}
                    //else
                    //{
                    //    btnAssigntoMe.Visible = false;
                    //}

                }
                else
                {
                    btnAssigntoMe.Visible = false;
                }

                if (common.myStr(Session["OPIP"]).Equals("O"))
                {
                    btnSaveAsSigned.Visible = true;
                    btnSaveSign.Visible = true;
                }
                else
                {
                    btnSaveDashboard.Text = "Save (F3)";
                    btnSave.Text = "Save (F3)";
                }
                if (common.myStr(Session["OPIP"]).Equals("O")
                    && !common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE"))
                {
                    btnSaveSign.Visible = true;
                    btnSaveAsSigned.Visible = true;
                    btnSaveDashboard.Visible = true;
                    btnSave.Visible = true;
                }
                else
                {
                    btnSaveSign.Visible = false;
                    btnSaveAsSigned.Visible = false;
                    btnSave.Visible = false;
                    btnSaveDashboard.Visible = false;
                    if (!common.myStr(Session["OPIP"]).Equals("O") && !common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE"))
                    {
                        btnSave.Visible = true;
                        btnSaveDashboard.Visible = true;
                    }
                }
                if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE"))
                {
                    ClearButtonControl();
                    if (common.myBool(Session["isEMRSuperUser"]))
                    {
                        if (common.myStr(Session["OPIP"]).Equals("O"))
                        {
                            btnDefinalise.Visible = true;
                        }
                        OpenButtonControls();
                    }
                    if (common.myBool(ViewState["SaveEnable"]))
                    {
                        if (common.myStr(Session["OPIP"]).Equals("O"))
                        {
                            btnDefinalise.Visible = true;
                        }
                    }
                }
                #region Interface
                ViewState["IsCIMSInterfaceActive"] = common.myBool(Session["IsCIMSInterfaceActive"]);
                ViewState["IsVIDALInterfaceActive"] = common.myBool(Session["IsVIDALInterfaceActive"]);
                #endregion
                txtHeight.Attributes.Add("onchange", "javascript:CalculateBMI('" + txtHeight.ClientID + "');");
                TxtWeight.Attributes.Add("onchange", "javascript:CalculateBMI('" + TxtWeight.ClientID + "');");
                if (common.myBool(Session["isEMRSuperUser"]) && common.myStr(Session["OPIP"]).Equals("I") && !common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE"))
                {
                    btnSaveDashboard.Visible = true;
                    btnSave.Visible = true;
                    btnSaveDashboard.Text = "Save (F3)";
                    btnSave.Text = "Save (F3)";
                }
                ImageButton7.ImageUrl = "~/Images/plus-icon.svg";
                imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/plus-icon.svg";
                ImageButton5.ImageUrl = "~/Images/plus-icon.svg";
                //PanelVisibility(ImageButton7.ToolTip.Trim());
                //PanelVisibility(imgbtnProvisionalDiagnosies.ToolTip.Trim());  2/2/2020
                //PanelVisibility(ImageButton5.ToolTip.Trim());
                bindDataInTransit();

                //DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString); // 3 kk 
                //ViewState["CheifComplaintFound"] = common.myInt(dl.ExecuteScalar(CommandType.Text, "uspCheckPatientProblem @encounterID=" + common.myInt(Session["EncounterId"])));

                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;
                ServiceURL = WebAPIAddress.ToString() + "api/Common/CheckPatientProblem";
                APIRootClass.PatientProblem objPatientProblem = new global::APIRootClass.PatientProblem();
                objPatientProblem.EncounterID = common.myInt(Session["EncounterID"]);
                //string strtriageID = string.Empty;
                inputJson = (new JavaScriptSerializer()).Serialize(objPatientProblem);
                sValue = client.UploadString(ServiceURL, inputJson);
                // ViewState["CheifComplaintFound"] = JsonConvert.DeserializeObject<string>(sValue);
                SetChifComplaint();

                if (common.myInt(ViewState["CheifComplaintFound"]).Equals(0))
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                    lblMessage.Text = "Chief Complaints not Saved for the patient";
                }
                TemplateSetting();
                // setTabVisibility(); // Expand or Collapes
                rdoOrder_OnSelectedIndexChanged(null, null);
                //GetOphthalmologyVitals();
                DataSet dsotr = new DataSet();
                BaseC.RestFulAPI objcls = new BaseC.RestFulAPI(sConString);
                dsotr = objcls.GetPACClearanceDetailsForOTRequest(common.myInt(Session["EncounterId"]), common.myInt(Session["EmployeeId"]));

                if (dsotr.Tables.Count > 0 && dsotr.Tables[0].Rows.Count > 0)
                {
                    if (common.myInt(dsotr.Tables[0].Rows[0]["IsPACClearanceDone"]) > 0)
                    {
                        btnPACDone.Visible = false;
                        if (common.myLen(dsotr.Tables[0].Rows[0]["PACClearanceDate"]) > 0)
                            btnCancelPACDone.Visible = true;
                        else
                            btnCancelPACDone.Visible = false;
                    }
                    else
                    {
                        btnPACDone.Visible = true;
                        btnCancelPACDone.Visible = false;
                    }
                }
                else
                {
                    btnPACDone.Visible = false;
                    btnCancelPACDone.Visible = false;
                }
                string IsDMSEnableForMission = common.GetFlagValueHospitalSetup(common.myInt(Session["HospitalLocationId"]),
                                  common.myInt(Session["FacilityId"]), "IsDMSEnableForMission", sConString);
                if (IsDMSEnableForMission == "Y")
                    ImageButtonDms.Visible = true;
            }
            catch (Exception Ex)
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblMessage.Text = "Error: " + Ex.Message;
                clsExceptionLog objException = new clsExceptionLog();
                objException.HandleException(Ex);
                objException = null;
            }
        }
        reSetTimer();
        setFocus(false);
        if (common.myLen(txtHeight.Text) > 0 && common.myLen(TxtWeight.Text) > 0)
        {
            string Height = txtHeight.Text.ToString().Replace("cm", "").Trim();
            string Weight = TxtWeight.Text.ToString().Replace("kg", "").Trim();

            txtHeight.Text = Height;
            TxtWeight.Text = Weight;

            if (common.myLen(txtBMI.Text).Equals(0) && common.myLen(txtBSA.Text).Equals(0))
            {
                ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "CalculateBMI('" + txtHeight.ClientID + "');", true);
            }
        }
        bindTestData();





        // Yogesh----------> 21/04/22

        if (common.myStr(Session["FacilityName"]).ToUpper().Contains("PUSHPAWATI"))
        {
            imgBtnRis.Visible = true;
        }
        // Yogesh----------> 21/04/22



        // Session["OnScreen"] = "Off";
        // ScriptManager.RegisterClientScriptBlock(this.Page, this.GetType(), "MyFun", "CheckIn(1);", true);

    }
    [System.Web.Services.WebMethod]
    public static string CalculateBMIAndBSA(string sConString, string txtHeight, string hdnHeight, string TxtWeight, string hdnWeight)
    {
        //BaseC.EMRVitals objVital = new BaseC.EMRVitals(sConString); // 4 kk
        DataSet ds = new DataSet();
        StringBuilder objStr = new StringBuilder();
        ArrayList coll = new ArrayList();
        string bmiandBSA = string.Empty;
        try
        {
            if (!string.IsNullOrEmpty(txtHeight))
            {
                coll.Add(common.myInt(hdnHeight));
                coll.Add(common.myInt(5));
                coll.Add(common.myInt(txtHeight));
                coll.Add(common.myInt(0));
                coll.Add(common.myInt(0));
                objStr.Append(common.setXmlTable(ref coll));
            }
            if (!string.IsNullOrEmpty(TxtWeight))
            {
                coll.Add(common.myInt(hdnWeight));
                coll.Add(common.myInt(1));
                coll.Add(common.myInt(TxtWeight));
                coll.Add(common.myInt(0));
                coll.Add(common.myInt(0));
                objStr.Append(common.setXmlTable(ref coll));
            }
            if (!string.IsNullOrEmpty(common.myStr(objStr)))
            {
                // ds = objVital.CalculateVitalsValue(common.myInt(HttpContext.Current.Session["HospitalLocationID"]), objStr.ToString());

                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;
                string ServiceURL = WebAPIAddress.ToString() + "api/Common/CalculateVitalsValue";
                APIRootClass.VitalsValue objVitalsValue = new global::APIRootClass.VitalsValue();
                objVitalsValue.HospitalLocationID = common.myInt(HttpContext.Current.Session["HospitalLocationID"]);
                objVitalsValue.xmlstr = objStr.ToString();

                string inputJson = (new JavaScriptSerializer()).Serialize(objVitalsValue);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                ds = JsonConvert.DeserializeObject<DataSet>(sValue);

                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        if (common.myStr(dr["DisplayName"]).Equals("BMI") && !string.IsNullOrEmpty(common.myStr(dr["Value"])))
                        {
                            bmiandBSA = common.myStr(dr["Value"]);
                        }
                        if (common.myStr(dr["DisplayName"]).Equals("BSA") && !string.IsNullOrEmpty(common.myStr(dr["Value"])))
                        {
                            bmiandBSA = bmiandBSA + "," + common.myStr(dr["Value"]);
                        }
                    }
                }
            }
        }
        catch (Exception Ex)
        {
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            //objVital = null;
            ds.Dispose();
            objStr = null;
            coll = null;
        }
        return bmiandBSA;
    }
    #region Common method
    protected void lbtnPastClinicalNotes_Click(object sender, EventArgs e)
    {
        try
        {
            if (common.myInt(Session["RegistrationID"]).Equals(0))
            {
                Alert.ShowAjaxMsg("Patient not selected !", this.Page);
                return;
            }
            if (common.myInt(Session["encounterid"]).Equals(0))
            {
                Alert.ShowAjaxMsg("Patient not selected !", this.Page);
                return;
            }
            autoSaveDataInTransit(true);
            Session["SelectedCaseSheet"] = "PN";
            RadWindowForNew.NavigateUrl = "/WardManagement/VisitHistory.aspx?RNo=" + common.myStr(Session["RegistrationNo"])
                                + "&Regid=" + common.myInt(Session["RegistrationId"]) + "&RegNo=" + common.myStr(Session["RegistrationNo"])
                                + "&EncId=" + common.myInt(Session["EncounterId"]) + "&EncNo=" + common.myStr(Session["EncounterNo"])
                                + "&FromWard=Y&OP_IP=I&Category=PopUp"
                                + "&IsEMRPopUp=1";
            RadWindowForNew.Width = 1200;
            RadWindowForNew.Height = 630;
            RadWindowForNew.Top = 10;
            RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = string.Empty;
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code    
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.Title = "Past Clinical Notes";
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void lbtnExpand_Click(object sender, EventArgs e)
    {
        ClearMessageControl();
        if (common.myBool(ViewState["ExpandAllStatus"]))
        {
            ViewState["ExpandAllStatus"] = false;
            lbtnExpand.ImageUrl = "~/Images/plus-icon.svg";
            ShowHidePanel(true);
        }
        else
        {
            ViewState["ExpandAllStatus"] = true;
            lbtnExpand.ImageUrl = "~/Images/minus-icon.svg";
            ShowHidePanel(false);
        }
    }
    private void ShowHidePanel(Boolean flag)
    {
        ClearMessageControl();
        if (!flag)
        {
            pnlChiefComplaints.Visible = true;
            Panel2.Visible = true;
            // Panel4.Visible = true;
            //Panel8.Visible = true;
            Panel10.Visible = true;
            // Panel11.Visible = true;
            // Panel12.Visible = true;
            // Panel5.Visible = true;
            //  Panel7.Visible = true;
            Panel3.Visible = true;
            Panel6.Visible = true;
            Panel13.Visible = true;
            PanelRemarks.Visible = true;
            PanelFollowup.Visible = true;

            Panel14.Visible = true;
            Panel20.Visible = true;
            // Panel21.Visible = true;
            // Panel22.Visible = true;
            Panel23.Visible = true;

            pnlChiefComplaints.Visible = true;
            // pnlAllergies.Visible = true;
            pnlVitals.Visible = true;
            pnlHistory.Visible = true;
            //   pnlExamination.Visible = true;
            //  pnlPlanOfCare.Visible = true;
            pnlOtherNotes.Visible = true;
            pnlProvisionalDiagnosis.Visible = true;
            pnlOrderProcedures.Visible = true;
            pnlPrescription.Visible = true;
            pnlDiagnosis.Visible = true;
            OpticalsPanel.Visible = true;
            pnlPACTemplates.Visible = true;
            pnlOTRequest.Visible = true;
            PanelFreeText.Visible = true;   //Ritika (12-09-2022) FreeText

            ImageOPt1.ImageUrl = "~/Images/minus-icon.svg";
            imgbtnChiefComplaints.ImageUrl = "~/Images/minus-icon.svg";
            ImageButton3.ImageUrl = "~/Images/minus-icon.svg";
            imgVbtnVital.ImageUrl = "~/Images/minus-icon.svg";
            imbtnHistory.ImageUrl = "~/Images/minus-icon.svg";
            imgbtnTemplate.ImageUrl = "~/Images/minus-icon.svg";
            imgbtntherNotes.ImageUrl = "~/Images/minus-icon.svg";
            imgbtnOrdersAndProcedures.ImageUrl = "~/Images/minus-icon.svg";
            imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/minus-icon.svg";
            imgbtnPrescription.ImageUrl = "~/Images/minus-icon.svg";
            ImageButton2.ImageUrl = "~/Images/minus-icon.svg";
            ibtNutritionalStatus.ImageUrl = "~/Images/minus-icon.svg";
            ImageButton4.ImageUrl = "~/Images/minus-icon.svg";
            ImageButtonRemarks.ImageUrl = "~/Images/minus-icon.svg";
            ImageButtonFollowup.ImageUrl = "~/Images/minus-icon.svg";
            ImageButton7.ImageUrl = "~/Images/minus-icon.svg";
            ImageButton5.ImageUrl = "~/Images/minus-icon.svg";
            ImageButton9.ImageUrl = "~/Images/minus-icon.svg";
            ImageButton10.ImageUrl = "~/Images/minus-icon.svg";
            ImageButton11.ImageUrl = "~/Images/minus-icon.svg";
            ImageButton12.ImageUrl = "~/Images/minus-icon.svg";
            ImageButton8.ImageUrl = "~/Images/minus-icon.svg";
            ImageButton13.ImageUrl = "~/Images/minus-icon.svg";
            ImageButton14.ImageUrl = "~/Images/minus-icon.svg";
            ImageButtonFreeText.ImageUrl = "~/Images/minus-icon.svg"; //Ritika (12-09-2022) FreeText
        }
        else
        {
            pnlChiefComplaints.Visible = false;
            pnlPACTemplates.Visible = false;
            pnlOTRequest.Visible = false;
            Panel2.Visible = false;
            //Panel4.Visible = false;
            //  Panel8.Visible = false;
            Panel10.Visible = false;
            // Panel11.Visible = false;
            // Panel12.Visible = false;
            // Panel5.Visible = false;
            //Panel7.Visible = false;
            Panel3.Visible = false;
            Panel6.Visible = false;
            Panel13.Visible = false;
            PanelRemarks.Visible = false;
            PanelFollowup.Visible = false;
            Panel14.Visible = false;
            Panel20.Visible = false;
            // Panel21.Visible = false;
            // Panel22.Visible = false;
            Panel23.Visible = false;

            // pnlAllergies.Visible = false;
            pnlVitals.Visible = false;
            pnlHistory.Visible = false;
            //  pnlExamination.Visible = false;
            // pnlPlanOfCare.Visible = false;
            pnlOtherNotes.Visible = false;
            pnlProvisionalDiagnosis.Visible = false;
            pnlOrderProcedures.Visible = false;
            pnlPrescription.Visible = false;
            pnlDiagnosis.Visible = false;
            OpticalsPanel.Visible = false;
            PanelFreeText.Visible = false; //Ritika (12-09-2022) FreeText

            ImageOPt1.ImageUrl = "~/Images/plus-icon.svg";
            imgbtnChiefComplaints.ImageUrl = "~/Images/plus-icon.svg";
            ImageButton3.ImageUrl = "~/Images/plus-icon.svg";
            imgVbtnVital.ImageUrl = "~/Images/plus-icon.svg";
            imbtnHistory.ImageUrl = "~/Images/plus-icon.svg";
            imgbtnTemplate.ImageUrl = "~/Images/plus-icon.svg";
            imgbtntherNotes.ImageUrl = "~/Images/plus-icon.svg";
            imgbtnOrdersAndProcedures.ImageUrl = "~/Images/plus-icon.svg";
            imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/plus-icon.svg";
            imgbtnPrescription.ImageUrl = "~/Images/plus-icon.svg";
            ImageButton2.ImageUrl = "~/Images/plus-icon.svg";
            ibtNutritionalStatus.ImageUrl = "~/Images/plus-icon.svg";
            ImageButton4.ImageUrl = "~/Images/plus-icon.svg";
            ImageButtonRemarks.ImageUrl = "~/Images/plus-icon.svg";
            ImageButtonFollowup.ImageUrl = "~/Images/plus-icon.svg";
            ImageButton7.ImageUrl = "~/Images/plus-icon.svg";
            ImageButton5.ImageUrl = "~/Images/plus-icon.svg";
            ImageButton8.ImageUrl = "~/Images/plus-icon.svg";
            ImageButton9.ImageUrl = "~/Images/plus-icon.svg";
            ImageButton10.ImageUrl = "~/Images/plus-icon.svg";
            ImageButton11.ImageUrl = "~/Images/plus-icon.svg";
            ImageButton12.ImageUrl = "~/Images/plus-icon.svg";
            ImageButton13.ImageUrl = "~/Images/plus-icon.svg";
            ImageButton14.ImageUrl = "~/Images/plus-icon.svg";
            pnlDiagnosis.Visible = false;
            ImageButtonFreeText.ImageUrl = "~/Images/plus-icon.svg";  //Ritika (12-09-2022) FreeText
        }
    }
    private void ClearMessageControl()
    {
        lblCostAnalysisMessage.Text = string.Empty;
        lblPlanOfCareMessage.Text = string.Empty;
        lblNutritionalStatusMessage.Text = string.Empty;
        lblPrevTreatmentMessage.Text = string.Empty;
        lblExamMessage.Text = string.Empty;
        lblHistoryMessage.Text = string.Empty;
        lblPHistoryMessage.Text = string.Empty;
        lblVitalMessage.Text = string.Empty;
        lblChiefMessage.Text = string.Empty;
        lblAllergyMessage.Text = string.Empty;
        lblVitalMessage.Text = string.Empty;
        lblProvDiag.Text = string.Empty;
    }
    private void ClearButtonControl()
    {
        imgBtnAddChiefComplaints.Visible = false;
        imgBtnAddAllergies.Visible = false;
        lnkImmunisationHistory.Visible = false;
        imgVbtnVital.Visible = false;
        imgBtnAddVitals.Visible = false;
        ImageButton1.Visible = false;
        imgBtnTemplates.Visible = false;
        ImageButton6.Visible = false;
        lnkAddTemplates_All.Visible = false;
        imgBtnProvisionalDiagnosis.Visible = false;
        imgbtnAddOrdersAndProcedures.Visible = false;
        imgBtnAddPrescriptions.Visible = false;
        imgNonDrugOrder.Visible = false;
        lnkEducationCounseling.Visible = false;
        lnkReferrals.Visible = false;
        lnkAnaesthesiaCritical.Visible = false;
        lnkMultidisciplinaryEvaluation.Visible = false;
    }
    private void OpenButtonControls()
    {
        imgBtnAddChiefComplaints.Visible = true;
        imgBtnAddAllergies.Visible = true;
        lnkImmunisationHistory.Visible = true;
        imgBtnAddVitals.Visible = true;
        ImageButton1.Visible = true;
        imgBtnTemplates.Visible = true;
        ImageButton6.Visible = true;
        lnkAddTemplates_All.Visible = true;
        imgBtnProvisionalDiagnosis.Visible = true;
        imgbtnAddOrdersAndProcedures.Visible = true;
        imgBtnAddPrescriptions.Visible = true;
        imgNonDrugOrder.Visible = true;
        lnkEducationCounseling.Visible = true;
        lnkReferrals.Visible = true;
        lnkAnaesthesiaCritical.Visible = true;
        lnkMultidisciplinaryEvaluation.Visible = true;
    }
    private void ClearEditorControls()
    {
        //editorChiefComplaints.Text = string.Empty;
        //  txtWHistory.Text = string.Empty;
        txtWCostAnalysis.Text = string.Empty;
        //  txtWExamination.Text = string.Empty;
        txtWNutritionalStatus.Text = string.Empty;
        //  txtWPlanOfCare.Text = string.Empty;
        txtWPrevTreatment.Text = string.Empty;
        editorProvDiagnosis.Text = string.Empty;
        editorNonDrugOrder.Text = string.Empty;
        //  txtPHistory.Text = string.Empty;
    }
    protected void ViewHide_OnClick(object sender, EventArgs e)
    {
        ImageButton imgbtn = (ImageButton)sender;
        PanelVisibility(imgbtn.ToolTip.Trim());
    }

    private void PanelVisibility(string strtoollTip)
    {
        //if (checkAll.Checked == true)
        //{
        //    return;
        //}


        if (strtoollTip.Equals("Chief Complaints"))
        {
            //if (pnlChiefComplaints.Visible)
            //{
            //    imgbtnChiefComplaints.ImageUrl = "~/Images/plus-icon.svg";
            //    pnlChiefComplaints.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            imgbtnChiefComplaints.ImageUrl = "~/Images/minus-icon.svg";
            pnlChiefComplaints.Visible = true;
            return;
            // }
        }
        else if (strtoollTip.Equals("Allergies"))
        {
            //if (Panel2.Visible)
            //{
            //    ImageButton3.ImageUrl = "~/Images/plus-icon.svg";
            //    Panel2.Visible = false;
            //    tblAllergiesDetail.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            ImageButton3.ImageUrl = "~/Images/minus-icon.svg";
            Panel2.Visible = true;
            tblAllergiesDetail.Visible = true;
            return;
            // }
        }


        else if (strtoollTip.Equals("Ophthalmology Vitals"))
        {
            //if (OpticalsPanel.Visible)
            //{
            //    ImageOPt1.ImageUrl = "~/Images/plus-icon.svg";
            //    OpticalsPanel.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            ImageOPt1.ImageUrl = "~/Images/minus-icon.svg";
            OpticalsPanel.Visible = true;
            return;
            //}
        }


        else if (strtoollTip.Equals("Vitals"))
        {
            //if (pnlVitals.Visible)
            //{
            //    imgVbtnVital.ImageUrl = "~/Images/plus-icon.svg";
            //    pnlVitals.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            imgVbtnVital.ImageUrl = "~/Images/minus-icon.svg";
            pnlVitals.Visible = true;
            return;
            //}
        }
        else if (strtoollTip.Equals("History"))
        {
            //if (pnlHistory.Visible)
            //{
            //    imbtnHistory.ImageUrl = "~/Images/plus-icon.svg";
            //    pnlHistory.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            imbtnHistory.ImageUrl = "~/Images/minus-icon.svg";
            pnlHistory.Visible = true;
            return;
            // }
        }
        else if (strtoollTip.Equals("Template"))
        {
            //if (Panel10.Visible)
            //{
            //    imgbtnTemplate.ImageUrl = "~/Images/plus-icon.svg";
            //    Panel10.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            imgbtnTemplate.ImageUrl = "~/Images/minus-icon.svg";
            Panel10.Visible = true;
            return;
            //}
        }
        else if (strtoollTip.Equals("Other Notes"))
        {
            //if (pnlOtherNotes.Visible)
            //{
            //    imgbtntherNotes.ImageUrl = "~/Images/plus-icon.svg";
            //    pnlOtherNotes.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            imgbtntherNotes.ImageUrl = "~/Images/minus-icon.svg";
            pnlOtherNotes.Visible = true;
            return;
            //}
        }
        else if (strtoollTip.Equals("Provisional Diagnosis"))
        {
            //if (pnlProvisionalDiagnosis.Visible)
            //{
            //    imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/plus-icon.svg";
            //    pnlProvisionalDiagnosis.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/minus-icon.svg";
            pnlProvisionalDiagnosis.Visible = true;
            return;
            //}
        }
        else if (strtoollTip.Equals("Orders And Procedures"))
        {
            //if (pnlOrderProcedures.Visible)
            //{
            //    imgbtnOrdersAndProcedures.ImageUrl = "~/Images/plus-icon.svg";
            //    pnlOrderProcedures.Visible = false;
            //    gvOrdersAndProcedures.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            imgbtnOrdersAndProcedures.ImageUrl = "~/Images/minus-icon.svg";
            pnlOrderProcedures.Visible = true;
            gvOrdersAndProcedures.Visible = true;
            return;
            // }
        }
        else if (strtoollTip.Equals("Prescriptions"))
        {
            //if (pnlPrescription.Visible)
            //{
            //    imgbtnPrescription.ImageUrl = "~/Images/plus-icon.svg";
            //    pnlPrescription.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            imgbtnPrescription.ImageUrl = "~/Images/minus-icon.svg";
            pnlPrescription.Visible = true;
            gvPrescriptions.Visible = true;
            return;
            // }
        }
        else if (strtoollTip.Equals("Previous Treatment"))
        {
            //if (Panel3.Visible)
            //{
            //    ImageButton2.ImageUrl = "~/Images/plus-icon.svg";
            //    Panel3.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            ImageButton2.ImageUrl = "~/Images/minus-icon.svg";
            Panel3.Visible = true;
            return;
            //  }
        }
        else if (strtoollTip.Equals("Nutritional Status"))
        {
            //if (Panel6.Visible)
            //{
            //    ibtNutritionalStatus.ImageUrl = "~/Images/plus-icon.svg";
            //    Panel6.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            ibtNutritionalStatus.ImageUrl = "~/Images/minus-icon.svg";
            Panel6.Visible = true;
            return;
            // }
        }
        else if (strtoollTip.Equals("Plan Of Care"))
        {
            //if (Panel13.Visible)
            //{
            //    ImageButton4.ImageUrl = "~/Images/plus-icon.svg";
            //    Panel13.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            ImageButton4.ImageUrl = "~/Images/minus-icon.svg";
            Panel13.Visible = true;
            return;
            //}
        }
        else if (strtoollTip.Equals("Cost Analysis"))
        {
            //    if (Panel14.Visible)
            //    {
            //        ImageButton7.ImageUrl = "~/Images/plus-icon.svg";
            //        Panel14.Visible = false;
            //    }
            //    else
            //    {
            HideAllPanel();
            ImageButton7.ImageUrl = "~/Images/minus-icon.svg";
            Panel14.Visible = true;
            return;
            //  }
        }
        else if (strtoollTip.Equals("Non Drug Order"))
        {
            //if (Panel20.Visible)
            //{
            //    ImageButton7.ImageUrl = "~/Images/plus-icon.svg";
            //    Panel20.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            ImageButton7.ImageUrl = "~/Images/minus-icon.svg";
            Panel20.Visible = true;
            return;
            //}
        }
        else if (strtoollTip.Equals("Final Diagnosis"))
        {
            //if (pnlDiagnosis.Visible)
            //{
            //    ImageButton13.ImageUrl = "~/Images/plus-icon.svg";
            //    pnlDiagnosis.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            ImageButton13.ImageUrl = "~/Images/minus-icon.svg";
            pnlDiagnosis.Visible = true;
            return;
            // }
        }

        else if (strtoollTip.Equals("PAC Notes"))
        {
            //if (pnlPACTemplates.Visible)
            //{
            //    imgpnlPACTemplates.ImageUrl = "~/Images/plus-icon.svg";
            //    pnlPACTemplates.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            imgpnlPACTemplates.ImageUrl = "~/Images/minus-icon.svg";
            pnlPACTemplates.Visible = true;
            return;
            // }

        }
        else if (strtoollTip.Equals("OT Request"))
        {
            //if (pnlOTRequest.Visible)
            //{
            //    imgExpndOTRequest.ImageUrl = "~/Images/plus-icon.svg";
            //    pnlOTRequest.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            imgExpndOTRequest.ImageUrl = "~/Images/minus-icon.svg";
            pnlOTRequest.Visible = true;
            return;
            // }
        }

        else if (strtoollTip.Equals("Past History"))
        {
            //if (Panel23.Visible)
            //{
            //    ImageButton14.ImageUrl = "~/Images/plus-icon.svg";
            //    Panel23.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            ImageButton14.ImageUrl = "~/Images/minus-icon.svg";
            Panel23.Visible = true;
            return;
            // }
        }
        else if (strtoollTip.Equals("History of Present illness"))
        {
            //if (pnlHistory.Visible)
            //{
            //    imbtnHistory.ImageUrl = "~/Images/plus-icon.svg";
            //    pnlHistory.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            imbtnHistory.ImageUrl = "~/Images/minus-icon.svg";
            pnlHistory.Visible = true;
            return;
            // }
        }
        else if (strtoollTip.Equals("Care Templates"))
        {
            //if (pnlHistory.Visible)
            //{
            //    imgbtntherNotes.ImageUrl = "~/Images/plus-icon.svg";
            //    pnlOtherNotes.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            imgbtntherNotes.ImageUrl = "~/Images/minus-icon.svg";
            pnlOtherNotes.Visible = true;
            return;
            // }
        }
        else if (strtoollTip.Equals("Follow up"))
        {
            //if (Panel13.Visible)
            //{
            //    ImageButton4.ImageUrl = "~/Images/plus-icon.svg";
            //    Panel13.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            ImageButtonFollowup.ImageUrl = "~/Images/minus-icon.svg";
            PanelFollowup.Visible = true;
            return;
            //}
        }
        else if (strtoollTip.Equals("Remarks"))
        {
            //if (Panel13.Visible)
            //{
            //    ImageButton4.ImageUrl = "~/Images/plus-icon.svg";
            //    Panel13.Visible = false;
            //}
            //else
            //{
            HideAllPanel();
            ImageButtonRemarks.ImageUrl = "~/Images/minus-icon.svg";
            PanelRemarks.Visible = true;
            return;
            //}
        }
        else if (strtoollTip.Equals("FreeText"))  //Ritika(12-09-2022)FreeText
        {
            HideAllPanel();
            ImageButtonFreeText.ImageUrl = "~/Images/minus-icon.svg";
            PanelFreeText.Visible = true;
            return;
        }

        else if (strtoollTip.Equals("FreeText"))  //Ritika(12-09-2022)FreeText
        {
            HideAllPanel();
            ImageButtonFreeText.ImageUrl = "~/Images/minus-icon.svg";
            PanelFreeText.Visible = true;
            return;
        }

    }

    private void HideAllPanel()
    {
        //all visible false

        imgbtnChiefComplaints.ImageUrl = "~/Images/plus-icon.svg";
        pnlChiefComplaints.Visible = false;

        ImageButton3.ImageUrl = "~/Images/plus-icon.svg";
        Panel2.Visible = false;
        tblAllergiesDetail.Visible = false;

        ImageOPt1.ImageUrl = "~/Images/plus-icon.svg";
        OpticalsPanel.Visible = false;

        imgVbtnVital.ImageUrl = "~/Images/plus-icon.svg";
        pnlVitals.Visible = false;

        imbtnHistory.ImageUrl = "~/Images/plus-icon.svg";
        pnlHistory.Visible = false;

        imgbtnTemplate.ImageUrl = "~/Images/plus-icon.svg";
        Panel10.Visible = false;

        imgbtntherNotes.ImageUrl = "~/Images/plus-icon.svg";
        pnlOtherNotes.Visible = false;

        imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/plus-icon.svg";
        pnlProvisionalDiagnosis.Visible = false;


        imgbtnOrdersAndProcedures.ImageUrl = "~/Images/plus-icon.svg";
        pnlOrderProcedures.Visible = false;
        // gvOrdersAndProcedures.Visible = false;bhakti

        imgbtnPrescription.ImageUrl = "~/Images/plus-icon.svg";
        pnlPrescription.Visible = false;

        ImageButton2.ImageUrl = "~/Images/plus-icon.svg";
        Panel3.Visible = false;

        ibtNutritionalStatus.ImageUrl = "~/Images/plus-icon.svg";
        Panel6.Visible = false;

        ImageButton4.ImageUrl = "~/Images/plus-icon.svg";
        Panel13.Visible = false;

        ImageButton7.ImageUrl = "~/Images/plus-icon.svg";
        Panel14.Visible = false;

        ImageButton7.ImageUrl = "~/Images/plus-icon.svg";
        Panel20.Visible = false;

        ImageButton13.ImageUrl = "~/Images/plus-icon.svg";
        pnlDiagnosis.Visible = false;

        imgpnlPACTemplates.ImageUrl = "~/Images/plus-icon.svg";
        pnlPACTemplates.Visible = false;

        imgExpndOTRequest.ImageUrl = "~/Images/plus-icon.svg";
        pnlOTRequest.Visible = false;

        ImageButton14.ImageUrl = "~/Images/plus-icon.svg";
        Panel23.Visible = false;

        imbtnHistory.ImageUrl = "~/Images/plus-icon.svg";
        pnlHistory.Visible = false;

        imgbtntherNotes.ImageUrl = "~/Images/plus-icon.svg";
        pnlOtherNotes.Visible = false;


    }

    private void BindCommonData(string sTemplateName, string sTemplateType, string sTemplateCode, int iTemplateId, int PageNo)
    {
        DataSet ds = new DataSet();
        //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString); // 5 kk
        DataView dvFilterHistory = new DataView();
        DataView dvPreviousTreatment = new DataView();
        DataView dvCostAnalysis = new DataView();
        DataView dvFilterExamination = new DataView();
        DataView dvFilterNutritional = new DataView();
        DataView dvFilterPlanOfCare = new DataView();
        DataView dvFilterFollowUp = new DataView();
        DataView dvFilterRemarks = new DataView();
        DataView dvFilterOtherNotes = new DataView();
        DataView dvFilterPreTreatment = new DataView();
        DataView dvFiltergvCostAnalysis = new DataView();
        DataView dvFilterFreeText = new DataView(); //Ritika(12-09-2022) FreeText
        int pageSize = 7;
        dvErdata.Visible = false;
        try
        {
            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/GetEMRDataForSingleScreen";
            APIRootClass.GetEMRDataForSingleScreen objRoot = new global::APIRootClass.GetEMRDataForSingleScreen();
            objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
            objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
            objRoot.EncounterId = common.myInt(Session["EncounterId"]);
            objRoot.sTemplateType = sTemplateType;
            objRoot.iTemplateId = iTemplateId;
            objRoot.sTemplateName = sTemplateName;
            objRoot.EncounterDate = common.myDate(Session["EncounterDate"]).ToString("yyyy/MM/dd");
            objRoot.ToDate = common.myDate(DateTime.Now).ToString("yyyy/MM/dd");
            objRoot.FacilityId = common.myInt(Session["FacilityId"]);
            objRoot.pageSize = pageSize;
            objRoot.PageNo = PageNo;
            objRoot.IsCopyLastOPDSummary = false;

            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;
            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            var sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);
            ds = JsonConvert.DeserializeObject<DataSet>(sValue);
            //ds = objEMR.GetEMRDataForSingleScreen(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]),
            //                    common.myInt(Session["FacilityId"]), common.myInt(Session["EncounterId"]), sTemplateType, iTemplateId, sTemplateName,
            //                    common.myDate(Session["EncounterDate"]).ToString("yyyy/MM/dd"), common.myDate(DateTime.Now).ToString("yyyy/MM/dd"),
            //                    pageSize, PageNo);



            //Added by bhakti 

            if (sTemplateName.Equals(string.Empty) && sTemplateType.Equals(string.Empty))
            {
                if (ds.Tables[0].Rows.Count.Equals(0))
                {
                    //DataRow dr = ds.Tables[0].NewRow();
                    //ds.Tables[0].Rows.Add(dr);
                    //gvProblemDetails.DataSource = ds.Tables[0];
                    //gvProblemDetails.DataBind();
                    //dr = null;

                    gvProblemDetails.DataSource = null;
                    gvProblemDetails.DataBind();
                }
                else
                {
                    gvProblemDetails.DataSource = ds.Tables[0];
                    gvProblemDetails.DataBind();
                    divChifComplaint.Visible = true;
                    GridViewChifComplaint.DataSource = ds.Tables[0];
                    GridViewChifComplaint.DataBind();
                    //added by bhakti 
                    editorChiefComplaints.Height = 100;
                    editorChiefComplaints.Text = common.clearHTMLTags(ds.Tables[0].Rows[0]["ProblemDescription"].ToString().Replace("<br/>", System.Environment.NewLine));
                    //editorChiefComplaints.Height = 100;
                    // ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "autoExpand('" + editorChiefComplaints.ClientID + "');", true);
                    divChifComplaint.Visible = true;
                    // lblchifcomplaint.Text = common.clearHTMLTags(ds.Tables[0].Rows[0]["ProblemDescription"].ToString().Replace("<br/>", System.Environment.NewLine));

                    hdnProblemId.Value = ds.Tables[0].Rows[0]["Id"].ToString();
                }
                bindAllergies(ds);
                if (ds.Tables[3].Rows.Count.Equals(0))
                {
                    //DataRow dr = ds.Tables[3].NewRow();
                    //ds.Tables[3].Rows.Add(dr);
                    //gvData.DataSource = ds.Tables[3];
                    //gvData.DataBind();
                    //dr = null;
                    gvData.DataSource = null;
                    gvData.DataBind();
                }
                else
                {
                    gvData.DataSource = ds.Tables[3];
                    gvData.DataBind();
                    //added by bhakti
                    divProvisionalDiagnosis.Visible = true;
                    GridViewProvisionalDiagnosis.DataSource = ds.Tables[3];
                    GridViewProvisionalDiagnosis.DataBind();
                    //populatePager(rptPageProvisionalDiagnosis, common.myInt(ds.Tables[3].Rows[0]["TotalRecordsCount"]), PageNo, pageSize);
                }
                if (ds.Tables[4].Rows.Count.Equals(0))
                {
                    //DataRow dr = ds.Tables[4].NewRow();
                    //ds.Tables[4].Rows.Add(dr);
                    //gvOrdersAndProcedures.DataSource = ds.Tables[4];
                    //gvOrdersAndProcedures.DataBind();
                    //populatePager(rptPagerOrdersAndProcedures, 0, PageNo, pageSize);
                    //dr = null;
                }
                else
                {
                    gvOrdersAndProcedures.DataSource = ds.Tables[4];
                    gvOrdersAndProcedures.DataBind();
                    divGridViewOrders.Visible = true;
                    GridViewOrders.DataSource = ds.Tables[4];
                    GridViewOrders.DataBind();
                    populatePager(rptPagerOrdersAndProcedures, common.myInt(ds.Tables[4].Rows[0]["TotalRecordsCount"]), PageNo, pageSize);
                }
                if (ds.Tables[5].Rows.Count.Equals(0))
                {
                    //DataRow dr = ds.Tables[5].NewRow();
                    //ds.Tables[5].Rows.Add(dr);
                    //gvPrescriptions.DataSource = ds.Tables[5];
                    //gvPrescriptions.DataBind();
                    //populatePager(rptPagerPrescriptions, 0, PageNo, pageSize);
                    //dr = null;
                }
                else
                {
                    ViewState["GridDataDetail"] = ds.Tables[6];
                    gvPrescriptions.DataSource = ds.Tables[5];
                    gvPrescriptions.DataBind();
                    divPriscription.Visible = true;
                    GridViewPriscription.DataSource = ds.Tables[5];
                    GridViewPriscription.DataBind();


                    populatePager(rptPagerPrescriptions, common.myInt(ds.Tables[5].Rows[0]["TotalRecordsCount"]), PageNo, pageSize);
                }
                if (ds.Tables[7].Rows.Count.Equals(0))
                {



                    DataTable dt = new DataTable();
                    DataColumn dC;
                    dC = new DataColumn("HT", typeof(string));
                    dC.AllowDBNull = true;
                    dt.Columns.Add(dC);
                    dC = new DataColumn("WT", typeof(string));
                    dC.AllowDBNull = true;
                    dt.Columns.Add(dC);

                    dC = new DataColumn("HC", typeof(string));
                    dC.AllowDBNull = true;
                    dt.Columns.Add(dC);
                    dC = new DataColumn("T", typeof(string));
                    dC.AllowDBNull = true;
                    dt.Columns.Add(dC);
                    dC = new DataColumn("R", typeof(string));
                    dC.AllowDBNull = true;
                    dt.Columns.Add(dC);
                    dC = new DataColumn("P", typeof(string));
                    dC.AllowDBNull = true;
                    dt.Columns.Add(dC);
                    dC = new DataColumn("BPS", typeof(string));
                    dC.AllowDBNull = true;
                    dt.Columns.Add(dC);
                    dC = new DataColumn("BPD", typeof(string));
                    dC.AllowDBNull = true;
                    dt.Columns.Add(dC);
                    dC = new DataColumn("MAC", typeof(string));
                    dC.AllowDBNull = true;
                    dt.Columns.Add(dC);
                    dC = new DataColumn("SPO2", typeof(string));
                    dC.AllowDBNull = true;
                    dt.Columns.Add(dC);
                    dC = new DataColumn("BMI", typeof(string));
                    dC.AllowDBNull = true;
                    dt.Columns.Add(dC);
                    dC = new DataColumn("BSA", typeof(string));
                    dC.AllowDBNull = true;
                    dt.Columns.Add(dC);
                    dC = new DataColumn("T_ABNORMAL_VALUE", typeof(string));
                    dC.AllowDBNull = true;
                    dt.Columns.Add(dC);
                    dC = new DataColumn("R_ABNORMAL_VALUE", typeof(string));
                    dC.AllowDBNull = true;
                    dt.Columns.Add(dC);
                    dC = new DataColumn("P_ABNORMAL_VALUE", typeof(string));
                    dC.AllowDBNull = true;

                    dt.Columns.Add(dC);
                    DataRow dr = dt.NewRow();
                    dt.Rows.Add(dr);
                    dt.AcceptChanges();

                    //DataRow dr = ds.Tables[7].NewRow();
                    //ds.Tables[7].Rows.Add(dr);
                    gvVitals.DataSource = dt;
                    gvVitals.DataBind();
                    divVital.Visible = false;


                    populatePager(rptPagerVitals, 0, PageNo, pageSize);
                    dr = null;


                    if (lnktriageform.Visible == true)
                    {
                        ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/GetEvitalresult";
                        APIRootClass.GetEvitalresult objRoot1 = new global::APIRootClass.GetEvitalresult();
                        objRoot1.EncounterID = common.myInt(Session["EncounterID"]);


                        client = new WebClient();
                        client.Headers["Content-type"] = "application/json";
                        client.Encoding = Encoding.UTF8;

                        inputJson = (new JavaScriptSerializer()).Serialize(objRoot1);
                        sValue = client.UploadString(ServiceURL, inputJson);
                        sValue = JsonConvert.DeserializeObject<string>(sValue);
                        DataSet dsx = JsonConvert.DeserializeObject<DataSet>(sValue);


                        //DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString); // 6 kk
                        //DataSet dsx = dl.FillDataSet(CommandType.Text, "Exec uspGetEvitalresult @encounterID=" + common.myInt(Session["EncounterID"]));
                        for (int i = 0; i < dsx.Tables[0].Rows.Count; i++)
                        {
                            if (dsx.Tables[0].Rows[i]["VitalName"].ToString() == "T")
                            {
                                TxtTemperature.Text = dsx.Tables[0].Rows[i]["Result"].ToString();
                            }
                            if (dsx.Tables[0].Rows[i]["VitalName"].ToString() == "BMI")
                            {
                                txtBMI.Text = dsx.Tables[0].Rows[i]["Result"].ToString();
                                //hdnBMI.Value = dsx.Tables[0].Rows[i]["Result"].ToString();
                            }
                            if (dsx.Tables[0].Rows[i]["VitalName"].ToString() == "SPO2")
                            {
                                txtSpO2.Text = dsx.Tables[0].Rows[i]["Result"].ToString();
                            }
                            if (dsx.Tables[0].Rows[i]["VitalName"].ToString() == "MAP")
                            {
                                txtMAC.Text = dsx.Tables[0].Rows[i]["Result"].ToString();
                            }
                            if (dsx.Tables[0].Rows[i]["VitalName"].ToString() == "BPD")
                            {
                                txtBPDiastolic.Text = dsx.Tables[0].Rows[i]["Result"].ToString();
                            }
                            if (dsx.Tables[0].Rows[i]["VitalName"].ToString() == "BPS")
                            {
                                txtBPSystolic.Text = dsx.Tables[0].Rows[i]["Result"].ToString();
                            }
                            if (dsx.Tables[0].Rows[i]["VitalName"].ToString() == "P")
                            {
                                txtPulse.Text = dsx.Tables[0].Rows[i]["Result"].ToString();
                            }
                            if (dsx.Tables[0].Rows[i]["VitalName"].ToString() == "Res")
                            {
                                txtRespiration.Text = dsx.Tables[0].Rows[i]["Result"].ToString();
                            }

                            if (dsx.Tables[0].Rows[i]["VitalName"].ToString() == "HT")
                            {
                                txtHeight.Text = dsx.Tables[0].Rows[i]["Result"].ToString();
                                //hdnHeight.Value = dsx.Tables[0].Rows[i]["Result"].ToString();
                            }
                            if (dsx.Tables[0].Rows[i]["VitalName"].ToString() == "WT")
                            {
                                TxtWeight.Text = dsx.Tables[0].Rows[i]["Result"].ToString();
                                //hdnWeight.Value = dsx.Tables[0].Rows[i]["Result"].ToString();
                            }

                        }

                        if (dsx.Tables[1].Rows.Count != 0)
                        {
                            txtBMI.Text = dsx.Tables[1].Rows[0]["BMI"].ToString();
                            //hdnBMI.Value = dsx.Tables[1].Rows[0]["BMI"].ToString();

                            txtRespiration.Text = dsx.Tables[1].Rows[0]["Resp"].ToString();



                            txtHeight.Text = dsx.Tables[1].Rows[0]["HT"].ToString();
                            //hdnHeight.Value = dsx.Tables[1].Rows[0]["HT"].ToString();

                            TxtWeight.Text = dsx.Tables[1].Rows[0]["WT"].ToString();
                            //hdnWeight.Value = dsx.Tables[1].Rows[0]["WT"].ToString();
                            String strData = "<b>Triage Details</b></br><b>CheifCompl:</b>" + dsx.Tables[1].Rows[0]["CheifCompl"].ToString();
                            strData = strData + "</br><b>Initial Observation:</b>" + dsx.Tables[1].Rows[0]["IO"].ToString();
                            dvErdata.Visible = true;
                            dvErdata.InnerHtml = strData;
                        }

                    }
                }
                else
                {
                    if (common.myStr(ds.Tables[7].Rows[0]["HT"]) == "")
                    {
                        if (lnktriageform.Visible == true)
                        {
                            ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/GetEvitalresult";
                            APIRootClass.GetEvitalresult objRoot1 = new global::APIRootClass.GetEvitalresult();
                            objRoot1.EncounterID = common.myInt(Session["EncounterID"]);


                            client = new WebClient();
                            client.Headers["Content-type"] = "application/json";
                            client.Encoding = Encoding.UTF8;

                            inputJson = (new JavaScriptSerializer()).Serialize(objRoot1);
                            sValue = client.UploadString(ServiceURL, inputJson);
                            sValue = JsonConvert.DeserializeObject<string>(sValue);
                            DataSet dsx = JsonConvert.DeserializeObject<DataSet>(sValue);

                            //DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString); // 7 kk
                            //DataSet dsx = dl.FillDataSet(CommandType.Text, "Exec uspGetEvitalresult @encounterID=" + common.myInt(Session["EncounterID"]));
                            for (int i = 0; i < dsx.Tables[0].Rows.Count; i++)
                            {
                                if (dsx.Tables[0].Rows[i]["VitalName"].ToString() == "T")
                                {
                                    TxtTemperature.Text = dsx.Tables[0].Rows[i]["Result"].ToString();
                                }

                                if (dsx.Tables[0].Rows[i]["VitalName"].ToString() == "SPO2")
                                {
                                    txtSpO2.Text = dsx.Tables[0].Rows[i]["Result"].ToString();
                                }
                                if (dsx.Tables[0].Rows[i]["VitalName"].ToString() == "MAP")
                                {
                                    txtMAC.Text = dsx.Tables[0].Rows[i]["Result"].ToString();
                                }
                                if (dsx.Tables[0].Rows[i]["VitalName"].ToString() == "BPD")
                                {
                                    txtBPDiastolic.Text = dsx.Tables[0].Rows[i]["Result"].ToString();
                                }
                                if (dsx.Tables[0].Rows[i]["VitalName"].ToString() == "BPS")
                                {
                                    txtBPSystolic.Text = dsx.Tables[0].Rows[i]["Result"].ToString();
                                }
                                if (dsx.Tables[0].Rows[i]["VitalName"].ToString() == "P")
                                {
                                    txtPulse.Text = dsx.Tables[0].Rows[i]["Result"].ToString();
                                }

                            }
                            if (dsx.Tables[1].Rows.Count != 0)
                            {
                                txtBMI.Text = dsx.Tables[1].Rows[0]["BMI"].ToString();
                                //hdnBMI.Value = dsx.Tables[1].Rows[0]["BMI"].ToString();

                                txtRespiration.Text = dsx.Tables[1].Rows[0]["Resp"].ToString();



                                txtHeight.Text = dsx.Tables[1].Rows[0]["HT"].ToString();
                                //hdnHeight.Value = dsx.Tables[1].Rows[0]["HT"].ToString();

                                TxtWeight.Text = dsx.Tables[1].Rows[0]["WT"].ToString();
                                //hdnWeight.Value = dsx.Tables[1].Rows[0]["WT"].ToString();
                                String strData = "<b>Triage Details</b></br><b>CheifCompl:</b>" + dsx.Tables[1].Rows[0]["CheifCompl"].ToString();
                                strData = strData + "</br><b>Initial Observation:</b>" + dsx.Tables[1].Rows[0]["IO"].ToString();
                                dvErdata.Visible = true;
                                dvErdata.InnerHtml = strData;
                            }
                        }
                    }

                    if (ds.Tables[7].Rows.Count > 0)
                    {
                        //gvVitals.DataSource = ds.Tables[7];
                        //DataRow DR = ds.Tables[7].Rows[0];
                        //txtHeight.Text = common.myStr(DR["HT"]);
                        //TxtWeight.Text = common.myStr(DR["WT"]);
                        //txtHC.Text = common.myStr(DR["HC"]);
                        //TxtTemperature.Text = common.myStr(DR["T"]);
                        //txtRespiration.Text = common.myStr(DR["R"]);
                        //txtPulse.Text = common.myStr(DR["P"]);
                        //txtBPSystolic.Text = common.myStr(DR["BPS"]);
                        //txtBPDiastolic.Text = common.myStr(DR["BPD"]);
                        //txtMAC.Text = common.myStr(DR["MAC"]);
                        //txtSpO2.Text = common.myStr(DR["SPO2"]);
                        //txtBMI.Text = common.myStr(DR["BMI"]);
                        //hdnBMIValue.Value = common.myStr(DR["BMI"]);
                        //txtBSA.Text = common.myStr(DR["BSA"]);
                        //hdnBSAValue.Value = common.myStr(DR["BSA"]);

                        divVital.Visible = true;
                        gvVitals.DataSource = ds.Tables[7];
                        GridViewvitals.DataSource = ds.Tables[7];
                        DataRow DR = ds.Tables[7].Rows[0];
                        txtHeight.Text = common.myStr(DR["HT"]);
                        txtHeight.ReadOnly = true;
                        TxtWeight.Text = common.myStr(DR["WT"]);
                        TxtWeight.ReadOnly = true;
                        txtHC.Text = common.myStr(DR["HC"]);
                        txtHC.ReadOnly = true;
                        TxtTemperature.Text = common.myStr(DR["T"]);
                        TxtTemperature.ReadOnly = true;
                        txtRespiration.Text = common.myStr(DR["R"]);
                        txtRespiration.ReadOnly = true;
                        txtPulse.Text = common.myStr(DR["P"]);
                        txtPulse.ReadOnly = true;
                        txtBPSystolic.Text = common.myStr(DR["BPS"]);
                        txtBPSystolic.ReadOnly = true;
                        txtBPDiastolic.Text = common.myStr(DR["BPD"]);
                        txtBPDiastolic.ReadOnly = true;
                        txtMAC.Text = common.myStr(DR["MAC"]);
                        txtMAC.ReadOnly = true;
                        txtSpO2.Text = common.myStr(DR["SPO2"]);
                        txtSpO2.ReadOnly = true;
                        txtBMI.Text = common.myStr(DR["BMI"]);
                        txtBMI.ReadOnly = true;
                        hdnBMIValue.Value = common.myStr(DR["BMI"]);
                        txtBSA.Text = common.myStr(DR["BSA"]);
                        hdnBSAValue.Value = common.myStr(DR["BSA"]);
                    }

                    else
                    {

                        //gvVitals.DataSource = null;

                        txtHeight.ReadOnly = false;
                        TxtWeight.ReadOnly = false;
                        txtHC.ReadOnly = false;
                        TxtTemperature.ReadOnly = false;
                        txtRespiration.ReadOnly = false;
                        txtPulse.ReadOnly = false;
                        txtBPSystolic.ReadOnly = false;
                        txtBPDiastolic.ReadOnly = false;
                        txtSpO2.ReadOnly = false;

                    }
                    gvVitals.DataBind();

                    GridViewvitals.DataBind();
                    // populatePager(rptPagerVitals, common.myInt(ds.Tables[7].Rows[0]["TotalRecordsCount"]), PageNo, pageSize);
                }
                if (ds.Tables[8].Rows.Count.Equals(0))
                {
                    //DataRow dr = ds.Tables[8].NewRow();
                    //ds.Tables[8].Rows.Add(dr);
                    //gvNonDrugOrder.DataSource = ds.Tables[8];
                    //gvNonDrugOrder.DataBind();
                    //dr = null;
                }
                else
                {
                    gvNonDrugOrder.DataSource = ds.Tables[8];
                    gvNonDrugOrder.DataBind();
                }
                dvFilterHistory = new DataView(ds.Tables[9].Copy());
                if (ds.Tables[9].Rows.Count > 0)
                    dvFilterHistory.RowFilter = "TemplateCode='HIS' AND IsFreeTextTemplate=1";
                if (dvFilterHistory.ToTable().Rows.Count > 0)
                {
                    txtWHistory.Text = common.clearHTMLTags(dvFilterHistory.ToTable().Rows[0]["TemplateName"].ToString().Replace("<br/>", System.Environment.NewLine));
                    txtWHistory.Height = 100;
                    divHpi.Visible = true;
                    lblHpi.Text = common.clearHTMLTags(dvFilterHistory.ToTable().Rows[0]["TemplateName"].ToString().Replace("<br/>", System.Environment.NewLine));
                    Session["RecordId"] = dvFilterHistory.ToTable().Rows[0]["recordId"];
                    //Change palendra
                    hdnWRecordId.Value = dvFilterHistory.ToTable().Rows[0]["recordId"].ToString();
                    //Change palendra
                    gvHistory.DataSource = dvFilterHistory.ToTable();
                    gvHistory.DataBind();
                    //gvHistory.Visible = true;
                }
                else
                {
                    gvHistory.DataSource = BindHistoryAndExaminationGrid();
                    gvHistory.DataBind();
                    // gvHistory.Visible = false;
                }
                dvFilterHistory.Dispose();
                dvFilterHistory = new DataView(ds.Tables[9].Copy());
                if (ds.Tables[9].Rows.Count > 0)
                    dvFilterHistory.RowFilter = "TemplateCode='HIS' AND IsFreeTextTemplate=1"; //PHIS
                if (dvFilterHistory.ToTable().Rows.Count > 0)
                {
                    txtPHistory.Text = common.clearHTMLTags(dvFilterHistory.ToTable().Rows[0]["TemplateName"].ToString().Replace(System.Environment.NewLine, "<br/>"));
                    txtPHistory.Height = 100;
                    // divPastHistory.Visible = true;
                    //lblPastHistory.Text = common.clearHTMLTags(dvFilterHistory.ToTable().Rows[0]["TemplateName"].ToString().Replace(System.Environment.NewLine, "<br/>"));bhakti

                    hdnPRecordId.Value = dvFilterHistory.ToTable().Rows[0]["recordId"].ToString();
                    //gvPHistory.DataSource = dvFilterHistory.ToTable();
                    //gvPHistory.DataBind();
                }
                else
                {
                    //gvPHistory.DataSource = BindHistoryAndExaminationGrid();
                    //gvPHistory.DataBind();
                }
                dvFilterHistory.Dispose();
                dvPreviousTreatment = new DataView(ds.Tables[9].Copy());
                if (ds.Tables[9].Rows.Count > 0)
                    dvPreviousTreatment.RowFilter = "TemplateCode='PT' AND IsFreeTextTemplate=1";
                if (dvPreviousTreatment.ToTable().Rows.Count > 0)
                {
                    gvPrevTreatment.DataSource = dvPreviousTreatment.ToTable();
                    gvPrevTreatment.DataBind();
                }
                else
                {
                    gvPrevTreatment.DataSource = BindHistoryAndExaminationGrid();
                    gvPrevTreatment.DataBind();
                }
                dvPreviousTreatment.Dispose();
                dvCostAnalysis = new DataView(ds.Tables[9].Copy());
                if (ds.Tables[9].Rows.Count > 0)
                    dvCostAnalysis.RowFilter = "TemplateCode='CA' AND IsFreeTextTemplate=1";
                if (dvCostAnalysis.ToTable().Rows.Count > 0)
                {
                    gvCostAnalysis.DataSource = dvCostAnalysis.ToTable();
                    gvCostAnalysis.DataBind();
                }
                else
                {
                    gvCostAnalysis.DataSource = BindHistoryAndExaminationGrid();
                    gvCostAnalysis.DataBind();
                }
                dvCostAnalysis.Dispose();
                dvFilterExamination = new DataView(ds.Tables[9].Copy());
                if (ds.Tables[9].Rows.Count > 0)
                    dvFilterExamination.RowFilter = "TemplateCode='EXM' AND IsFreeTextTemplate=1";
                if (dvFilterExamination.ToTable().Rows.Count > 0)
                {
                    // editorChiefComplaints.Text = common.clearHTMLTags(ds.Tables[0].Rows[0]["ProblemDescription"].ToString());
                    txtWExamination.Text = common.clearHTMLTags(dvFilterExamination.ToTable().Rows[0]["TemplateName"].ToString().Replace("<br/>", System.Environment.NewLine));
                    txtWExamination.Height = 100;
                    hdnWEmRecordId.Value = dvFilterExamination.ToTable().Rows[0]["recordId"].ToString();
                    gvExamination.DataSource = dvFilterExamination.ToTable();
                    gvExamination.DataBind();
                    lblExamination.Text = common.clearHTMLTags(dvFilterExamination.ToTable().Rows[0]["TemplateName"].ToString().Replace("<br/>", System.Environment.NewLine));
                    divExamination.Visible = true;
                }
                else
                {
                    gvExamination.DataSource = BindHistoryAndExaminationGrid();
                    //txtWExamination.Height = 100;//bhakti
                    gvExamination.DataBind();
                }
                dvFilterExamination.Dispose();
                dvFilterNutritional = new DataView(ds.Tables[9].Copy());
                if (ds.Tables[9].Rows.Count > 0)
                    dvFilterNutritional.RowFilter = "TemplateCode='NS' AND IsFreeTextTemplate=1";
                if (dvFilterNutritional.ToTable().Rows.Count > 0)
                {
                    gvNutritional.DataSource = dvFilterNutritional.ToTable();
                    gvNutritional.DataBind();
                }
                else
                {
                    gvNutritional.DataSource = BindHistoryAndExaminationGrid();
                    gvNutritional.DataBind();
                }
                dvFilterNutritional.Dispose();
                dvFilterPlanOfCare = new DataView(ds.Tables[9].Copy());
                if (ds.Tables[9].Rows.Count > 0)
                    dvFilterPlanOfCare.RowFilter = "TemplateCode='POC' AND IsFreeTextTemplate=1";
                if (dvFilterPlanOfCare.ToTable().Rows.Count > 0)
                {
                    //gvNutritional.DataSource = dvFilterNutritional.ToTable();
                    //gvNutritional.DataBind();
                    txtWPlanOfCare.Text = common.clearHTMLTags(dvFilterPlanOfCare.ToTable().Rows[0]["TemplateName"].ToString().Replace("<br/>", System.Environment.NewLine));
                    txtWPlanOfCare.Height = 100;
                    hdnWPlanRecordId.Value = dvFilterPlanOfCare.ToTable().Rows[0]["recordId"].ToString();
                    gvPlanOfCare.DataSource = dvFilterPlanOfCare.ToTable();
                    gvPlanOfCare.DataBind();
                    lblPlanofcare.Text = common.clearHTMLTags(dvFilterPlanOfCare.ToTable().Rows[0]["TemplateName"].ToString().Replace("<br/>", System.Environment.NewLine));
                    divplanofcare.Visible = true;
                }
                else
                {
                    gvPlanOfCare.DataSource = BindHistoryAndExaminationGrid();
                    gvPlanOfCare.DataBind();
                }
                dvFilterPlanOfCare.Dispose();
                #region Follow Up
                dvFilterFollowUp = new DataView(ds.Tables[9].Copy());
                if (ds.Tables[9].Rows.Count > 0)
                    dvFilterFollowUp.RowFilter = "TemplateCode='UP' AND IsFreeTextTemplate=1";
                if (dvFilterFollowUp.ToTable().Rows.Count > 0)
                {
                    //gvNutritional.DataSource = dvFilterNutritional.ToTable();
                    //gvNutritional.DataBind();
                    txtFollowup.Text = common.clearHTMLTags(dvFilterFollowUp.ToTable().Rows[0]["TemplateName"].ToString().Replace("<br/>", System.Environment.NewLine));
                    txtFollowup.Height = 100;
                    hdnFollowup.Value = dvFilterFollowUp.ToTable().Rows[0]["recordId"].ToString();

                    // lblFollowup.Text = common.clearHTMLTags(dvFilterFollowUp.ToTable().Rows[0]["TemplateName"].ToString().Replace("<br/>", System.Environment.NewLine));

                }
                else
                {
                    //gvPlanOfCare.DataSource = BindHistoryAndExaminationGrid();
                    //gvPlanOfCare.DataBind();
                }
                dvFilterFollowUp.Dispose();
                #endregion
                #region Remarks
                dvFilterRemarks = new DataView(ds.Tables[9].Copy());
                if (ds.Tables[9].Rows.Count > 0)
                    dvFilterRemarks.RowFilter = "TemplateCode='IN' AND IsFreeTextTemplate=1";
                if (dvFilterRemarks.ToTable().Rows.Count > 0)
                {
                    //gvNutritional.DataSource = dvFilterNutritional.ToTable();
                    //gvNutritional.DataBind();
                    txtRemarks.Text = common.clearHTMLTags(dvFilterRemarks.ToTable().Rows[0]["TemplateName"].ToString().Replace("<br/>", System.Environment.NewLine));
                    txtRemarks.Height = 100;
                    hdntxtRemarksId.Value = dvFilterRemarks.ToTable().Rows[0]["recordId"].ToString();

                    // lblFollowup.Text = common.clearHTMLTags(dvFilterFollowUp.ToTable().Rows[0]["TemplateName"].ToString().Replace("<br/>", System.Environment.NewLine));

                }
                else
                {
                    //gvPlanOfCare.DataSource = BindHistoryAndExaminationGrid();
                    //gvPlanOfCare.DataBind();
                }
                dvFilterRemarks.Dispose();
                #endregion
                #region Ritika (12-09-2022) FreeText   
                dvFilterFreeText = new DataView(ds.Tables[9].Copy());
                if (ds.Tables[9].Rows.Count > 0)
                    dvFilterFreeText.RowFilter = "TemplateCode='MDFT' AND IsFreeTextTemplate=1";
                if (dvFilterFreeText.ToTable().Rows.Count > 0)
                {
                    txtFreeText.Text = common.clearHTMLTags(dvFilterFreeText.ToTable().Rows[0]["TemplateName"].ToString().Replace("<br/>", System.Environment.NewLine));
                    txtFreeText.Height = 100;
                    hdnFreeTextID.Value = dvFilterFreeText.ToTable().Rows[0]["recordId"].ToString();

                }
                else
                {

                }
                dvFilterFreeText.Dispose();
                #endregion
                dvFilterOtherNotes = new DataView(ds.Tables[9].Copy());
                if (ds.Tables[9].Rows.Count > 0)
                    dvFilterOtherNotes.RowFilter = "(TemplateCode<>'CA' AND TemplateCode<>'PT' AND TemplateCode<>'NS' AND TemplateCode<>'POC' AND IsFreeTextTemplate=0) OR ISNULL(TemplateCode,'')=''";
                if (dvFilterOtherNotes.ToTable().Rows.Count > 0)
                {
                    gvOtherNotes.DataSource = dvFilterOtherNotes.ToTable();
                    gvOtherNotes.DataBind();
                    //added by bhakti
                    divCareTemplate.Visible = true;
                    GridViewCareTemplates.DataSource = dvFilterOtherNotes.ToTable();
                    GridViewCareTemplates.DataBind();

                }
                else
                {
                    gvOtherNotes.DataSource = BindHistoryAndExaminationGrid();
                    gvOtherNotes.DataBind();
                }
                dvFilterOtherNotes.Dispose();
            }
            else
            {
                if ((sTemplateName.Equals("Chief Complaints") && sTemplateType.Equals("S")))
                {
                    //palendra
                    if (ds.Tables[0].Rows.Count.Equals(0))
                    {
                        //DataRow dr = ds.Tables[0].NewRow();
                        //ds.Tables[0].Rows.Add(dr);
                        //gvProblemDetails.DataSource = ds.Tables[0];
                        //gvProblemDetails.DataBind();
                        gvProblemDetails.DataSource = null;
                        gvProblemDetails.DataBind();
                        //dr = null;
                        editorChiefComplaints.Text = "";


                    }
                    else
                    {
                        gvProblemDetails.DataSource = ds.Tables[0];
                        gvProblemDetails.DataBind();
                        editorChiefComplaints.Text = common.clearHTMLTags(ds.Tables[0].Rows[0]["ProblemDescription"].ToString());
                        hdnProblemId.Value = ds.Tables[0].Rows[0]["Id"].ToString();
                    }
                }
                if ((sTemplateName.Equals("Chief Complaints") && sTemplateType.Equals("S")))
                {
                    if (ds.Tables[0].Rows.Count.Equals(0))
                    {
                        //DataRow dr = ds.Tables[0].NewRow();
                        //ds.Tables[0].Rows.Add(dr);
                        //gvProblemDetails.DataSource = ds.Tables[0];
                        //gvProblemDetails.DataBind();
                        //dr = null;
                        editorChiefComplaints.Text = "";


                    }
                    else
                    {
                        //gvProblemDetails.DataSource = ds.Tables[0];
                        //gvProblemDetails.DataBind();
                        editorChiefComplaints.Text = common.clearHTMLTags(ds.Tables[0].Rows[0]["ProblemDescription"].ToString());
                        hdnProblemId.Value = ds.Tables[0].Rows[0]["Id"].ToString();
                    }
                }
                if ((sTemplateName.Equals("Allergies") && sTemplateType.Equals("S")))
                {
                    bindAllergies(ds);
                }
                if ((sTemplateName.Equals("Provisional Diagnosis") && sTemplateType.Equals("S")))
                {

                    if (ds.Tables[3].Rows.Count.Equals(0))
                    {

                        DataTable dt = new DataTable();
                        DataColumn dC;
                        dC = new DataColumn("ProvisionalDiagnosis", typeof(string));
                        dC.AllowDBNull = true;
                        dt.Columns.Add(dC);
                        dC = new DataColumn("EncodedDate", typeof(string));
                        dC.AllowDBNull = true;
                        dt.Columns.Add(dC);

                        //dC = new DataColumn("LabStatus", typeof(string));
                        //dC.AllowDBNull = true;
                        //dt.Columns.Add(dC);

                        DataRow dr = dt.NewRow();
                        dt.Rows.Add(dr);
                        dt.AcceptChanges();
                        gvData.DataSource = dt;
                        gvData.DataBind();
                        populatePager(rptPageProvisionalDiagnosis, 0, PageNo, pageSize);
                        dr = null;
                    }
                    else
                    {
                        gvData.DataSource = ds.Tables[3];
                        gvData.DataBind();
                        populatePager(rptPageProvisionalDiagnosis, common.myInt(ds.Tables[3].Rows[0]["TotalRecordsCount"]), PageNo, pageSize);
                    }
                    //if (ds.Tables[3].Rows.Count.Equals(0))
                    //{
                    //    //DataRow dr = ds.Tables[3].NewRow();
                    //    //ds.Tables[3].Rows.Add(dr);
                    //    //gvData.DataSource = ds.Tables[3];
                    //    //gvData.DataBind();
                    //    //dr = null;
                    //    //DataTable dt = new DataTable();
                    //    //DataColumn dC;
                    //    //dC = new DataColumn("ProvisionalDiagnosis", typeof(string));
                    //    //dC.AllowDBNull = true;
                    //    //dt.Columns.Add(dC);
                    //    //dC = new DataColumn("Id", typeof(string));
                    //    //dC.AllowDBNull = true;
                    //    //dt.Columns.Add(dC);

                    //    //dC = new DataColumn("SearchKeyWordId", typeof(string));
                    //    //dC.AllowDBNull = true;
                    //    //dt.Columns.Add(dC);
                    //    //dC = new DataColumn("EncodedById", typeof(string));
                    //    //dC.AllowDBNull = true;
                    //    //dt.Columns.Add(dC);

                    //    //dC = new DataColumn("EncodedDate", typeof(string));
                    //    //dC.AllowDBNull = true;
                    //    //dt.Columns.Add(dC);
                    //    //dC = new DataColumn("EncodedBy", typeof(string));
                    //    //dC.AllowDBNull = true;
                    //    //dt.Columns.Add(dC);
                    //    //DataRow dr = dt.NewRow();
                    //    //dt.Rows.Add(dr);
                    //    //dt.AcceptChanges();
                    //    gvData.DataSource = null;
                    //    gvData.DataBind();
                    //}
                    //else
                    //{
                    //    gvData.DataSource = ds.Tables[3];
                    //    gvData.DataBind();
                    //}
                }
                if ((sTemplateName.Equals("Orders And Procedures") && sTemplateType.Equals("S")))
                {
                    if (ds.Tables[4].Rows.Count.Equals(0))
                    {

                        DataTable dt = new DataTable();
                        DataColumn dC;
                        dC = new DataColumn("OrderDate", typeof(string));
                        dC.AllowDBNull = true;
                        dt.Columns.Add(dC);
                        dC = new DataColumn("ServiceName", typeof(string));
                        dC.AllowDBNull = true;
                        dt.Columns.Add(dC);

                        dC = new DataColumn("LabStatus", typeof(string));
                        dC.AllowDBNull = true;
                        dt.Columns.Add(dC);

                        //palendra change
                        dC = new DataColumn("ServiceID", typeof(string));
                        dC.AllowDBNull = true;
                        dt.Columns.Add(dC);

                        dC = new DataColumn("Stat", typeof(string));
                        dC.AllowDBNull = true;
                        dt.Columns.Add(dC);

                        DataRow dr = dt.NewRow();
                        dt.Rows.Add(dr);
                        dt.AcceptChanges();
                        gvOrdersAndProcedures.DataSource = dt;
                        gvOrdersAndProcedures.DataBind();
                        populatePager(rptPagerOrdersAndProcedures, 0, PageNo, pageSize);
                        dr = null;
                    }
                    else
                    {
                        gvOrdersAndProcedures.DataSource = ds.Tables[4];
                        gvOrdersAndProcedures.DataBind();
                        populatePager(rptPagerOrdersAndProcedures, common.myInt(ds.Tables[4].Rows[0]["TotalRecordsCount"]), PageNo, pageSize);
                    }
                }
                if ((sTemplateName.Equals("Prescription") && sTemplateType.Equals("S")))
                {
                    if (ds.Tables[5].Rows.Count.Equals(0))
                    {
                        DataTable dt = new DataTable();
                        DataColumn dC;
                        dC = new DataColumn("StartDate", typeof(string));
                        dC.AllowDBNull = true;
                        dt.Columns.Add(dC);
                        dC = new DataColumn("ItemName", typeof(string));
                        dC.AllowDBNull = true;
                        dt.Columns.Add(dC);

                        dC = new DataColumn("ItemId", typeof(string));
                        dC.AllowDBNull = true;
                        dt.Columns.Add(dC);

                        dC = new DataColumn("IndentId", typeof(string));
                        dC.AllowDBNull = true;
                        dt.Columns.Add(dC);

                        dC = new DataColumn("StoreName", typeof(string));
                        dC.AllowDBNull = true;
                        dt.Columns.Add(dC);

                        dC = new DataColumn("GenericName", typeof(string));
                        dC.AllowDBNull = true;
                        dt.Columns.Add(dC);

                        dC = new DataColumn("PrescriptionDetail", typeof(string));
                        dC.AllowDBNull = true;
                        dt.Columns.Add(dC);

                        DataRow dr = dt.NewRow();
                        dt.Rows.Add(dr);
                        dt.AcceptChanges();

                        gvPrescriptions.DataSource = dt;
                        gvPrescriptions.DataBind();
                        populatePager(rptPagerPrescriptions, 0, PageNo, pageSize);
                        dr = null;
                    }
                    else
                    {
                        ViewState["GridDataDetail"] = ds.Tables[6];
                        gvPrescriptions.DataSource = ds.Tables[5];
                        gvPrescriptions.DataBind();



                        populatePager(rptPagerPrescriptions, common.myInt(ds.Tables[5].Rows[0]["TotalRecordsCount"]), PageNo, pageSize);
                    }
                }
                if ((sTemplateName.Equals("Vitals") && sTemplateType.Equals("S")))
                {
                    if (ds.Tables[7].Rows.Count.Equals(0))
                    {
                        //DataRow dr = ds.Tables[7].NewRow();
                        //ds.Tables[7].Rows.Add(dr);
                        //gvVitals.DataSource = ds.Tables[7];
                        //gvVitals.DataBind();
                        //populatePager(rptPagerVitals, 0, PageNo, pageSize);
                        //dr = null;

                        DataTable dt = new DataTable();
                        dt.Columns.Add("HT");
                        dt.Columns.Add("WT");
                        dt.Columns.Add("HC");
                        dt.Columns.Add("T");
                        dt.Columns.Add("R");
                        dt.Columns.Add("P");
                        dt.Columns.Add("BPS");
                        dt.Columns.Add("BPD");
                        dt.Columns.Add("MAC");
                        dt.Columns.Add("SPO2");
                        dt.Columns.Add("BMI");
                        dt.Columns.Add("BSA");
                        DataRow dr = dt.NewRow();
                        dr["HT"] = "";
                        dr["WT"] = "";
                        dr["HC"] = "";
                        dr["T"] = "";
                        dr["R"] = "";
                        dr["P"] = "";
                        dr["BPS"] = "";
                        dr["BPD"] = "";
                        dr["MAC"] = "";
                        dr["SPO2"] = "";
                        dr["BMI"] = "";
                        dr["BSA"] = "";
                        dt.Rows.Add(dr);
                        dt.AcceptChanges();

                        DataRow DR = dt.NewRow();
                        txtHeight.Text = common.myStr(DR["HT"]);
                        TxtWeight.Text = common.myStr(DR["WT"]);
                        txtHC.Text = common.myStr(DR["HC"]);
                        TxtTemperature.Text = common.myStr(DR["T"]);
                        txtRespiration.Text = common.myStr(DR["R"]);
                        txtPulse.Text = common.myStr(DR["P"]);
                        txtBPSystolic.Text = common.myStr(DR["BPS"]);
                        txtBPDiastolic.Text = common.myStr(DR["BPD"]);
                        txtMAC.Text = common.myStr(DR["MAC"]);
                        txtSpO2.Text = common.myStr(DR["SPO2"]);
                        txtBMI.Text = common.myStr(DR["BMI"]);
                        hdnBMIValue.Value = common.myStr(DR["BMI"]);
                        txtBSA.Text = common.myStr(DR["BSA"]);
                        hdnBSAValue.Value = common.myStr(DR["BSA"]);

                        //added by bhakti 
                        txtHeight.ReadOnly = false;
                        TxtWeight.ReadOnly = false;
                        txtHC.ReadOnly = false;
                        TxtTemperature.ReadOnly = false;
                        txtRespiration.ReadOnly = false;
                        txtPulse.ReadOnly = false;
                        txtBPSystolic.ReadOnly = false;
                        txtBPDiastolic.ReadOnly = false;
                        txtSpO2.ReadOnly = false;
                        txtMAC.ReadOnly = false;
                    }
                    else
                    {
                        DataRow DR = ds.Tables[7].Rows[0];
                        txtHeight.Text = common.myStr(DR["HT"]);
                        TxtWeight.Text = common.myStr(DR["WT"]);
                        txtHC.Text = common.myStr(DR["HC"]);
                        TxtTemperature.Text = common.myStr(DR["T"]);
                        txtRespiration.Text = common.myStr(DR["R"]);
                        txtPulse.Text = common.myStr(DR["P"]);
                        txtBPSystolic.Text = common.myStr(DR["BPS"]);
                        txtBPDiastolic.Text = common.myStr(DR["BPD"]);
                        txtMAC.Text = common.myStr(DR["MAC"]);
                        txtSpO2.Text = common.myStr(DR["SPO2"]);
                        txtBMI.Text = common.myStr(DR["BMI"]);
                        hdnBMIValue.Value = common.myStr(DR["BMI"]);
                        txtBSA.Text = common.myStr(DR["BSA"]);
                        hdnBSAValue.Value = common.myStr(DR["BSA"]);
                        //gvVitals.DataSource = ds.Tables[7];
                        //gvVitals.DataBind();
                        //populatePager(rptPagerVitals, common.myInt(ds.Tables[7].Rows[0]["TotalRecordsCount"]), PageNo, pageSize);

                        txtHeight.ReadOnly = true;
                        TxtWeight.ReadOnly = true;
                        txtHC.ReadOnly = true;
                        TxtTemperature.ReadOnly = true;
                        txtRespiration.ReadOnly = true;
                        txtPulse.ReadOnly = true;
                        txtBPSystolic.ReadOnly = true;
                        txtBPDiastolic.ReadOnly = true;
                        txtSpO2.ReadOnly = true;
                        txtMAC.ReadOnly = true;
                        txtBMI.ReadOnly = true;
                        txtBSA.ReadOnly = true;
                    }
                }
                if (sTemplateName.Equals("Non Drug Order") && sTemplateType.Equals("S"))
                {
                    if (ds.Tables[8].Rows.Count.Equals(0))
                    {
                        //DataRow dr = ds.Tables[8].NewRow();
                        //ds.Tables[8].Rows.Add(dr);
                        //gvNonDrugOrder.DataSource = ds.Tables[8];
                        //gvNonDrugOrder.DataBind();
                        //dr = null;
                    }
                    else
                    {
                        gvNonDrugOrder.DataSource = ds.Tables[8];
                        gvNonDrugOrder.DataBind();
                    }
                }
                if (sTemplateName.Equals(string.Empty) && sTemplateType.Equals("D") && sTemplateCode.Equals("HIS"))
                {
                    dvFilterHistory = new DataView(ds.Tables[9].Copy());
                    if (ds.Tables[9].Rows.Count > 0)
                        dvFilterHistory.RowFilter = "TemplateCode='" + sTemplateCode + "' AND IsFreeTextTemplate=1";
                    if (dvFilterHistory.ToTable().Rows.Count > 0)
                    {
                        //gvHistory.DataSource = dvFilterHistory.ToTable();
                        //gvHistory.DataBind();
                        txtWHistory.Text = common.clearHTMLTags(dvFilterHistory.ToTable().Rows[0]["TemplateName"]);
                        txtWHistory.Height = 100;
                        hdnWRecordId.Value = dvFilterHistory.ToTable().Rows[0]["recordId"].ToString();
                    }
                    else
                    {
                        //gvHistory.DataSource = BindHistoryAndExaminationGrid();
                        //gvHistory.DataBind();
                    }
                    dvFilterHistory.Dispose();
                }
                if (sTemplateName.Equals(string.Empty) && sTemplateType.Equals("D") && sTemplateCode.Equals("HIS")) //PHIS
                {
                    dvFilterHistory = new DataView(ds.Tables[9].Copy());
                    if (ds.Tables[9].Rows.Count > 0)
                        dvFilterHistory.RowFilter = "TemplateCode='" + sTemplateCode + "' AND IsFreeTextTemplate=1";
                    if (dvFilterHistory.ToTable().Rows.Count > 0)
                    {
                        gvPHistory.DataSource = dvFilterHistory.ToTable();
                        gvPHistory.DataBind();
                    }
                    else
                    {
                        gvPHistory.DataSource = BindHistoryAndExaminationGrid();
                        gvPHistory.DataBind();
                    }
                    dvFilterHistory.Dispose();
                }
                if (sTemplateName.Equals(string.Empty) && sTemplateType.Equals("D") && sTemplateCode.Equals("PT"))
                {
                    dvFilterPreTreatment = new DataView(ds.Tables[9].Copy());
                    if (ds.Tables[9].Rows.Count > 0)
                        dvFilterPreTreatment.RowFilter = "TemplateCode='" + sTemplateCode + "' AND IsFreeTextTemplate=1";
                    if (dvFilterPreTreatment.ToTable().Rows.Count > 0)
                    {
                        gvPrevTreatment.DataSource = dvFilterPreTreatment.ToTable();
                        gvPrevTreatment.DataBind();
                    }
                    else
                    {
                        gvPrevTreatment.DataSource = BindHistoryAndExaminationGrid();
                        gvPrevTreatment.DataBind();
                    }
                    dvFilterPreTreatment.Dispose();
                }
                if (sTemplateName.Equals(string.Empty) && sTemplateType.Equals("D") && sTemplateCode.Equals("CA"))
                {
                    dvFiltergvCostAnalysis = new DataView(ds.Tables[9].Copy());
                    if (ds.Tables[9].Rows.Count > 0)
                        dvFiltergvCostAnalysis.RowFilter = "TemplateCode='" + sTemplateCode + "' AND IsFreeTextTemplate=1";
                    if (dvFiltergvCostAnalysis.ToTable().Rows.Count > 0)
                    {
                        gvCostAnalysis.DataSource = dvFiltergvCostAnalysis.ToTable();
                        gvCostAnalysis.DataBind();
                    }
                    else
                    {
                        gvCostAnalysis.DataSource = BindHistoryAndExaminationGrid();
                        gvCostAnalysis.DataBind();
                    }
                    dvFiltergvCostAnalysis.Dispose();
                }
                if (sTemplateName.Equals(string.Empty) && sTemplateType.Equals("D") && sTemplateCode.Equals("EXM"))
                {
                    dvFilterExamination = new DataView(ds.Tables[9].Copy());
                    if (ds.Tables[9].Rows.Count > 0)
                        dvFilterExamination.RowFilter = "TemplateCode='" + sTemplateCode + "' AND IsFreeTextTemplate=1";
                    if (dvFilterExamination.ToTable().Rows.Count > 0)
                    {
                        gvExamination.DataSource = dvFilterExamination.ToTable();
                        gvExamination.DataBind();
                    }
                    else
                    {
                        gvExamination.DataSource = BindHistoryAndExaminationGrid();
                        gvExamination.DataBind();
                    }
                    dvFilterExamination.Dispose();
                }
                if (sTemplateName.Equals(string.Empty) && sTemplateType.Equals("D") && sTemplateCode.Equals("NS"))
                {
                    dvFilterNutritional = new DataView(ds.Tables[9].Copy());
                    if (ds.Tables[9].Rows.Count > 0)
                        dvFilterNutritional.RowFilter = "TemplateCode='" + sTemplateCode + "' AND IsFreeTextTemplate=1";
                    if (dvFilterNutritional.ToTable().Rows.Count > 0)
                    {
                        gvNutritional.DataSource = dvFilterNutritional.ToTable();
                        gvNutritional.DataBind();
                    }
                    else
                    {
                        gvNutritional.DataSource = BindHistoryAndExaminationGrid();
                        gvNutritional.DataBind();
                    }
                    dvFilterNutritional.Dispose();
                }
                if (sTemplateName.Equals(string.Empty) && sTemplateType.Equals("D") && sTemplateCode.Equals("POC"))
                {
                    dvFilterPlanOfCare = new DataView(ds.Tables[9].Copy());
                    if (ds.Tables[9].Rows.Count > 0)
                        dvFilterPlanOfCare.RowFilter = "TemplateCode='" + sTemplateCode + "' AND IsFreeTextTemplate=1";
                    if (dvFilterPlanOfCare.ToTable().Rows.Count > 0)
                    {
                        txtWPlanOfCare.Text = common.clearHTMLTags(dvFilterPlanOfCare.ToTable().Rows[0]["TemplateName"]);
                        Session["PlanRecordId"] = dvFilterPlanOfCare.ToTable().Rows[0]["PlanRecordId"];

                        gvPlanOfCare.DataSource = dvFilterPlanOfCare.ToTable();
                        gvPlanOfCare.DataBind();
                    }
                    else
                    {
                        gvPlanOfCare.DataSource = BindHistoryAndExaminationGrid();
                        gvPlanOfCare.DataBind();
                    }
                    dvFilterPlanOfCare.Dispose();
                }
                if (ds.Tables[9] != null && sTemplateType.Equals("D"))
                {
                    dvFilterOtherNotes = new DataView(ds.Tables[9].Copy());
                    if (ds.Tables[9].Rows.Count > 0)
                        dvFilterOtherNotes.RowFilter = "(TemplateCode<>'CA' AND TemplateCode<>'PT' AND TemplateCode<>'NS' AND TemplateCode<>'POC' AND IsFreeTextTemplate=0) OR ISNULL(TemplateCode,'')=''";
                    if (dvFilterOtherNotes.ToTable().Rows.Count > 0)
                    {
                        gvOtherNotes.DataSource = dvFilterOtherNotes.ToTable();
                        gvOtherNotes.DataBind();
                        divCareTemplate.Visible = true;
                        GridViewCareTemplates.DataSource = ds.Tables[9];
                        GridViewCareTemplates.DataBind();
                    }
                    else
                    {
                        gvOtherNotes.DataSource = BindHistoryAndExaminationGrid();
                        gvOtherNotes.DataBind();
                    }
                    dvFilterOtherNotes.Dispose();
                }
            }
            if (ds.Tables[11].Rows.Count.Equals(0))
            {
                //DataTable dt = new DataTable();
                //DataColumn dC;
                //dC = new DataColumn("ICDCode", typeof(string));
                //dC.AllowDBNull = true;
                //dt.Columns.Add(dC);
                //dC = new DataColumn("ICDDescription", typeof(string));
                //dC.AllowDBNull = true;
                //dt.Columns.Add(dC);

                //dC = new DataColumn("PrimaryDiagnosis", typeof(string));
                //dC.AllowDBNull = true;
                //dt.Columns.Add(dC);
                //dC = new DataColumn("Id", typeof(string));
                //dC.AllowDBNull = true;
                //dt.Columns.Add(dC);

                //DataRow dr = dt.NewRow();
                //dt.Rows.Add(dr);
                //dt.AcceptChanges();

                //gvDiagnosisDetails.DataSource = dt;
                //gvDiagnosisDetails.DataBind();
                //populatePager(rptPagerPrescriptions, 0, PageNo, pageSize);
                //dr = null;

                if (sTemplateType.Equals(string.Empty))
                {
                    BindBlankDiagnosisDetailGrid();
                }
            }
            else
            {
                //gvDiagnosisDetails.DataSource = ds.Tables[10];
                //gvDiagnosisDetails.DataBind();
                //if (ds.Tables[10] != null)
                //{
                //    if (ds.Tables[10].Rows.Count.Equals(0))
                //    {
                //        DataRow dr = ds.Tables[10].NewRow();
                //        ds.Tables[10].Rows.Add(dr);
                //        ds.AcceptChanges();
                //    }
                //    gvDiagnosisDetails.DataSource = ds.Tables[10];
                //    gvDiagnosisDetails.DataBind();
                //}
                RetrievePatientDiagnosis();
            }

            if (ds.Tables.Count > 17)
            {
                for (int rowIdx = 0; rowIdx < ds.Tables[18].Rows.Count; rowIdx++)
                {
                    DataRow DR = ds.Tables[18].Rows[rowIdx];
                    switch (common.myStr(DR["TemplateCode"]))
                    {
                        case "TG":
                            TGTemplateId = common.myInt(DR["TemplateId"]);
                            TGSectionId = common.myInt(DR["SectionId"]);
                            TGFieldId = common.myInt(DR["FieldId"]);
                            break;
                        case "IN":
                            INTemplateId = common.myInt(DR["TemplateId"]);
                            INSectionId = common.myInt(DR["SectionId"]);
                            INFieldId = common.myInt(DR["FieldId"]);
                            break;
                        case "UP":
                            UPTemplateId = common.myInt(DR["TemplateId"]);
                            UPSectionId = common.myInt(DR["SectionId"]);
                            UPFieldId = common.myInt(DR["FieldId"]);
                            break;
                        case "POC":
                            POCTemplateId = common.myInt(DR["TemplateId"]);
                            POCSectionId = common.myInt(DR["SectionId"]);
                            POCFieldId = common.myInt(DR["FieldId"]);
                            break;
                        case "HIS":
                            HISTemplateId = common.myInt(DR["TemplateId"]);
                            HISSectionId = common.myInt(DR["SectionId"]);
                            HISFieldId = common.myInt(DR["FieldId"]);
                            break;
                        case "EXM":
                            EXMTemplateId = common.myInt(DR["TemplateId"]);
                            EXMSectionId = common.myInt(DR["SectionId"]);
                            EXMFieldId = common.myInt(DR["FieldId"]);
                            break;
                        case "PT":
                            PTTemplateId = common.myInt(DR["TemplateId"]);
                            PTSectionId = common.myInt(DR["SectionId"]);
                            PTFieldId = common.myInt(DR["FieldId"]);
                            break;
                        case "CA":
                            CATemplateId = common.myInt(DR["TemplateId"]);
                            CASectionId = common.myInt(DR["SectionId"]);
                            CAFieldId = common.myInt(DR["FieldId"]);
                            break;
                        case "NS":
                            NSTemplateId = common.myInt(DR["TemplateId"]);
                            NSSectionId = common.myInt(DR["SectionId"]);
                            NSFieldId = common.myInt(DR["FieldId"]);
                            break;
                        case "LAB":
                            LABTemplateId = common.myInt(DR["TemplateId"]);
                            LABSectionId = common.myInt(DR["SectionId"]);
                            LABFieldId = common.myInt(DR["FieldId"]);
                            break;
                        case "MDFT":  //Ritika(12-09-2022) Freetext
                            FTTemplateId = common.myInt(DR["TemplateId"]);
                            FTSectionId = common.myInt(DR["SectionId"]);
                            FTFieldId = common.myInt(DR["FieldId"]);
                            break;
                    }
                }
            }

            GetgvbindemrotRequest(common.myInt(Session["RegistrationNo"]));
            SetChifComplaint();
        }
        catch (Exception Ex)
        {
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            ds.Dispose();
            dvFilterHistory.Dispose();
            dvPreviousTreatment.Dispose();
            dvCostAnalysis.Dispose();
            dvFilterExamination.Dispose();
            dvFilterNutritional.Dispose();
            dvFilterPlanOfCare.Dispose();
            dvFilterOtherNotes.Dispose();
            dvFilterPreTreatment.Dispose();
            dvFiltergvCostAnalysis.Dispose();
            //objEMR = null;
        }
    }
    private DataTable BindHistoryAndExaminationGrid()
    {
        DataTable dt = new DataTable();
        dt.Columns.Add("TemplateName");
        dt.Columns.Add("RecordId");
        dt.Columns.Add("DocDate");
        dt.Columns.Add("EncodedBy");
        dt.Columns.Add("TemplateId");
        dt.Columns.Add("TemplateType");
        dt.Columns.Add("EncodedById", System.Type.GetType("System.Int32"));
        DataRow dr = dt.NewRow();
        dr["TemplateName"] = string.Empty;
        dr["RecordId"] = string.Empty;
        dr["DocDate"] = string.Empty;
        dr["EncodedBy"] = string.Empty;
        dr["TemplateId"] = string.Empty;
        dr["TemplateType"] = string.Empty;
        dt.Rows.Add(dr);
        return dt;
    }
    #endregion
    #region Chief Complaints
    protected void gvProblemDetails_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.Header || e.Row.RowType == DataControlRowType.DataRow || e.Row.RowState == DataControlRowState.Alternate)
        {
            e.Row.Cells[(byte)enumProblem.IsHPI].Visible = false;
        }
        if ((e.Row.RowType == DataControlRowType.DataRow) && (e.Row.RowState == DataControlRowState.Normal || e.Row.RowState == DataControlRowState.Edit)
            || (e.Row.RowType == DataControlRowType.DataRow) || (e.Row.RowState == DataControlRowState.Alternate))
        {
            try
            {
                HiddenField hdnProblemId = (HiddenField)e.Row.FindControl("hdnProblemId");
                ImageButton ibtnDelete = (ImageButton)e.Row.FindControl("ibtnDelete");
                HiddenField hdnProblem = (HiddenField)e.Row.FindControl("hdnProblem");
                HiddenField hdnEncodedById = (HiddenField)e.Row.FindControl("hdnEncodedById");
                LinkButton lnkEdit = (LinkButton)e.Row.Cells[(byte)enumProblem.Edit].Controls[0];
                if (common.myInt(hdnProblemId.Value).Equals(0))
                {
                    ibtnDelete.Enabled = false;
                }
                LinkButton lblHPI = (LinkButton)e.Row.FindControl("lblHPI");
                if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE") && !common.myBool(Session["isEMRSuperUser"]))
                {
                    ibtnDelete.Visible = false;
                }
                TextBox editorProblem = (TextBox)e.Row.FindControl("editorProblem");
                editorProblem.Enabled = !(e.Row.RowState.Equals(DataControlRowState.Normal) | e.Row.RowState.Equals(DataControlRowState.Alternate));
                editorProblem.Text = common.clearHTMLTags(hdnProblem.Value);
                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    if (!common.myInt(hdnEncodedById.Value).Equals(common.myInt(Session["UserId"])))
                    {
                        lnkEdit.Visible = false;
                        ibtnDelete.Visible = false;
                    }
                }
                setControlHeight(editorProblem, 80);
            }
            catch (Exception Ex)
            {
                clsExceptionLog objException = new clsExceptionLog();
                objException.HandleException(Ex);
                objException = null;
            }
        }
    }
    protected void gvProblemDetails_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            if (e.CommandName.Equals("Del"))
            {
                if (!common.myBool(ViewState["DeleteEnable"]))
                {
                    Alert.ShowAjaxMsg("You are not authorized to delete", Page);
                    return;
                }
                GridViewRow row = (GridViewRow)(((ImageButton)e.CommandSource).NamingContainer);
                int intId = common.myInt(((HiddenField)row.FindControl("hdnProblemId")).Value);
                ViewState["strId"] = intId;
                if (intId > 0)
                {
                    dvConfirmCancelOptions.Visible = true;
                }
            }
            if (e.CommandName.Equals("HPI") || e.CommandName.Equals("ISHPI"))
            {
                GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
                int intProblemId = common.myInt(((HiddenField)row.FindControl("hdnProblemId")).Value);
                if (intProblemId > 0)
                {
                    RadWindowForNew.NavigateUrl = "../Problems/hpi.aspx?Mpg=P98&PopUp=Yes&ProbId=" + intProblemId;
                    RadWindowForNew.Width = 1200;
                    RadWindowForNew.Height = 630;
                    RadWindowForNew.Top = 10;
                    RadWindowForNew.Left = 10;
                    RadWindowForNew.OnClientClose = "addHPIClose";
                    RadWindowForNew.Modal = true;
                    RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code    
                    RadWindowForNew.VisibleStatusbar = false;
                }
            }
            // Akshay Sharma
            if (gvProblemDetails.Rows.Count == 0)
            {
                editorChiefComplaints.Visible = false;
            }
            // Akshay Sharma
        }
        catch (Exception ex)
        {
            lblMessage.Text = ex.Message;
        }
    }
    protected void btnBindOrderPriscriptionPlaneOfCare_Click(object sender, EventArgs e)
    {
        try
        {
            BindCommonData("", "", string.Empty, 0, 1);
            //BindGridOrders();
            //bindPrescriptions();
        }
        catch (Exception ex)
        {
            clsExceptionLog objException = new clsExceptionLog();
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + ex.Message;
            objException.HandleException(ex);
        }
    }
    protected void btnTreatmentPlan_Click(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/ClinicalPathway/OPPatientTreatmentPlan.aspx?POPUP=POPUP&IsEMRPopUp=1";
            RadWindowForNew.Width = 650;
            RadWindowForNew.Height = 500;
            //RadWindowForNew.Top = 0;
            //RadWindowForNew.Left = 0;
            RadWindowForNew.OnClientClose = "btnBindOrderPriscriptionPlaneOfCare";
            RadWindowForNew.Title = "Treatment Plan";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void lnkAddChiefComplaints_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            //RadWindowForNew.NavigateUrl = "~/EMR/Problems/Default.aspx?IsEMRPopUp=1";
            //RadWindowForNew.Width = 650;
            //RadWindowForNew.Height = 500;
            ////RadWindowForNew.Top = 0;
            ////RadWindowForNew.Left = 0;
            //RadWindowForNew.OnClientClose = "addChiefComplaintsOnClientClose";
            //RadWindowForNew.Title = "Chief Complaint(s)";
            //RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            //RadWindowForNew.Modal = true;
            //RadWindowForNew.VisibleStatusbar = false;
            //RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Reload;


            RadWindowForNew.NavigateUrl = "~/EMR/Problems/ChifComplaint.aspx?IsEMRPopUp=1";
            RadWindowForNew.Width = 650;
            RadWindowForNew.Height = 500;
            //RadWindowForNew.Top = 0;
            //RadWindowForNew.Left = 0;
            RadWindowForNew.OnClientClose = "addChiefComplaintsOnClientClose";
            RadWindowForNew.Title = "Chief Complaint(s)";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Maximize;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnAddChiefComplaintsClose_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            RetrievePatientProblemsDetail();
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    private void RetrievePatientProblemsDetail()
    {
        BindCommonData("Chief Complaints", "S", string.Empty, 0, 1);
    }
    protected void ButtonOk_OnClick(object sender, EventArgs e)
    {
        //BaseC.EMRProblems objProb = new BaseC.EMRProblems(sConString);
        try
        {
            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/Canceltodayproblem";
            APIRootClass.Canceltodayproblem objRoot = new global::APIRootClass.Canceltodayproblem();
            objRoot.ProblemId = common.myInt(ViewState["strId"]);
            objRoot.RegistrationID = common.myInt(Session["RegistrationID"]);
            objRoot.Encounterid = common.myInt(Session["encounterid"]);
            objRoot.HospitalLocationID = common.myInt(Session["HospitalLocationID"]);
            objRoot.FacilityId = common.myInt(Session["FacilityID"]);
            objRoot.Pageid = common.myInt(ViewState["PageId"]);
            objRoot.UserId = common.myInt(Session["UserID"]);
            objRoot.Shownote = 0;

            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;

            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);


            //objProb.Canceltodayproblem(common.myInt(ViewState["strId"]), common.myInt(Session["RegistrationID"]), common.myInt(Session["encounterid"]), 
            //    common.myInt(Session["HospitalLocationID"]), common.myInt(Session["FacilityID"]), common.myInt(ViewState["PageId"]), 
            //    common.myInt(Session["UserID"]), common.myInt(0));
            RetrievePatientProblemsDetail();
            dvConfirmCancelOptions.Visible = false;

            hdnProblemId.Value = "0";
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            //objProb = null;
        }
    }
    protected void ButtonCancel_OnClick(object sender, EventArgs e)
    {
        dvConfirmCancelOptions.Visible = false;
    }
    protected void gvProblemDetails_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gvProblemDetails.PageIndex = e.NewPageIndex;
        RetrievePatientProblemsDetail();
    }

    protected void gvProblemDetails_OnRowCancelingEdit(Object sender, GridViewCancelEditEventArgs e)
    {
        gvProblemDetails.EditIndex = -1;
        BindCommonData("Chief Complaints", "S", string.Empty, 0, 1);
    }
    protected void gvProblemDetails_OnRowUpdating(Object sender, GridViewUpdateEventArgs e)
    {
        //BaseC.ParseData objParse = new BaseC.ParseData();
        ArrayList col = new ArrayList();
        StringBuilder objXMLProblem = new StringBuilder();
        //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);

        try
        {
            HiddenField hdnProblemId = (HiddenField)gvProblemDetails.Rows[e.RowIndex].FindControl("hdnProblemId");
            TextBox editorProblem = (TextBox)gvProblemDetails.Rows[e.RowIndex].FindControl("editorProblem");
            if (common.myInt(hdnProblemId.Value).Equals(0))
            {
                return;
            }
            txtedit.Text = common.myStr(hdnProblemId.Value);
            #region  Problem
            if (!common.myStr(editorProblem.Text).Equals(string.Empty))
            {
                string editID;
                if (!(common.myStr(txtedit.Text).Trim().Equals(string.Empty)))
                {
                    editID = common.myStr(txtedit.Text);
                }
                else
                {
                    editID = string.Empty;
                }
                string TemplateId = Request.QueryString["POPUP"] != null && common.myStr(Request.QueryString["POPUP"]).Equals("StaticTemplate") ? common.myStr(Request.QueryString["TemplateFieldId"]) : "0";
                string strProblem = common.ParseString(editorProblem.Text).Trim().Replace("\n", "<br/>");

                if (common.myLen(strProblem) > 2000)
                {
                    Alert.ShowAjaxMsg("Chief complaints (free text) length must be less than 2000 character!", this.Page);
                    return;
                }
                col.Add(editID);//Id               
                col.Add(0); // ProblemId
                col.Add(strProblem);//Problem
                col.Add(0);//DurationID
                col.Add(string.Empty);//Duration
                col.Add(0);//ContextID
                col.Add(string.Empty);//Context
                col.Add(0);//SeverityId
                col.Add(string.Empty);//Severity
                col.Add(0);//IsPrimary
                col.Add(0);//IsChronic
                col.Add(common.myStr(Session["DoctorID"]));//DoctorId
                col.Add(common.myStr(Session["FacilityId"]));//FacilityId
                col.Add(0);//SCTId
                col.Add(string.Empty);//QualityIDs
                col.Add(0);//LocationID
                col.Add(string.Empty);//Location
                col.Add(0);//OnsetID
                col.Add(0);//AssociatedProblemId1
                col.Add(string.Empty);//AssociatedProblem1
                col.Add(0);//AssociatedProblemId2
                col.Add(string.Empty);//AssociatedProblem2
                col.Add(0);//AssociatedProblemId3
                col.Add(string.Empty);//AssociatedProblem3
                col.Add(0);//AssociatedProblemId4
                col.Add(string.Empty);//AssociatedProblem4
                col.Add(0);//AssociatedProblemId5
                col.Add(string.Empty);//AssociatedProblem5
                col.Add(string.Empty);//Side
                col.Add(0);//ConditionId
                col.Add(0);//Percentage
                col.Add(0);//Durations
                col.Add(string.Empty);//DurationType
                col.Add(TemplateId);//TemplateFieldId
                col.Add(0);//ComplaintSearchId
                objXMLProblem.Append(common.setXmlTable(ref col));
            }
            #endregion

            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SaveSingleScreenDashboard";
            APIRootClass.SaveSingleScreenDashboard objRoot = new global::APIRootClass.SaveSingleScreenDashboard();
            objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
            objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
            objRoot.EncounterId = common.myInt(Session["EncounterId"]);
            objRoot.FacilityId = common.myInt(Session["FacilityId"]);
            objRoot.DoctorId = common.myInt(Session["DoctorID"]);
            objRoot.UserId = common.myInt(Session["UserId"]);
            objRoot.xmlProblemDetails = objXMLProblem.ToString();
            objRoot.sProvisionalDiagnosis = string.Empty;
            objRoot.xmlVitalString = string.Empty;
            objRoot.strXMLDrug = string.Empty;
            objRoot.strXMLOther = string.Empty;
            objRoot.ProvisionalDiagnosisId = 0;
            objRoot.DiagnosisSearchId = 0;
            objRoot.bitNKDA = 0;
            objRoot.xmlTemplateDetails = string.Empty;
            objRoot.iSign = 0;
            objRoot.xmlNonDrugOrder = string.Empty;


            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;

            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);

            //Hashtable HshOut = objEMR.SaveSingleScreenDashboard(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]),
            //                       common.myInt(Session["EncounterId"]), common.myInt(Session["FacilityId"]), common.myInt(Session["DoctorID"]),
            //                       common.myInt(Session["UserId"]), objXMLProblem.ToString(), string.Empty, string.Empty, string.Empty, string.Empty, 0, 0, 0, string.Empty, 0, string.Empty);
            gvProblemDetails.EditIndex = -1;
            BindCommonData("Chief Complaints", "S", string.Empty, 0, 1);
            if (sValue.ToUpper().Contains(" UPDATED") || sValue.ToUpper().Contains(" SAVED"))
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                lblMessage.Text = sValue;
                lblChiefMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                lblChiefMessage.Text = sValue;
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            //objParse = null;
            col = null;
            objXMLProblem = null;
            txtedit.Text = string.Empty;
        }
    }
    protected void gvProblemDetails_OnRowEditing(Object sender, GridViewEditEventArgs e)
    {
        if (!common.myBool(ViewState["EditEnable"]) && !common.myBool(Session["isEMRSuperUser"]))
        {
            Alert.ShowAjaxMsg("You are not authorized to Edit", Page);
            return;
        }
        if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE") && !common.myBool(Session["isEMRSuperUser"]))
        {
            return;
        }
        else
        {
            GridViewRow row = gvProblemDetails.Rows[e.NewEditIndex];
            HiddenField hdnEncodedById = (HiddenField)row.Cells[0].FindControl("hdnEncodedById");
            if (common.myInt(hdnEncodedById.Value) > 0)
            {
                gvProblemDetails.EditIndex = e.NewEditIndex;
                BindCommonData("Chief Complaints", "S", string.Empty, 0, 1);
            }
        }

    }

    protected void gvProblemDetails_SelectedIndexChanged(object sender, EventArgs e)
    {
        ProblemDetailsSelectedIndexChanged();

    }

    private void ProblemDetailsSelectedIndexChanged()
    {
        try
        {
            if (!common.myBool(ViewState["IsAllowEdit"]))
            {
                Alert.ShowAjaxMsg("Not authorized to edit !", this.Page);
                return;
            }

            string strQualityIds = "";

            if (gvProblemDetails.SelectedRow != null)
            {

                ViewState["BTN"] = "ALL";

                this.cmbProblemName.Text = "";
                this.cmbProblemName.SelectedValue = "";
                //this.cmbProblemName.Enabled = false;


                HiddenField lblProblemId = (HiddenField)gvProblemDetails.SelectedRow.FindControl("hdnProblemId");
                TextBox lblProblem = (TextBox)gvProblemDetails.SelectedRow.FindControl("editorProblem");
                //Label lblLocationId = (Label)gvProblemDetails.SelectedRow.FindControl("lblLocationId");
                //Label lblOnset = (Label)gvProblemDetails.SelectedRow.FindControl("lblOnset");
                //Label lblOnsetId = (Label)gvProblemDetails.SelectedRow.FindControl("lblOnsetId");
                //Label lblDuration = (Label)gvProblemDetails.SelectedRow.FindControl("lblDuration");
                //HiddenField lblDurationId = (HiddenField)gvProblemDetails.SelectedRow.FindControl("hdnDurationID");
                //Label lblQuality = (Label)gvProblemDetails.SelectedRow.FindControl("lblQuality");
                //Label lblQualityId = (Label)gvProblemDetails.SelectedRow.FindControl("lblQualityId");
                //Label lblContext = (Label)gvProblemDetails.SelectedRow.FindControl("lblContext");
                //Label lblContextId = (Label)gvProblemDetails.SelectedRow.FindControl("lblContextId");
                //Label lblSeverity = (Label)gvProblemDetails.SelectedRow.FindControl("lblSeverity");
                //Label lblSeverityId = (Label)gvProblemDetails.SelectedRow.FindControl("lblSeverityId");
                //Label lblProvider = (Label)gvProblemDetails.SelectedRow.FindControl("lblProvider");
                //Label lblFacility = (Label)gvProblemDetails.SelectedRow.FindControl("lblFacility");
                //Label lblPrimary = (Label)gvProblemDetails.SelectedRow.FindControl("lblPrimary");
                //Label lblChronic = (Label)gvProblemDetails.SelectedRow.FindControl("lblChronic");
                //Label lblSCTId1 = (Label)gvProblemDetails.SelectedRow.FindControl("lblSCTId");
                //Label lblSide = (Label)gvProblemDetails.SelectedRow.FindControl("lblSide");
                //Label lblSideDescription = (Label)gvProblemDetails.SelectedRow.FindControl("lblSideDescription");
                //Label lblCondition = (Label)gvProblemDetails.SelectedRow.FindControl("lblCondition");
                //Label lblConditionID = (Label)gvProblemDetails.SelectedRow.FindControl("lblConditionID");

                //Label lblAssociatedProblemID1 = (Label)gvProblemDetails.SelectedRow.FindControl("lblAssociatedProblemID1");
                //Label lblAssociatedProblem1 = (Label)gvProblemDetails.SelectedRow.FindControl("lblAssociatedProblem1");
                //Label lblAssociatedProblemID2 = (Label)gvProblemDetails.SelectedRow.FindControl("lblAssociatedProblemID2");
                //Label lblAssociatedProblem2 = (Label)gvProblemDetails.SelectedRow.FindControl("lblAssociatedProblem2");
                //Label lblAssociatedProblemID3 = (Label)gvProblemDetails.SelectedRow.FindControl("lblAssociatedProblemID3");
                //Label lblAssociatedProblem3 = (Label)gvProblemDetails.SelectedRow.FindControl("lblAssociatedProblem3");
                //Label lblAssociatedProblemID4 = (Label)gvProblemDetails.SelectedRow.FindControl("lblAssociatedProblemID4");
                //Label lblAssociatedProblem4 = (Label)gvProblemDetails.SelectedRow.FindControl("lblAssociatedProblem4");
                //Label lblAssociatedProblemID5 = (Label)gvProblemDetails.SelectedRow.FindControl("lblAssociatedProblemID5");
                //Label lblAssociatedProblem5 = (Label)gvProblemDetails.SelectedRow.FindControl("lblAssociatedProblem5");
                //Label lblPercent = (Label)gvProblemDetails.SelectedRow.FindControl("lblPercentage");

                ViewState["RowIndexP"] = gvProblemDetails.SelectedRow.RowIndex;
                ViewState["ProblemId"] = lblProblemId.Value;
                cmbProblemName.Text = lblProblem.Text;
                cmbProblemName.SelectedValue = lblProblemId.Value.Trim();



                HiddenField hdnDurations = (HiddenField)gvProblemDetails.SelectedRow.FindControl("hdnDurationID");
                HiddenField hdnDurationType = (HiddenField)gvProblemDetails.SelectedRow.FindControl("hdnDurationType");
                HiddenField hdnComplaintSearchId = (HiddenField)gvProblemDetails.SelectedRow.FindControl("hdnComplaintSearchId");

                if (hdnDurationType.Value != "O")
                {

                    if (common.myInt(hdnDurations.Value) > 0)
                    {
                        rdoDurationList.SelectedValue = hdnDurations.Value;
                        ddlDurationType.SelectedIndex = ddlDurationType.Items.IndexOf(ddlDurationType.Items.FindByValue(common.myStr(hdnDurationType.Value)));
                    }
                    else
                    {
                        rdoDurationList.SelectedIndex = -1;
                        ddlDurationType.SelectedIndex = -1;
                    }
                }
                else
                {
                    rdoDurationList.Visible = false;
                    //txtDuration.Visible = true;
                    //txtDuration.Text = common.myStr(hdnDurations.Value);
                    ddlDurationType.SelectedIndex = ddlDurationType.Items.IndexOf(ddlDurationType.Items.FindByValue(common.myStr(hdnDurationType.Value)));
                }

                btnAddComplaint.Text = "Update List";
                txtedit.Text = lblProblemId.Value; // gvProblemDetails.SelectedRow.Cells[1].Text.Trim();


            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;

        }
    }
    protected void btnAddHPIClose_OnClick(object sender, EventArgs e)
    {
        try
        {
            RetrievePatientProblemsDetail();
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    //protected void gvProblemDetails_OnRowCancelingEdit(Object sender, GridViewCancelEditEventArgs e)
    //{
    //    gvProblemDetails.EditIndex = -1;
    //    BindCommonData("Chief Complaints", "S", string.Empty, 0, 1);
    //}
    //protected void gvProblemDetails_OnRowUpdating(Object sender, GridViewUpdateEventArgs e)
    //{
    //    //BaseC.ParseData objParse = new BaseC.ParseData();
    //    ArrayList col = new ArrayList();
    //    StringBuilder objXMLProblem = new StringBuilder();
    //    //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);

    //    try
    //    {
    //        HiddenField hdnProblemId = (HiddenField)gvProblemDetails.Rows[e.RowIndex].FindControl("hdnProblemId");
    //        TextBox editorProblem = (TextBox)gvProblemDetails.Rows[e.RowIndex].FindControl("editorProblem");
    //        if (common.myInt(hdnProblemId.Value).Equals(0))
    //        {
    //            return;
    //        }
    //        txtedit.Text = common.myStr(hdnProblemId.Value);
    //        #region  Problem
    //        if (!common.myStr(editorProblem.Text).Equals(string.Empty))
    //        {
    //            string editID;
    //            if (!(common.myStr(txtedit.Text).Trim().Equals(string.Empty)))
    //            {
    //                editID = common.myStr(txtedit.Text);
    //            }
    //            else
    //            {
    //                editID = string.Empty;
    //            }
    //            string TemplateId = Request.QueryString["POPUP"] != null && common.myStr(Request.QueryString["POPUP"]).Equals("StaticTemplate") ? common.myStr(Request.QueryString["TemplateFieldId"]) : "0";
    //            string strProblem = common.ParseString(editorProblem.Text).Trim().Replace("\n", "<br/>");

    //            if (common.myLen(strProblem) > 2000)
    //            {
    //                Alert.ShowAjaxMsg("Chief complaints (free text) length must be less than 2000 character!", this.Page);
    //                return;
    //            }
    //            col.Add(editID);//Id               
    //            col.Add(0); // ProblemId
    //            col.Add(strProblem);//Problem
    //            col.Add(0);//DurationID
    //            col.Add(string.Empty);//Duration
    //            col.Add(0);//ContextID
    //            col.Add(string.Empty);//Context
    //            col.Add(0);//SeverityId
    //            col.Add(string.Empty);//Severity
    //            col.Add(0);//IsPrimary
    //            col.Add(0);//IsChronic
    //            col.Add(common.myStr(Session["DoctorID"]));//DoctorId
    //            col.Add(common.myStr(Session["FacilityId"]));//FacilityId
    //            col.Add(0);//SCTId
    //            col.Add(string.Empty);//QualityIDs
    //            col.Add(0);//LocationID
    //            col.Add(string.Empty);//Location
    //            col.Add(0);//OnsetID
    //            col.Add(0);//AssociatedProblemId1
    //            col.Add(string.Empty);//AssociatedProblem1
    //            col.Add(0);//AssociatedProblemId2
    //            col.Add(string.Empty);//AssociatedProblem2
    //            col.Add(0);//AssociatedProblemId3
    //            col.Add(string.Empty);//AssociatedProblem3
    //            col.Add(0);//AssociatedProblemId4
    //            col.Add(string.Empty);//AssociatedProblem4
    //            col.Add(0);//AssociatedProblemId5
    //            col.Add(string.Empty);//AssociatedProblem5
    //            col.Add(string.Empty);//Side
    //            col.Add(0);//ConditionId
    //            col.Add(0);//Percentage
    //            col.Add(0);//Durations
    //            col.Add(string.Empty);//DurationType
    //            col.Add(TemplateId);//TemplateFieldId
    //            col.Add(0);//ComplaintSearchId
    //            objXMLProblem.Append(common.setXmlTable(ref col));
    //        }
    //        #endregion

    //        string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SaveSingleScreenDashboard";
    //        APIRootClass.SaveSingleScreenDashboard objRoot = new global::APIRootClass.SaveSingleScreenDashboard();
    //        objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
    //        objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
    //        objRoot.EncounterId = common.myInt(Session["EncounterId"]);
    //        objRoot.FacilityId = common.myInt(Session["FacilityId"]);
    //        objRoot.DoctorId = common.myInt(Session["DoctorID"]);
    //        objRoot.UserId = common.myInt(Session["UserId"]);
    //        objRoot.xmlProblemDetails = objXMLProblem.ToString();
    //        objRoot.sProvisionalDiagnosis = string.Empty;
    //        objRoot.xmlVitalString = string.Empty;
    //        objRoot.strXMLDrug = string.Empty;
    //        objRoot.strXMLOther = string.Empty;
    //        objRoot.ProvisionalDiagnosisId = 0;
    //        objRoot.DiagnosisSearchId = 0;
    //        objRoot.bitNKDA = 0;
    //        objRoot.xmlTemplateDetails = string.Empty;
    //        objRoot.iSign = 0;
    //        objRoot.xmlNonDrugOrder = string.Empty;


    //        WebClient client = new WebClient();
    //        client.Headers["Content-type"] = "application/json";
    //        client.Encoding = Encoding.UTF8;

    //        string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
    //        string sValue = client.UploadString(ServiceURL, inputJson);
    //        sValue = JsonConvert.DeserializeObject<string>(sValue);

    //        //Hashtable HshOut = objEMR.SaveSingleScreenDashboard(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]),
    //        //                       common.myInt(Session["EncounterId"]), common.myInt(Session["FacilityId"]), common.myInt(Session["DoctorID"]),
    //        //                       common.myInt(Session["UserId"]), objXMLProblem.ToString(), string.Empty, string.Empty, string.Empty, string.Empty, 0, 0, 0, string.Empty, 0, string.Empty);
    //        gvProblemDetails.EditIndex = -1;
    //        BindCommonData("Chief Complaints", "S", string.Empty, 0, 1);
    //        if (sValue.ToUpper().Contains(" UPDATED") || sValue.ToUpper().Contains(" SAVED"))
    //        {
    //            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
    //            lblMessage.Text = sValue;
    //            lblChiefMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
    //            lblChiefMessage.Text = sValue;
    //        }
    //    }
    //    catch (Exception Ex)
    //    {
    //        lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
    //        lblMessage.Text = "Error: " + Ex.Message;
    //        clsExceptionLog objException = new clsExceptionLog();
    //        objException.HandleException(Ex);
    //        objException = null;
    //    }
    //    finally
    //    {
    //        //objParse = null;
    //        col = null;
    //        objXMLProblem = null;
    //        txtedit.Text = string.Empty;
    //    }
    //}
    //protected void gvProblemDetails_OnRowEditing(Object sender, GridViewEditEventArgs e)
    //{
    //    if (!common.myBool(ViewState["EditEnable"]) && !common.myBool(Session["isEMRSuperUser"]))
    //    {
    //        Alert.ShowAjaxMsg("You are not authorized to Edit", Page);
    //        return;
    //    }
    //    if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE") && !common.myBool(Session["isEMRSuperUser"]))
    //    {
    //        return;
    //    }
    //    else
    //    {
    //        GridViewRow row = gvProblemDetails.Rows[e.NewEditIndex];
    //        HiddenField hdnEncodedById = (HiddenField)row.Cells[0].FindControl("hdnEncodedById");
    //        if (common.myInt(hdnEncodedById.Value) > 0)
    //        {
    //            gvProblemDetails.EditIndex = e.NewEditIndex;
    //            BindCommonData("Chief Complaints", "S", string.Empty, 0, 1);
    //        }
    //    }
    //}
    #endregion
    #region Allergies
    private bool isSavedAllergy()
    {
        bool isSave = true;
        string strmsg = string.Empty;
        if (common.myInt(Session["RegistrationId"]).Equals(0))
        {
            strmsg += "Registration not selected ! ";
            isSave = false;
        }
        if (common.myStr(hdnAllergyType.Value).Trim().Equals(string.Empty) || common.myInt(hdnItemId.Value).Equals(0))
        {
            strmsg += "Allergy not selected ! ";
            isSave = false;
        }
        if (common.myInt(ddlAllergySeverity.SelectedValue).Equals(0))
        {
            strmsg += "Interaction severity not selected ! ";
            isSave = false;
        }
        lblAllergyMessage.Text = strmsg;
        return isSave;
    }
    public void bindAllergies(DataSet dsAllergy)
    {
        ClearMessageControl();
        StringBuilder sb = new StringBuilder();
        StringBuilder sbDrugAllergy = new StringBuilder();
        StringBuilder sbOtherAllergy = new StringBuilder();
        DataView dvDrug = new DataView();
        DataView dvOther = new DataView();


        try
        {
            int t = 0;
            if (dsAllergy.Tables[1] != null && dsAllergy.Tables[1].Rows.Count > 0)
            {
                dvDrug = new DataView(dsAllergy.Tables[1]);
                dvDrug.RowFilter = "AllergyType IN ('Generic','Drug','CIMS','VIDAL')";
                dvOther = new DataView(dsAllergy.Tables[1]);
                dvOther.RowFilter = "AllergyType NOT IN ('Generic','Drug','CIMS','VIDAL')";
                if (dsAllergy.Tables[2].Rows.Count > 0)
                {
                    if (common.myBool(dsAllergy.Tables[2].Rows[0]["NoAllergies"]))
                    {
                        sb.Append("Allergies: " + Environment.NewLine);
                    }
                    if (!common.myBool(dsAllergy.Tables[2].Rows[0]["NoAllergies"]))
                    {
                        foreach (DataRowView dr in dvDrug)
                        {
                            if (t.Equals(0))
                            {
                                t = 1;
                            }
                            sbDrugAllergy.Append(" " + common.myStr(dr["AllergyName"]) + " (" + ((common.myInt(dr["Generic_Id"]) > 0) ? "Generic" : "Generic: " + common.myStr(dr["Generic_Name"])) + ")");
                            if (!common.myStr(dr["AllergyDate"]).Equals(string.Empty))
                            {
                                sbDrugAllergy.Append(", Onset Date: " + common.myStr(dr["AllergyDate"]));
                            }
                            if (!common.myStr(dr["Reaction"]).Equals(string.Empty))
                            {
                                if (!common.myBool(dr["Intolerance"]) && common.myStr(dr["Remarks"]).Equals(string.Empty))
                                {
                                    sbDrugAllergy.Append(", <b>Reaction/Any Adverse Drug Event:</b> " + common.myStr(dr["Reaction"]) + ".");
                                }
                                else
                                {
                                    sbDrugAllergy.Append(", <b>Reaction/Any Adverse Drug Event:</b> " + common.myStr(dr["Reaction"]));
                                }
                            }
                            if (!common.myStr(dr["AllergySeverity"]).Equals(string.Empty))
                            {
                                sbDrugAllergy.Append(", Severity level : " + common.myStr(dr["AllergySeverity"]));
                            }
                            if (common.myBool(dr["Intolerance"]))
                            {
                                if (common.myStr(dr["Remarks"]).Equals(string.Empty))
                                {
                                    sbDrugAllergy.Append(", Intolerable.");
                                }
                                else
                                {
                                    sbDrugAllergy.Append(", Intolerable");
                                }
                            }
                            if (!common.myStr(dr["Remarks"]).Equals(string.Empty))
                            {
                                sbDrugAllergy.Append(", Remarks: " + common.myStr(dr["Remarks"]) + ".");
                            }
                            sbDrugAllergy.Append(Environment.NewLine);
                        }
                    }
                    else
                    {
                        chkNoAllergies.Checked = common.myBool(dsAllergy.Tables[2].Rows[0]["NoAllergies"]);
                        chkNoAllergies_OnCheckedChanged(null, null);
                        sbDrugAllergy.Append(Environment.NewLine + " No Allergies." + Environment.NewLine);
                    }
                }
                t = 0;
                foreach (DataRowView dr in dvOther)
                {
                    if (t.Equals(0))
                    {
                        sbOtherAllergy.Append(Environment.NewLine + "Food/ Other Allergies: " + Environment.NewLine);
                        t = 1;
                    }
                    sbOtherAllergy.Append(" " + common.myStr(dr["AllergyName"]));
                    if (!common.myStr(dr["AllergyDate"]).Equals(string.Empty))
                    {
                        sbOtherAllergy.Append(", Onset Date: " + common.myStr(dr["AllergyDate"]));
                    }
                    if (!common.myStr(dr["Reaction"]).Equals(string.Empty))
                    {
                        if (!common.myBool(dr["Intolerance"]) && common.myStr(dr["Remarks"]).Equals(string.Empty))
                        {
                            sbOtherAllergy.Append(", <b>Reaction/Any Adverse Drug Event:</b> " + common.myStr(dr["Reaction"]) + ".");
                        }
                        else
                        {
                            sbOtherAllergy.Append(", <b>Reaction/Any Adverse Drug Event:</b> " + common.myStr(dr["Reaction"]));
                        }
                    }
                    if (common.myBool(dr["Intolerance"]))
                    {
                        if (common.myStr(dr["Remarks"]).Equals(string.Empty))
                            sbOtherAllergy.Append(", Intolerable.");
                        else
                            sbOtherAllergy.Append(", Intolerable");
                    }
                    if (!common.myStr(dr["Remarks"]).Equals(string.Empty))
                    {
                        sbOtherAllergy.Append(", Remarks: " + common.myStr(dr["Remarks"]) + ".");
                    }
                    sbOtherAllergy.Append(Environment.NewLine);
                }
                sb.Append(sbDrugAllergy);
                sb.Append(sbOtherAllergy);
                editorAllergy.Text = sb.ToString();
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            sb = null;
            sbDrugAllergy = null;
            sbOtherAllergy = null;
            dvDrug.Dispose();
            dvOther.Dispose();
        }
    }
    protected void lnkAddAllergies_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "/EMR/Allergy/Allergy.aspx?Regno=" + common.myInt(Session["RegistrationNo"]) + "&Encno=" + common.myStr(Session["EncounterNo"]) + "&IsEMRPopUp=1&Source=IPD";
            //RadWindowForNew.Width = 650;
            //RadWindowForNew.Height = 400;
            //RadWindowForNew.Top = 10;
            //RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addAllergiesOnClientClose";
            RadWindowForNew.Title = "Allery";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnAddAllergiesClose_OnClick(object sender, EventArgs e)
    {
        try
        {
            BindCommonData("Allergies", "S", string.Empty, 0, 1);
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void chkNoAllergies_OnCheckedChanged(object sender, EventArgs e)
    {
        ddlBrand.Enabled = !chkNoAllergies.Checked;
        ddlAllergySeverity.Enabled = !chkNoAllergies.Checked;
    }
    protected void ddlBrand_OnItemsRequested(object sender, Telerik.Web.UI.RadComboBoxItemsRequestedEventArgs e)
    {
        if (common.myStr(e.Text).Equals(string.Empty) || common.myStr(e.Text).Length < 2)
        {
            return;
        }
        int GenericId = 0;
        DataTable data = new DataTable();
        try
        {
            data = GetBrandData(common.myStr(e.Text), GenericId);
            int itemOffset = e.NumberOfItems;
            int endOffset = Math.Min(itemOffset + 50, data.Rows.Count);
            e.EndOfItems = endOffset.Equals(data.Rows.Count);
            for (int i = itemOffset; i < endOffset; i++)
            {
                Telerik.Web.UI.RadComboBoxItem item = new Telerik.Web.UI.RadComboBoxItem();
                item.Text = (string)data.Rows[i]["ItemName"];
                item.Value = common.myStr(data.Rows[i]["ItemId"]);
                item.Attributes.Add("AllergyType", common.myStr(data.Rows[i]["AllergyType"]));
                this.ddlBrand.Items.Add(item);
                item.DataBind();
            }
            e.Message = GetStatusMessage(endOffset, data.Rows.Count);
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            data.Dispose();
        }
    }
    private static string GetStatusMessage(int offset, int total)
    {
        if (total <= 0)
            return "No matches found...";
        return String.Format("Items <b>1</b>-<b>{0}</b> out of <b>{1}</b>", offset, total);
    }
    private DataTable GetBrandData(string text, int GenericId)
    {
        DataSet dsSearch = new DataSet();
        DataTable dt = new DataTable();
        //BaseC.EMRAllergy objAllergy = new BaseC.EMRAllergy(sConString);
        DataView DV = new DataView();
        try
        {
            string ServiceURL = WebAPIAddress.ToString() + "api/Common/getAllergyItemList";
            APIRootClass.AllergyItemList objRoot = new global::APIRootClass.AllergyItemList();
            objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
            objRoot.FacilityId = common.myInt(Session["FacilityId"]);
            objRoot.ItemName = text.Replace("'", "''");
            objRoot.EncodedBy = common.myInt(Session["UserId"]);


            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;

            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);
            dsSearch = JsonConvert.DeserializeObject<DataSet>(sValue);

            //dsSearch = objAllergy.getAllergyItemList(common.myInt(Session["HospitalLocationID"]), common.myInt(Session["FacilityId"]),
            //                        text.Replace("'", "''"), common.myInt(Session["UserId"]));
            DV = dsSearch.Tables[0].Copy().DefaultView;
            if (common.myBool(ViewState["IsCIMSInterfaceActive"]))
            {
                DV.RowFilter = "AllergyType IN('Generic','CIMS','Food','Others')";
            }
            else if (common.myBool(ViewState["IsVIDALInterfaceActive"]))
            {
                DV.RowFilter = "AllergyType IN('Generic','VIDAL','Food','Others')";
            }
            else
            {
                DV.RowFilter = "AllergyType IN('Generic','Food','Others','Drug')";
            }
            dt = DV.ToTable().Copy();
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            dsSearch.Dispose();
            //objAllergy = null;
            DV.Dispose();
        }
        return dt;
    }
    #endregion
    #region Vitals
    protected void gvVitals_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType.Equals(DataControlRowType.Header) || e.Row.RowType.Equals(DataControlRowType.DataRow))
            {

                if (e.Row.RowType.Equals(DataControlRowType.DataRow))
                {
                    //string HeaderColumn = string.Empty;
                    //ImageButton lnkHT = (ImageButton)e.Row.FindControl("lnkHT");
                    //ImageButton lnkWT = (ImageButton)e.Row.FindControl("lnkWT");
                    //ImageButton lnkHC = (ImageButton)e.Row.FindControl("lnkHC");
                    //ImageButton lnkT = (ImageButton)e.Row.FindControl("lnkT");
                    //ImageButton lnkR = (ImageButton)e.Row.FindControl("lnkR");
                    //ImageButton lnkP = (ImageButton)e.Row.FindControl("lnkP");
                    //ImageButton lnkBPS = (ImageButton)e.Row.FindControl("lnkBPS");
                    //ImageButton lnkBPD = (ImageButton)e.Row.FindControl("lnkBPD");
                    //ImageButton lnkMAC = (ImageButton)e.Row.FindControl("lnkMAC");
                    //ImageButton lnkSpO2 = (ImageButton)e.Row.FindControl("lnkSpO2");
                    //ImageButton lnkBMI = (ImageButton)e.Row.FindControl("lnkBMI");
                    //ImageButton lnkBSA = (ImageButton)e.Row.FindControl("lnkBSA");
                    //for (int idx = 0; idx < e.Row.Cells.Count; idx++)
                    //{
                    //    if (!common.myStr(this.gvVitals.HeaderRow.Cells[idx].Text).ToUpper().Equals("VITAL DATE")
                    //        && !common.myStr(this.gvVitals.HeaderRow.Cells[idx].Text).ToUpper().Equals("ENTERED BY")
                    //        && !common.myStr(this.gvVitals.HeaderRow.Cells[idx].Text).ToUpper().Equals("&NBSP;")
                    //        && !common.myStr(this.gvVitals.HeaderRow.Cells[idx].Text).ToUpper().Equals(string.Empty))
                    //    {
                    //        string HeaderColumn1 = common.myStr(this.gvVitals.HeaderRow.Cells[idx].Text);
                    //        e.Row.Cells[idx].Attributes.Add("onclick", "setVitalValue('" + common.myStr(e.Row.Cells[idx].Text) + "','" + HeaderColumn1 + "');");
                    //    }
                    //}
                }
                if (e.Row.RowType.Equals(DataControlRowType.DataRow))
                {
                    HiddenField hdnT_ABNORMAL_VALUE = (HiddenField)e.Row.FindControl("hdnT_ABNORMAL_VALUE");
                    if (common.myInt(hdnT_ABNORMAL_VALUE.Value).Equals(1))
                    {
                        ImageButton lnkT = (ImageButton)e.Row.FindControl("lnkT");
                        lnkT.ForeColor = System.Drawing.Color.Red;
                    }
                    HiddenField hdnR_ABNORMAL_VALUE = (HiddenField)e.Row.FindControl("hdnR_ABNORMAL_VALUE");
                    if (common.myInt(hdnR_ABNORMAL_VALUE.Value).Equals(1))
                    {
                        ImageButton lnkR = (ImageButton)e.Row.FindControl("lnkR");
                        lnkR.ForeColor = System.Drawing.Color.Red;
                    }
                    HiddenField hdnP_ABNORMAL_VALUE = (HiddenField)e.Row.FindControl("hdnP_ABNORMAL_VALUE");
                    if (common.myInt(hdnP_ABNORMAL_VALUE.Value).Equals(1))
                    {
                        ImageButton lnkP = (ImageButton)e.Row.FindControl("lnkP");
                        lnkP.ForeColor = System.Drawing.Color.Red;
                    }
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    //added by bhakti
    public int bindPreviousVitals()
    {
        int cnt = 0;
        try
        {
            DataSet objDs = new DataSet();

            string ServiceURL = WebAPIAddress.ToString() + "api/EMRVitals/GetPatientPreviousVitalHistory";
            APIRootClass.PatientPreviousVitalsHistory objRoot = new global::APIRootClass.PatientPreviousVitalsHistory();
            objRoot.HospId = common.myInt(Session["HospitalLocationId"]);
            objRoot.FacId = common.myInt(Session["FacilityId"]);
            objRoot.RegId = common.myInt(Session["RegistrationId"]);
            objRoot.EncId = 0;
            objRoot.ViewType = 2;
            objRoot.DRange = "";

            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;
            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);
            objDs = JsonConvert.DeserializeObject<DataSet>(sValue);
            cnt = objDs.Tables[0].Rows.Count;

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;

        }
        return cnt;
    }
    protected void gvVitals_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int result = bindPreviousVitals();
            autoSaveDataInTransit(true);


            // GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
            GridViewRow row = (GridViewRow)(((ImageButton)e.CommandSource).NamingContainer);


            switch (common.myStr(e.CommandName).ToUpper())
            {
                case "HT":
                    ImageButton lnkHT = (ImageButton)row.FindControl("lnkHT");
                    if (result > 0)
                    {
                        RadWindowForNew.NavigateUrl = "/EMR/Vitals/Vitalgraph.aspx?Value=" + common.myStr(lnkHT.AlternateText) + "&Name=HT";
                        RadWindowForNew.Width = 650;
                        RadWindowForNew.Height = 500;
                        //RadWindowForNew.Top = 10;
                        //RadWindowForNew.Left = 10;
                        //RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
                        RadWindowForNew.Title = "Height";
                        RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                        RadWindowForNew.Modal = true;
                        RadWindowForNew.VisibleStatusbar = false;
                        //RadWindowForNew.InitialBehavior = Telerik.Web.UI.WindowBehaviors.Maximize;
                    }

                    else
                    {
                        Alert.ShowAjaxMsg("Vital not given.", Page);
                    }

                    break;
                case "WT":
                    ImageButton lnkWT = (ImageButton)row.FindControl("lnkWT");
                    if (result > 0)
                    //if (lnkWT.AlternateText != "")
                    {
                        RadWindowForNew.NavigateUrl = "/EMR/Vitals/Vitalgraph.aspx?Value=" + common.myStr(lnkWT.AlternateText) + "&Name=WT";
                        RadWindowForNew.Width = 650;
                        RadWindowForNew.Height = 500;
                        //RadWindowForNew.Top = 10;
                        //RadWindowForNew.Left = 10;
                        //RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
                        RadWindowForNew.Title = "Weight";
                        RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                        RadWindowForNew.Modal = true;
                        RadWindowForNew.VisibleStatusbar = false;
                    }
                    else
                    {
                        Alert.ShowAjaxMsg("Vital not given.", Page);
                    }

                    break;
                case "HC":
                    ImageButton lnkHC = (ImageButton)row.FindControl("lnkHC");
                    //if (lnkHC.AlternateText != "")
                    if (result > 0)
                    {
                        RadWindowForNew.NavigateUrl = "/EMR/Vitals/Vitalgraph.aspx?Value=" + common.myStr(lnkHC.AlternateText) + "&Name=HC";
                        RadWindowForNew.Width = 650;
                        RadWindowForNew.Height = 500;
                        //RadWindowForNew.Top = 10;
                        //RadWindowForNew.Left = 10;
                        //RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
                        RadWindowForNew.Title = "Head circumference";
                        RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                        RadWindowForNew.Modal = true;
                        RadWindowForNew.VisibleStatusbar = false;
                    }
                    else
                    {
                        Alert.ShowAjaxMsg("Vital not given.", Page);
                    }

                    break;
                case "T":

                    ImageButton lnkT = (ImageButton)row.FindControl("lnkT");
                    if (result > 0)
                    //if (lnkT.AlternateText != "")
                    {
                        RadWindowForNew.NavigateUrl = "/EMR/Vitals/Vitalgraph.aspx?Value=" + common.myStr(lnkT.AlternateText) + "&Name=T";
                        RadWindowForNew.Width = 650;
                        RadWindowForNew.Height = 500;
                        //RadWindowForNew.Top = 10;
                        //RadWindowForNew.Left = 10;
                        //RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
                        RadWindowForNew.Title = "Temperature";
                        RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                        RadWindowForNew.Modal = true;
                        RadWindowForNew.VisibleStatusbar = false;
                    }
                    else
                    {
                        Alert.ShowAjaxMsg("Vital not given.", Page);
                    }

                    break;
                case "R":

                    ImageButton lnkR = (ImageButton)row.FindControl("lnkR");
                    if (result > 0)
                    //if (lnkR.AlternateText != "")
                    {
                        RadWindowForNew.NavigateUrl = "/EMR/Vitals/Vitalgraph.aspx?Value=" + common.myStr(lnkR.AlternateText) + "&Name=R";
                        RadWindowForNew.Width = 650;
                        RadWindowForNew.Height = 500;
                        //RadWindowForNew.Top = 10;
                        //RadWindowForNew.Left = 10;
                        //RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
                        RadWindowForNew.Title = "Respiration";
                        RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                        RadWindowForNew.Modal = true;
                        RadWindowForNew.VisibleStatusbar = false;
                    }
                    else
                    {
                        Alert.ShowAjaxMsg("Vital not given.", Page);
                    }

                    break;
                case "P":

                    ImageButton lnkP = (ImageButton)row.FindControl("lnkP");
                    if (result > 0)
                    //if (lnkP.AlternateText != "")
                    {
                        RadWindowForNew.NavigateUrl = "/EMR/Vitals/Vitalgraph.aspx?Value=" + common.myStr(lnkP.AlternateText) + "&Name=P";
                        RadWindowForNew.Width = 650;
                        RadWindowForNew.Height = 500;
                        //RadWindowForNew.Top = 10;
                        //RadWindowForNew.Left = 10;
                        //RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
                        RadWindowForNew.Title = "Pulse";
                        RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                        RadWindowForNew.Modal = true;
                        RadWindowForNew.VisibleStatusbar = false;
                    }
                    else
                    {
                        Alert.ShowAjaxMsg("Vital not given.", Page);
                    }

                    break;
                case "BPS":

                    ImageButton lnkBPS = (ImageButton)row.FindControl("lnkBPS");
                    if (result > 0)
                    //if (lnkBPS.AlternateText != "")
                    {
                        RadWindowForNew.NavigateUrl = "/EMR/Vitals/Vitalgraph.aspx?Value=" + common.myStr(lnkBPS.AlternateText) + "&Name=BPS";
                        RadWindowForNew.Width = 650;
                        RadWindowForNew.Height = 500;
                        //RadWindowForNew.Top = 10;
                        //RadWindowForNew.Left = 10;
                        //RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
                        RadWindowForNew.Title = "BP Systolic";
                        RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                        RadWindowForNew.Modal = true;
                        RadWindowForNew.VisibleStatusbar = false;
                    }
                    else
                    {
                        Alert.ShowAjaxMsg("Vital not given.", Page);
                    }

                    break;
                case "BPD":

                    ImageButton lnkBPD = (ImageButton)row.FindControl("lnkBPD");
                    if (result > 0)
                    //if (lnkBPD.AlternateText != "")
                    {
                        RadWindowForNew.NavigateUrl = "/EMR/Vitals/Vitalgraph.aspx?Value=" + common.myStr(lnkBPD.AlternateText) + "&Name=BPD";
                        RadWindowForNew.Width = 650;
                        RadWindowForNew.Height = 500;
                        //RadWindowForNew.Top = 10;
                        //RadWindowForNew.Left = 10;
                        //RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
                        RadWindowForNew.Title = "BP Diastolic";
                        RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                        RadWindowForNew.Modal = true;
                        RadWindowForNew.VisibleStatusbar = false;
                    }
                    else
                    {
                        Alert.ShowAjaxMsg("Vital not given.", Page);
                    }

                    break;
                case "MAC":

                    ImageButton lnkMAC = (ImageButton)row.FindControl("lnkMAC");
                    if (result > 0)
                    //if (lnkMAC.AlternateText != "")
                    {
                        RadWindowForNew.NavigateUrl = "/EMR/Vitals/Vitalgraph.aspx?Value=" + common.myStr(lnkMAC.AlternateText) + "&Name=MAC";
                        RadWindowForNew.Width = 650;
                        RadWindowForNew.Height = 500;
                        //RadWindowForNew.Top = 10;
                        //RadWindowForNew.Left = 10;
                        //RadWindowForNew.OnClientClose = "addVit
                        RadWindowForNew.Title = "Mid Arm Circumference";
                        RadWindowForNew.VisibleOnPageLoad = true;
                        RadWindowForNew.Modal = true;
                        RadWindowForNew.VisibleStatusbar = false;
                    }
                    else
                    {
                        Alert.ShowAjaxMsg("Vital not given.", Page);
                    }

                    break;
                case "SPO2":

                    ImageButton lnkSpO2 = (ImageButton)row.FindControl("lnkSpO2");
                    if (result > 0)
                    //if (lnkSpO2.AlternateText != "")
                    {
                        RadWindowForNew.NavigateUrl = "/EMR/Vitals/Vitalgraph.aspx?Value=" + common.myStr(lnkSpO2.AlternateText) + "&Name=SpO2";
                        RadWindowForNew.Width = 650;
                        RadWindowForNew.Height = 500;
                        //RadWindowForNew.Top = 10;
                        //RadWindowForNew.Left = 10;
                        //RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
                        RadWindowForNew.Title = "Oxygen Saturation";
                        RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                        RadWindowForNew.Modal = true;
                        RadWindowForNew.VisibleStatusbar = false;
                    }
                    else
                    {
                        Alert.ShowAjaxMsg("Vital not given.", Page);
                    }

                    break;
                case "BMI":

                    ImageButton lnkBMI = (ImageButton)row.FindControl("lnkBMI");
                    if (result > 0)
                    //if (lnkBMI.AlternateText != "")
                    {
                        RadWindowForNew.NavigateUrl = "/EMR/Vitals/Vitalgraph.aspx?Value=" + common.myStr(lnkBMI.AlternateText) + "&Name=BMI";
                        RadWindowForNew.Width = 650;
                        RadWindowForNew.Height = 500;
                        RadWindowForNew.Title = "Body mass index";
                        RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                        RadWindowForNew.Modal = true;
                        RadWindowForNew.VisibleStatusbar = false;
                    }
                    else
                    {
                        Alert.ShowAjaxMsg("Vital not given.", Page);
                    }

                    break;
                case "BSA":
                    ImageButton lnkBSA = (ImageButton)row.FindControl("lnkBSA");
                    if (result > 0)
                    //if (lnkBSA.AlternateText != "")
                    {
                        RadWindowForNew.NavigateUrl = "/EMR/Vitals/Vitalgraph.aspx?Value=" + common.myStr(lnkBSA.AlternateText) + "&Name=BSA";
                        RadWindowForNew.Width = 650;
                        RadWindowForNew.Height = 500;
                        RadWindowForNew.Title = "Body surface area";
                        RadWindowForNew.VisibleOnPageLoad = true;
                        RadWindowForNew.Modal = true;
                        RadWindowForNew.VisibleStatusbar = false;
                    }
                    else
                    {
                        Alert.ShowAjaxMsg("Vital not given.", Page);
                    }

                    break;
            }

        }
        catch (Exception Ex)
        {
            lblMessage.Text = Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    //protected void gvVitals_PageIndexChanging(object sender, GridViewPageEventArgs e)
    //{
    //    gvVitals.PageIndex = e.NewPageIndex;
    //    bindVitals();
    //}
    public void bindVitals()
    {
        BindCommonData("Vitals", "S", string.Empty, 0, 1);
    }
    //bhakti
    protected void lnkimgBtGrowthChart_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            //RadWindowForNew.NavigateUrl = "~/EMR/Vitals/GrowthChart.aspx?IsEMRPopUp=1";
            //// RadWindowForNew.NavigateUrl = "~/EMR/Vitals/Vitals.aspx?IsEMRPopUp=1";
            //RadWindowForNew.Title = "Growth Chart";
            //RadWindowForNew.OnClientClose = string.Empty;
            //// RadWindowForNew.Modal = true;
            //RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code    
            //                                          // RadWindowForNew.VisibleStatusbar = false;
            //RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;


            RadWindowForNew.NavigateUrl = "~/EMR/Vitals/GrowthChart.aspx?MP=NO";
            RadWindowForNew.OnClientClose = "";
            RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code 
            RadWindow1.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void lnkAddVitals_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/Vitals/Vitals.aspx?IsEMRPopUp=1";
            //RadWindowForNew.Width = 650;
            //RadWindowForNew.Height = 500;
            //RadWindowForNew.InitialBehaviors = WindowBehaviors.Maximize;
            //RadWindowForNew.Top = 0;
            //RadWindowForNew.Left = 0;
            //RadWindowForNew.Title = "Vitals";
            RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            //RadWindowForNew.Modal = true;
            // RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    protected void lnkimgBtRLIS_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/LIS/Phlebotomy/PatientHistory.aspx?CF=&Master=Blank&EncId=" + Session["EncounterId"] + "&RegNo=" + Session["RegistrationNo"] + "&Source=O&Flag=RIS&Station=All";
            RadWindowForNew.Title = "Radiology Result";
            RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void lnkimgBtnLIS_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            // var url = '/LIS/Phlebotomy/PatientHistory.aspx?CF=&Master=Blank&EncId=<%= Session["EncounterId"]%>&RegNo=<%=Session["RegistrationNo"]%>&Source=O&Flag=LIS&Station=All';

            RadWindowForNew.NavigateUrl = "~/LIS/Phlebotomy/PatientHistory.aspx?CF=&Master=Blank&EncId=" + Session["EncounterId"] + "&RegNo=" + Session["RegistrationNo"] + "&Source=O&Flag=LIS&Station=All";
            RadWindowForNew.Title = "Lab Results";
            RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }


    protected void lnkImmunizationHistory_OnClick(object sender, EventArgs e)
    {
        try
        {
            //palendra
            if (common.myInt(hdnAgeLimitImmulization.Value) > 17)
            {
                Alert.ShowAjaxMsg("Immunization is not required for this patient", Page);
                return;
            }
            //palendra

            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/Immunization/ImmunizationBabyDueDate.aspx?From=POPUP";
            RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
            RadWindowForNew.Title = "Immunization Due Date";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    protected void lnkChiefComplaint_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/Problems/ViewPastPatientProblems.aspx?MP=NO";
            RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
            RadWindowForNew.Title = "Prescription History";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    protected void lnkPrescriptions_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/Medication/OPPrescriptionMainNew.aspx?Consumable=False&EMRSingleScreen=True";
            RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
            RadWindowForNew.Title = "Prescription History";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    protected void lnkLabOrders_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/Medication/OPPrescriptionMainNew.aspx?Consumable=False&EMRSingleScreen=True";
            RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
            RadWindowForNew.Title = "Prescription History";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    protected void lnkimgBtnAddCaseSheet_OnClick(object sender, EventArgs e)
    {
        try
        {
            //string OPIP = Session["OPIP"].ToString();
            string EncounterDate = common.myDate(Session["EncounterDate"]).ToString("yyyy/MM/dd");
            ClearMessageControl();
            autoSaveDataInTransit(true);
            if (common.myStr(Session["OPIP"]).Equals("I"))
            {
                //RadWindowForNew.Title=
                RadWindowForNew.NavigateUrl = "~/Editor/VisitHistory.aspx?From=POPUP&DoctorId=" + Session["DoctorID"] + "&EncId=" + Session["EncounterId"] + "&OPIP=" + Session["OPIP"] + "&EncounterDate=" + EncounterDate + "&EncounterType=O&Category=PopUp";
            }
            else
            {
                RadWindowForNew.NavigateUrl = "~/Editor/WordProcessor.aspx?From=POPUP&DoctorId=" + Session["DoctorID"] + "&EncId=" + Session["EncounterId"] + "&OPIP=" + Session["OPIP"] + "&EncounterDate=" + EncounterDate + "&EncounterType=O&IsEMRPopUp=1";
            }
            RadWindowForNew.OnClientClose = "";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    //bhakti
    protected void lnkimgBtnAddReferralRequest_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/ReferralSlip.aspx?MASTER=NO&IsEMRPopUp=1";
            RadWindowForNew.Title = "Referral Request";
            RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    //bhakti 
    protected void lnkAddAdmissionAdvice_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/ATD/Booking.aspx?From=POPUP&IsEMRPopUp=1";
            RadWindowForNew.Title = "Admission Advice";
            RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnAddVitalsClose_OnClick(object sender, EventArgs e)
    {
        try
        {
            bindVitals();
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnCalculate_Click(object sender, EventArgs e)
    {
        //BaseC.EMRVitals objVital = new BaseC.EMRVitals(sConString);
        DataSet ds = new DataSet();
        StringBuilder objStr = new StringBuilder();
        ArrayList coll = new ArrayList();
        try
        {
            if (common.myLen(txtHeight.Text) > 0)
            {
                coll.Add(common.myInt(hdnHeight.Value));
                coll.Add(common.myInt(5));
                coll.Add(common.myInt(txtHeight.Text));
                coll.Add(common.myInt(0));
                coll.Add(common.myInt(0));
                objStr.Append(common.setXmlTable(ref coll));
            }
            if (common.myLen(TxtWeight.Text) > 0)
            {
                coll.Add(common.myInt(hdnWeight.Value));
                coll.Add(common.myInt(1));
                coll.Add(common.myInt(TxtWeight.Text));
                coll.Add(common.myInt(0));
                coll.Add(common.myInt(0));
                objStr.Append(common.setXmlTable(ref coll));
            }
            if (!objStr.ToString().Equals(string.Empty))
            {
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/CalculateVitalsValue";
                APIRootClass.CalculateVitalsValue objRoot = new global::APIRootClass.CalculateVitalsValue();
                objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
                objRoot.xmlString = objStr.ToString();


                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                ds = JsonConvert.DeserializeObject<DataSet>(sValue);

                //ds = objVital.CalculateVitalsValue(common.myInt(Session["HospitalLocationID"]), objStr.ToString());
                if (ds.Tables.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        if (common.myStr(ds.Tables[0].Rows[i]["DisplayName"]).Equals("BMI")
                            && !common.myStr(ds.Tables[0].Rows[i]["Value"]).Equals(string.Empty))
                        {
                            txtBMI.Text = common.myStr(ds.Tables[0].Rows[i]["Value"]);
                            hdnBMIValue.Value = common.myStr(ds.Tables[0].Rows[i]["Value"]);
                        }
                        if (common.myStr(ds.Tables[0].Rows[i]["DisplayName"]).Equals("BSA")
                            && !common.myStr(ds.Tables[0].Rows[i]["Value"]).Equals(string.Empty))
                        {
                            txtBSA.Text = common.myStr(ds.Tables[0].Rows[i]["Value"]);
                            hdnBSAValue.Value = common.myStr(ds.Tables[0].Rows[i]["Value"]);
                        }
                    }
                }
                if (common.myStr(TxtWeight.Text).Equals(string.Empty))
                {
                    TxtWeight.Focus();
                }
                else
                {
                    txtHC.Focus();
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            //objVital = null;
            ds.Dispose();
            objStr = null;
            coll = null;
        }
    }
    #endregion
    #region History
    protected void lnkAddTemplatesHistory_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            //RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3145";
            RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=5896&SingleScreenTemplateCode=HIS";
            // RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3025";
            //RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3145&SingleScreenTemplateCode=HIS";
            RadWindowForNew.Width = 650;
            RadWindowForNew.Height = 400;
            //RadWindowForNew.Top = 10;
            //RadWindowForNew.Left = 10;
            RadWindowForNew.Title = "History of Present illness";
            RadWindowForNew.OnClientClose = "addHistoryOnClientClose";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void gvHistory_OnDataBinding(object sender, GridViewRowEventArgs e)
    {
        if ((e.Row.RowType == DataControlRowType.DataRow) && (e.Row.RowState == DataControlRowState.Normal || e.Row.RowState == DataControlRowState.Edit)
            || (e.Row.RowType == DataControlRowType.DataRow) || (e.Row.RowState == DataControlRowState.Alternate))
        {
            try
            {
                HiddenField hdnTemplateName = (HiddenField)e.Row.FindControl("hdnTemplateName");
                TextBox editorHistory = (TextBox)e.Row.FindControl("editorHistory");
                editorHistory.Text = common.myStr(hdnTemplateName.Value);
                editorHistory.Enabled = !(e.Row.RowState.Equals(DataControlRowState.Normal) | e.Row.RowState.Equals(DataControlRowState.Alternate));
                editorHistory.Text = common.clearHTMLTags(editorHistory.Text);
                HiddenField hdnEncodedById = (HiddenField)e.Row.FindControl("hdnEncodedById");
                LinkButton lnkEdit = (LinkButton)e.Row.Cells[(byte)enumHistory.Edit].Controls[0];
                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    if (!common.myInt(hdnEncodedById.Value).Equals(common.myInt(Session["UserId"])))
                    {
                        lnkEdit.Visible = false;
                    }
                }
                setControlHeight(editorHistory, 125);
            }
            catch (Exception Ex)
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblMessage.Text = "Error: " + Ex.Message;
                clsExceptionLog objException = new clsExceptionLog();
                objException.HandleException(Ex);
                objException = null;
            }
        }
    }
    protected void gvHistory_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gvHistory.PageIndex = e.NewPageIndex;
        BindHistoryData("HIS");
    }
    public void BindHistoryData(string TemplateType)
    {
        BindCommonData(string.Empty, "D", TemplateType, 0, 1);
    }
    protected void lnkViewHistory_OnClik(object sender, EventArgs e)  //For View Other Notes
    {
        ClearMessageControl();
        GridViewRow row = (GridViewRow)(((LinkButton)sender).NamingContainer);
        string TemplateId = ((HiddenField)row.FindControl("hdnTemplateID")).Value;
        if (!common.myStr(TemplateId).Equals(string.Empty))
        {
            try
            {
                RadWindowForNew.NavigateUrl = "~/Editor/WordProcessorTemplateBased.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=" + common.myInt(TemplateId);
                RadWindowForNew.Width = 1200;
                RadWindowForNew.Height = 630;
                RadWindowForNew.Top = 10;
                RadWindowForNew.Left = 10;
                RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                RadWindowForNew.Modal = true;
                RadWindowForNew.VisibleStatusbar = false;
            }
            catch (Exception Ex)
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblMessage.Text = "Error: " + Ex.Message;
                clsExceptionLog objException = new clsExceptionLog();
                objException.HandleException(Ex);
                objException = null;
            }
        }
    }
    protected void lnkEditHistory_OnClik(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            GridViewRow row = (GridViewRow)(((LinkButton)sender).NamingContainer);
            string TemplateId = ((HiddenField)row.FindControl("hdnTemplateID")).Value;
            HiddenField hdnTemplateName = (HiddenField)row.FindControl("hdnTemplateName");
            HiddenField hdnRecordId = (HiddenField)row.FindControl("hdnRecordId");
            if (!common.myStr(TemplateId).Equals(string.Empty))
            {
                txtWHistory.Text = common.myStr(hdnTemplateName.Value);
                hdnHistoryRecordId.Value = common.myStr(hdnRecordId.Value);
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnBindhistory_OnClick(object sender, EventArgs e)
    {
        try
        {
            BindHistoryData("HIS");
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void gvHistory_OnRowCancelingEdit(Object sender, GridViewCancelEditEventArgs e)
    {
        gvHistory.EditIndex = -1;
        BindHistoryData("HIS");
    }
    protected void gvHistory_OnRowUpdating(Object sender, GridViewUpdateEventArgs e)
    {
        ArrayList coll = new ArrayList();
        StringBuilder strNonTabularH = new StringBuilder();
        //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);
        //Hashtable HshOut = new Hashtable();

        try
        {
            HiddenField hdnTemplateID = (HiddenField)gvHistory.Rows[e.RowIndex].FindControl("hdnTemplateID");
            HiddenField hdnRecordId = (HiddenField)gvHistory.Rows[e.RowIndex].FindControl("hdnRecordId");
            TextBox editorHistory = (TextBox)gvHistory.Rows[e.RowIndex].FindControl("editorHistory");
            if (common.myLen(editorHistory.Text) > 0)
            {
                string strHistory = common.myStr(editorHistory.Text).Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(HISFieldId);
                coll.Add("W");
                coll.Add(strHistory);
                coll.Add("0");
                coll.Add(0);
                coll.Add(common.myInt(hdnRecordId.Value));
                coll.Add(HISSectionId);
                strNonTabularH.Append(common.setXmlTable(ref coll));
            }
            if (common.myLen(strNonTabularH.ToString()) >= 1)
            {
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SaveSingleScreenDashboard";
                APIRootClass.SaveSingleScreenDashboard objRoot = new global::APIRootClass.SaveSingleScreenDashboard();
                objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
                objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
                objRoot.EncounterId = common.myInt(Session["EncounterId"]);
                objRoot.FacilityId = common.myInt(Session["FacilityId"]);
                objRoot.DoctorId = common.myInt(Session["DoctorID"]);
                objRoot.UserId = common.myInt(Session["UserId"]);
                objRoot.xmlProblemDetails = string.Empty;
                objRoot.sProvisionalDiagnosis = string.Empty;
                objRoot.xmlVitalString = string.Empty;
                objRoot.strXMLDrug = string.Empty;
                objRoot.strXMLOther = string.Empty;
                objRoot.ProvisionalDiagnosisId = 0;
                objRoot.DiagnosisSearchId = 0;
                objRoot.bitNKDA = 0;
                objRoot.xmlTemplateDetails = strNonTabularH.ToString();
                objRoot.iSign = 0;
                objRoot.xmlNonDrugOrder = string.Empty;


                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);

                if (sValue.ToUpper().Contains(" UPDATED") || sValue.ToUpper().Contains(" SAVED"))
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblMessage.Text = sValue;
                    lblHistoryMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblHistoryMessage.Text = sValue;
                }
                //HshOut = objEMR.SaveSingleScreenDashboard(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]),
                //                       common.myInt(Session["EncounterId"]), common.myInt(Session["FacilityId"]), common.myInt(Session["DoctorID"]),
                //                       common.myInt(Session["UserId"]), string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, 0, 0, 0, strNonTabularH.ToString(), 0, string.Empty);
            }
            gvHistory.EditIndex = -1;
            BindHistoryData("HIS");

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            coll = null;
            strNonTabularH = null;
            //objEMR = null;
            //HshOut = null;
        }
    }
    protected void gvHistory_OnRowEditing(Object sender, GridViewEditEventArgs e)
    {
        if (!common.myBool(ViewState["EditEnable"]) && !common.myBool(Session["isEMRSuperUser"]))
        {
            Alert.ShowAjaxMsg("You are not authorized to Edit", Page);
            return;
        }
        else if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE") && !common.myBool(Session["isEMRSuperUser"]))
        {
            return;
        }
        else
        {
            GridViewRow row = gvHistory.Rows[e.NewEditIndex];
            HiddenField hdnEncodedById = (HiddenField)row.Cells[0].FindControl("hdnEncodedById");
            if (common.myInt(hdnEncodedById.Value) > 0)
            {
                gvHistory.EditIndex = e.NewEditIndex;
                BindHistoryData("HIS");
            }
        }
    }
    #endregion
    #region Previous Treatment
    protected void btnPreviousTreatmentClose_OnClick(object sender, EventArgs e)
    {
        try
        {
            BindOtherNotes("ALL");
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void lnkPreviousTreatment_OnClick(object sender, EventArgs e)//Previous Treatment
    {
        try
        {
            ClearMessageControl();
            RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3146";
            RadWindowForNew.Width = 1200;
            RadWindowForNew.Height = 630;
            RadWindowForNew.Top = 10;
            RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addPreviousTreatmentOnClientClose";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Maximize;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void gvPrevTreatment_OnDataBinding(object sender, GridViewRowEventArgs e)
    {
        if ((e.Row.RowType == DataControlRowType.DataRow) && (e.Row.RowState == DataControlRowState.Normal || e.Row.RowState == DataControlRowState.Edit)
            || (e.Row.RowType == DataControlRowType.DataRow) || (e.Row.RowState == DataControlRowState.Alternate))
        {
            try
            {
                HiddenField hdnTemplateName = (HiddenField)e.Row.FindControl("hdnTemplateName");
                TextBox editorPrevTreatment = (TextBox)e.Row.FindControl("editorPrevTreatment");
                editorPrevTreatment.Text = common.myStr(hdnTemplateName.Value);
                editorPrevTreatment.Enabled = !(e.Row.RowState.Equals(DataControlRowState.Normal) | e.Row.RowState.Equals(DataControlRowState.Alternate));
                editorPrevTreatment.Text = common.clearHTMLTags(editorPrevTreatment.Text);
                HiddenField hdnEncodedById = (HiddenField)e.Row.FindControl("hdnEncodedById");
                LinkButton lnkEdit = (LinkButton)e.Row.Cells[(byte)enumPrevTreatment.Edit].Controls[0];
                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    if (!common.myInt(hdnEncodedById.Value).Equals(common.myInt(Session["UserId"])))
                    {
                        lnkEdit.Visible = false;
                    }
                }
                setControlHeight(editorPrevTreatment, 125);
            }
            catch (Exception Ex)
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblMessage.Text = "Error: " + Ex.Message;
                clsExceptionLog objException = new clsExceptionLog();
                objException.HandleException(Ex);
                objException = null;
            }
        }
    }
    protected void gvPrevTreatment_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gvPrevTreatment.PageIndex = e.NewPageIndex;
        BindPreviousTreatmentData("PT");
    }
    public void BindPreviousTreatmentData(string TemplateType)
    {
        BindCommonData(string.Empty, "D", TemplateType, 0, 1);
    }
    protected void lnkViewPrevTreatment_OnClik(object sender, EventArgs e)  //For View Other Notes
    {
        ClearMessageControl();
        GridViewRow row = (GridViewRow)(((LinkButton)sender).NamingContainer);
        string TemplateId = ((HiddenField)row.FindControl("hdnTemplateID")).Value;
        if (!common.myStr(TemplateId).Equals(string.Empty))
        {
            try
            {
                RadWindowForNew.NavigateUrl = "~/Editor/WordProcessorTemplateBased.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=" + common.myInt(TemplateId);
                RadWindowForNew.Width = 1200;
                RadWindowForNew.Height = 630;
                RadWindowForNew.Top = 10;
                RadWindowForNew.Left = 10;
                RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                RadWindowForNew.Modal = true;
                RadWindowForNew.VisibleStatusbar = false;
            }
            catch (Exception Ex)
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblMessage.Text = "Error: " + Ex.Message;
                clsExceptionLog objException = new clsExceptionLog();
                objException.HandleException(Ex);
                objException = null;
            }
        }
    }
    protected void lnkEditPrevTreatment_OnClik(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            GridViewRow row = (GridViewRow)(((LinkButton)sender).NamingContainer);
            string TemplateId = ((HiddenField)row.FindControl("hdnTemplateID")).Value;
            HiddenField hdnTemplateName = (HiddenField)row.FindControl("hdnTemplateName");
            HiddenField hdnRecordId = (HiddenField)row.FindControl("hdnRecordId");
            if (!common.myStr(TemplateId).Equals(string.Empty))
            {
                txtWPrevTreatment.Text = common.myStr(hdnTemplateName.Value);
                hdnPreviousTreatmentRecordId.Value = common.myStr(hdnRecordId.Value);
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void gvPrevTreatment_OnRowCancelingEdit(Object sender, GridViewCancelEditEventArgs e)
    {
        gvPrevTreatment.EditIndex = -1;
        BindPreviousTreatmentData("PT");
    }
    protected void gvPrevTreatment_OnRowUpdating(Object sender, GridViewUpdateEventArgs e)
    {
        ArrayList coll = new ArrayList();
        StringBuilder strNonTabularH = new StringBuilder();
        //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);
        //Hashtable HshOut = new Hashtable();

        try
        {
            HiddenField hdnTemplateID = (HiddenField)gvPrevTreatment.Rows[e.RowIndex].FindControl("hdnTemplateID");
            HiddenField hdnRecordId = (HiddenField)gvPrevTreatment.Rows[e.RowIndex].FindControl("hdnRecordId");
            TextBox editorPrevTreatment = (TextBox)gvPrevTreatment.Rows[e.RowIndex].FindControl("editorPrevTreatment");
            if (common.myLen(editorPrevTreatment.Text) > 0)
            {
                string strPreTre = common.myStr(editorPrevTreatment.Text).Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(PTFieldId);
                coll.Add("W");
                coll.Add(strPreTre);
                coll.Add("0");
                coll.Add(0);
                coll.Add(common.myInt(hdnRecordId.Value));
                coll.Add(PTSectionId);
                strNonTabularH.Append(common.setXmlTable(ref coll));
            }
            if (common.myLen(strNonTabularH.ToString()) >= 1)
            {
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SaveSingleScreenDashboard";
                APIRootClass.SaveSingleScreenDashboard objRoot = new global::APIRootClass.SaveSingleScreenDashboard();
                objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
                objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
                objRoot.EncounterId = common.myInt(Session["EncounterId"]);
                objRoot.FacilityId = common.myInt(Session["FacilityId"]);
                objRoot.DoctorId = common.myInt(Session["DoctorID"]);
                objRoot.UserId = common.myInt(Session["UserId"]);
                objRoot.xmlProblemDetails = string.Empty;
                objRoot.sProvisionalDiagnosis = string.Empty;
                objRoot.xmlVitalString = string.Empty;
                objRoot.strXMLDrug = string.Empty;
                objRoot.strXMLOther = string.Empty;
                objRoot.ProvisionalDiagnosisId = 0;
                objRoot.DiagnosisSearchId = 0;
                objRoot.bitNKDA = 0;
                objRoot.xmlTemplateDetails = strNonTabularH.ToString();
                objRoot.iSign = 0;
                objRoot.xmlNonDrugOrder = string.Empty;


                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                if (sValue.ToUpper().Contains(" UPDATED") || sValue.ToUpper().Contains(" SAVED"))
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblMessage.Text = sValue;
                    lblPrevTreatmentMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblPrevTreatmentMessage.Text = sValue;
                }
                //HshOut = objEMR.SaveSingleScreenDashboard(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]),
                //                       common.myInt(Session["EncounterId"]), common.myInt(Session["FacilityId"]), common.myInt(Session["DoctorID"]),
                //                       common.myInt(Session["UserId"]), string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, 0, 0, 0, strNonTabularH.ToString(), 0, string.Empty);
            }
            gvPrevTreatment.EditIndex = -1;
            BindPreviousTreatmentData("PT");

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            coll = null;
            strNonTabularH = null;
            //objEMR = null;
            //HshOut = null;
        }
    }
    protected void gvPrevTreatment_OnRowEditing(Object sender, GridViewEditEventArgs e)
    {
        if (!common.myBool(ViewState["EditEnable"]) && !common.myBool(Session["isEMRSuperUser"]))
        {
            Alert.ShowAjaxMsg("You are not authorized to Edit", Page);
            return;
        }
        else if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE") && !common.myBool(Session["isEMRSuperUser"]))
        {
            return;
        }
        else
        {
            GridViewRow row = gvPrevTreatment.Rows[e.NewEditIndex];
            HiddenField hdnEncodedById = (HiddenField)row.Cells[0].FindControl("hdnEncodedById");
            if (common.myInt(hdnEncodedById.Value) > 0)
            {
                gvPrevTreatment.EditIndex = e.NewEditIndex;
                BindPreviousTreatmentData("PT");
            }
        }
    }
    #endregion
    #region Examination
    protected void gvExamination_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gvExamination.PageIndex = e.NewPageIndex;
        BindExaminationData("EXM");
    }
    protected void lnkViewExamination_OnClik(object sender, EventArgs e)  //For View Other Notes
    {
        ClearMessageControl();
        GridViewRow row = (GridViewRow)(((LinkButton)sender).NamingContainer);
        string TemplateId = ((HiddenField)row.FindControl("hdnTemplateID")).Value;
        if (!common.myStr(TemplateId).Equals(string.Empty))
        {
            try
            {
                RadWindowForNew.NavigateUrl = "~/Editor/WordProcessorTemplateBased.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=" + common.myInt(TemplateId);
                RadWindowForNew.Width = 1200;
                RadWindowForNew.Height = 630;
                RadWindowForNew.Top = 10;
                RadWindowForNew.Left = 10;
                RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                RadWindowForNew.Modal = true;
                RadWindowForNew.VisibleStatusbar = false;
            }
            catch (Exception Ex)
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblMessage.Text = "Error: " + Ex.Message;
                clsExceptionLog objException = new clsExceptionLog();
                objException.HandleException(Ex);
                objException = null;
            }
        }
    }
    protected void lnkEditExamination_OnClik(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            GridViewRow row = (GridViewRow)(((LinkButton)sender).NamingContainer);
            string TemplateId = ((HiddenField)row.FindControl("hdnTemplateID")).Value;
            HiddenField hdnTemplateName = (HiddenField)row.FindControl("hdnTemplateName");
            HiddenField hdnRecordId = (HiddenField)row.FindControl("hdnRecordId");
            if (!common.myStr(TemplateId).Equals(string.Empty))
            {
                txtWExamination.Text = common.myStr(hdnTemplateName.Value);
                hdnExaminationRecordId.Value = common.myStr(hdnRecordId.Value);
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    public void BindExaminationData(string TemplateType)
    {
        BindCommonData(string.Empty, "D", TemplateType, 0, 1);
    }
    protected void gvExamination_OnDataBinding(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if ((e.Row.RowType == DataControlRowType.DataRow) && (e.Row.RowState == DataControlRowState.Normal || e.Row.RowState == DataControlRowState.Edit)
                || (e.Row.RowType == DataControlRowType.DataRow) || (e.Row.RowState == DataControlRowState.Alternate))
            {
                HiddenField hdnTemplateName = (HiddenField)e.Row.FindControl("hdnTemplateName");
                TextBox editorExamination = (TextBox)e.Row.FindControl("editorExamination");
                editorExamination.Text = common.myStr(hdnTemplateName.Value);
                editorExamination.Enabled = !(e.Row.RowState.Equals(DataControlRowState.Normal) | e.Row.RowState.Equals(DataControlRowState.Alternate));
                editorExamination.Text = common.clearHTMLTags(editorExamination.Text);
                HiddenField hdnEncodedById = (HiddenField)e.Row.FindControl("hdnEncodedById");
                LinkButton lnkEdit = (LinkButton)e.Row.Cells[(byte)enumExamination.Edit].Controls[0];
                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    if (!common.myInt(hdnEncodedById.Value).Equals(common.myInt(Session["UserId"])))
                    {
                        lnkEdit.Visible = false;
                    }
                }
                setControlHeight(editorExamination, 125);
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void lnkAddTemplates_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3140&&SingleScreenTemplateCode=EXM";
            //RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3140&SingleScreenTemplateCode=EXM";
            //RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3140&SingleScreenTemplateCode=EXM";
            RadWindowForNew.Width = 650;
            RadWindowForNew.Height = 400;
            //RadWindowForNew.Top = 10;
            //RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addTemplatesOnClientClose";
            RadWindowForNew.Title = "Examination";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnAddTemplatesClose_OnClick(object sender, EventArgs e)
    {
        try
        {
            BindExaminationData("EXM");
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void gvExamination_OnRowCancelingEdit(Object sender, GridViewCancelEditEventArgs e)
    {
        gvExamination.EditIndex = -1;
        BindExaminationData("EXM");
    }
    protected void gvExamination_OnRowUpdating(Object sender, GridViewUpdateEventArgs e)
    {
        ArrayList coll = new ArrayList();
        StringBuilder strNonTabularH = new StringBuilder();
        //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);
        //Hashtable HshOut = new Hashtable();

        try
        {
            HiddenField hdnTemplateID = (HiddenField)gvExamination.Rows[e.RowIndex].FindControl("hdnTemplateID");
            HiddenField hdnRecordId = (HiddenField)gvExamination.Rows[e.RowIndex].FindControl("hdnRecordId");
            TextBox editorExamination = (TextBox)gvExamination.Rows[e.RowIndex].FindControl("editorExamination");
            if (common.myLen(editorExamination.Text) > 0)
            {
                string strExamination = common.myStr(editorExamination.Text).Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(EXMFieldId);
                coll.Add("W");
                coll.Add(strExamination);
                coll.Add("0");
                coll.Add(0);
                coll.Add(common.myInt(hdnRecordId.Value));
                coll.Add(EXMSectionId);
                strNonTabularH.Append(common.setXmlTable(ref coll));
            }
            if (common.myLen(strNonTabularH.ToString()) >= 1)
            {
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SaveSingleScreenDashboard";
                APIRootClass.SaveSingleScreenDashboard objRoot = new global::APIRootClass.SaveSingleScreenDashboard();
                objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
                objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
                objRoot.EncounterId = common.myInt(Session["EncounterId"]);
                objRoot.FacilityId = common.myInt(Session["FacilityId"]);
                objRoot.DoctorId = common.myInt(Session["DoctorID"]);
                objRoot.UserId = common.myInt(Session["UserId"]);
                objRoot.xmlProblemDetails = string.Empty;
                objRoot.sProvisionalDiagnosis = string.Empty;
                objRoot.xmlVitalString = string.Empty;
                objRoot.strXMLDrug = string.Empty;
                objRoot.strXMLOther = string.Empty;
                objRoot.ProvisionalDiagnosisId = 0;
                objRoot.DiagnosisSearchId = 0;
                objRoot.bitNKDA = 0;
                objRoot.xmlTemplateDetails = strNonTabularH.ToString();
                objRoot.iSign = 0;
                objRoot.xmlNonDrugOrder = string.Empty;


                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                if (sValue.ToUpper().Contains(" UPDATED") || sValue.ToUpper().Contains(" SAVED"))
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblMessage.Text = sValue;
                    lblExamMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblExamMessage.Text = sValue;
                }
                //HshOut = objEMR.SaveSingleScreenDashboard(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]),
                //                       common.myInt(Session["EncounterId"]), common.myInt(Session["FacilityId"]), common.myInt(Session["DoctorID"]),
                //                       common.myInt(Session["UserId"]), string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, 0, 0, 0, strNonTabularH.ToString(), 0, string.Empty);
            }
            gvExamination.EditIndex = -1;
            BindExaminationData("EXM");

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            coll = null;
            strNonTabularH = null;
            //objEMR = null;
            //HshOut = null;
        }
    }
    protected void gvExamination_OnRowEditing(Object sender, GridViewEditEventArgs e)
    {
        try
        {
            if (!common.myBool(ViewState["EditEnable"]) && !common.myBool(Session["isEMRSuperUser"]))
            {
                Alert.ShowAjaxMsg("You are not authorized to Edit", Page);
                return;
            }
            else if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE") && !common.myBool(Session["isEMRSuperUser"]))
            {
                return;
            }
            else
            {
                GridViewRow row = gvExamination.Rows[e.NewEditIndex];
                HiddenField hdnEncodedById = (HiddenField)row.Cells[0].FindControl("hdnEncodedById");
                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    gvExamination.EditIndex = e.NewEditIndex;
                    BindExaminationData("EXM");
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    #endregion
    #region Nutritional Status
    protected void lnkNutritionalStatus_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3147";
            RadWindowForNew.Width = 1200;
            RadWindowForNew.Height = 630;
            RadWindowForNew.Top = 10;
            RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addNutritionalStatusOnClientClose";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Maximize;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnNutritionalStatusClose_OnClick(object sender, EventArgs e)
    {
        try
        {
            BindNutritionalData("NS");
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    public void BindNutritionalData(string TemplateType)
    {
        BindCommonData(string.Empty, "D", TemplateType, 0, 1);
    }
    protected void gvNutritional_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gvNutritional.PageIndex = e.NewPageIndex;
        BindNutritionalData("NS");
    }
    protected void lnkViewNutritional_OnClik(object sender, EventArgs e)  //For View Other Notes
    {
        ClearMessageControl();
        GridViewRow row = (GridViewRow)(((LinkButton)sender).NamingContainer);
        string TemplateId = ((HiddenField)row.FindControl("hdnTemplateID")).Value;
        if (!common.myStr(TemplateId).Equals(string.Empty))
        {
            try
            {
                RadWindowForNew.NavigateUrl = "~/Editor/WordProcessorTemplateBased.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=" + common.myInt(TemplateId);
                RadWindowForNew.Width = 1200;
                RadWindowForNew.Height = 630;
                RadWindowForNew.Top = 10;
                RadWindowForNew.Left = 10;
                RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                RadWindowForNew.Modal = true;
                RadWindowForNew.VisibleStatusbar = false;
            }
            catch (Exception Ex)
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblMessage.Text = "Error: " + Ex.Message;
                clsExceptionLog objException = new clsExceptionLog();
                objException.HandleException(Ex);
                objException = null;
            }
        }
    }
    protected void lnkEditNutritional_OnClik(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            GridViewRow row = (GridViewRow)(((LinkButton)sender).NamingContainer);
            string TemplateId = ((HiddenField)row.FindControl("hdnTemplateID")).Value;
            HiddenField hdnTemplateName = (HiddenField)row.FindControl("hdnTemplateName");
            HiddenField hdnRecordId = (HiddenField)row.FindControl("hdnRecordId");
            if (!common.myStr(TemplateId).Equals(string.Empty))
            {
                txtWNutritionalStatus.Text = common.myStr(hdnTemplateName.Value);
                hdnNutritionalStatusRecordId.Value = common.myStr(hdnRecordId.Value);
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void gvNutritional_OnDataBinding(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if ((e.Row.RowType == DataControlRowType.DataRow) && (e.Row.RowState == DataControlRowState.Normal || e.Row.RowState == DataControlRowState.Edit)
                || (e.Row.RowType == DataControlRowType.DataRow) || (e.Row.RowState == DataControlRowState.Alternate))
            {
                HiddenField hdnTemplateName = (HiddenField)e.Row.FindControl("hdnTemplateName");
                TextBox editorNutritional = (TextBox)e.Row.FindControl("editorNutritional");
                editorNutritional.Text = common.myStr(hdnTemplateName.Value);
                editorNutritional.Enabled = !(e.Row.RowState.Equals(DataControlRowState.Normal) | e.Row.RowState.Equals(DataControlRowState.Alternate));
                editorNutritional.Text = common.clearHTMLTags(editorNutritional.Text);
                HiddenField hdnEncodedById = (HiddenField)e.Row.FindControl("hdnEncodedById");
                LinkButton lnkEdit = (LinkButton)e.Row.Cells[(byte)enumNutritional.Edit].Controls[0];
                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    if (!common.myInt(hdnEncodedById.Value).Equals(common.myInt(Session["UserId"])))
                    {
                        lnkEdit.Visible = false;
                    }
                }
                setControlHeight(editorNutritional, 125);
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void gvNutritional_OnRowCancelingEdit(Object sender, GridViewCancelEditEventArgs e)
    {
        gvNutritional.EditIndex = -1;
        BindNutritionalData("NS");
    }
    protected void gvNutritional_OnRowUpdating(Object sender, GridViewUpdateEventArgs e)
    {
        ArrayList coll = new ArrayList();
        StringBuilder strNonTabularH = new StringBuilder();
        //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);
        //Hashtable HshOut = new Hashtable();

        try
        {
            HiddenField hdnTemplateID = (HiddenField)gvNutritional.Rows[e.RowIndex].FindControl("hdnTemplateID");
            HiddenField hdnRecordId = (HiddenField)gvNutritional.Rows[e.RowIndex].FindControl("hdnRecordId");
            TextBox editorNutritional = (TextBox)gvNutritional.Rows[e.RowIndex].FindControl("editorNutritional");
            if (common.myLen(editorNutritional.Text) > 0)
            {
                string strNutritional = common.myStr(editorNutritional.Text).Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(NSFieldId);
                coll.Add("W");
                coll.Add(strNutritional);
                coll.Add("0");
                coll.Add(0);
                coll.Add(common.myInt(hdnRecordId.Value));
                coll.Add(NSSectionId);
                strNonTabularH.Append(common.setXmlTable(ref coll));
            }
            if (common.myLen(strNonTabularH.ToString()) >= 1)
            {
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SaveSingleScreenDashboard";
                APIRootClass.SaveSingleScreenDashboard objRoot = new global::APIRootClass.SaveSingleScreenDashboard();
                objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
                objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
                objRoot.EncounterId = common.myInt(Session["EncounterId"]);
                objRoot.FacilityId = common.myInt(Session["FacilityId"]);
                objRoot.DoctorId = common.myInt(Session["DoctorID"]);
                objRoot.UserId = common.myInt(Session["UserId"]);
                objRoot.xmlProblemDetails = string.Empty;
                objRoot.sProvisionalDiagnosis = string.Empty;
                objRoot.xmlVitalString = string.Empty;
                objRoot.strXMLDrug = string.Empty;
                objRoot.strXMLOther = string.Empty;
                objRoot.ProvisionalDiagnosisId = 0;
                objRoot.DiagnosisSearchId = 0;
                objRoot.bitNKDA = 0;
                objRoot.xmlTemplateDetails = strNonTabularH.ToString();
                objRoot.iSign = 0;
                objRoot.xmlNonDrugOrder = string.Empty;


                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                if (sValue.ToUpper().Contains(" UPDATED") || sValue.ToUpper().Contains(" SAVED"))
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblMessage.Text = sValue;
                    lblNutritionalStatusMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblNutritionalStatusMessage.Text = sValue;
                }
                //HshOut = objEMR.SaveSingleScreenDashboard(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]),
                //                       common.myInt(Session["EncounterId"]), common.myInt(Session["FacilityId"]), common.myInt(Session["DoctorID"]),
                //                       common.myInt(Session["UserId"]), string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, 0, 0, 0, strNonTabularH.ToString(), 0, string.Empty);
            }
            gvNutritional.EditIndex = -1;
            BindNutritionalData("NS");

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            coll = null;
            strNonTabularH = null;
            //objEMR = null;
            //HshOut = null;
        }
    }
    protected void gvNutritional_OnRowEditing(Object sender, GridViewEditEventArgs e)
    {
        try
        {
            if (!common.myBool(ViewState["EditEnable"]) && !common.myBool(Session["isEMRSuperUser"]))
            {
                Alert.ShowAjaxMsg("You are not authorized to Edit", Page);
                return;
            }
            else if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE") && !common.myBool(Session["isEMRSuperUser"]))
            {
                return;
            }
            else
            {
                GridViewRow row = gvNutritional.Rows[e.NewEditIndex];
                HiddenField hdnEncodedById = (HiddenField)row.Cells[0].FindControl("hdnEncodedById");
                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    gvNutritional.EditIndex = e.NewEditIndex;
                    BindNutritionalData("NS");
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    #endregion
    #region Plan Of Care
    protected void gvPlanOfCare_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gvPlanOfCare.PageIndex = e.NewPageIndex;
        BindPlanOfCareData("POC");
    }
    protected void lnkViewPlanOfCare_OnClik(object sender, EventArgs e)  //For View Other Notes
    {
        try
        {
            ClearMessageControl();
            GridViewRow row = (GridViewRow)(((LinkButton)sender).NamingContainer);
            string TemplateId = ((HiddenField)row.FindControl("hdnTemplateID")).Value;
            if (!common.myStr(TemplateId).Equals(string.Empty))
            {
                try
                {
                    RadWindowForNew.NavigateUrl = "~/Editor/WordProcessorTemplateBased.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=" + common.myInt(TemplateId);
                    RadWindowForNew.Width = 1200;
                    RadWindowForNew.Height = 630;
                    RadWindowForNew.Top = 10;
                    RadWindowForNew.Left = 10;
                    RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                    RadWindowForNew.Modal = true;
                    RadWindowForNew.VisibleStatusbar = false;
                }
                catch (Exception Ex)
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                    lblMessage.Text = "Error: " + Ex.Message;
                    clsExceptionLog objException = new clsExceptionLog();
                    objException.HandleException(Ex);
                    objException = null;
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void lnkEditPlanOfCare_OnClik(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            GridViewRow row = (GridViewRow)(((LinkButton)sender).NamingContainer);
            string TemplateId = ((HiddenField)row.FindControl("hdnTemplateID")).Value;
            HiddenField hdnTemplateName = (HiddenField)row.FindControl("hdnTemplateName");
            HiddenField hdnRecordId = (HiddenField)row.FindControl("hdnRecordId");
            if (!common.myStr(TemplateId).Equals(string.Empty))
            {
                txtWPlanOfCare.Text = common.myStr(hdnTemplateName.Value);
                hdnPlanOfCareRecordId.Value = common.myStr(hdnRecordId.Value);
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void lnkPlanOfCare_OnClick(object sender, EventArgs e)//Previous Treatment
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=5895&SingleScreenTemplateCode=OTH";
            RadWindowForNew.Width = 650;
            RadWindowForNew.Height = 500;
            //RadWindowForNew.Top = 10;
            //RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addPlanOfCareOnClientClose";
            RadWindowForNew.Title = "Plan of care";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnPlanOfCareClose_OnClick(object sender, EventArgs e)
    {
        try
        {
            BindPlanOfCareData("POC");
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    public void BindPlanOfCareData(string TemplateType)
    {
        BindCommonData(string.Empty, "D", TemplateType, 0, 1);
    }
    protected void gvPlanOfCare_OnDataBinding(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if ((e.Row.RowType == DataControlRowType.DataRow) && (e.Row.RowState == DataControlRowState.Normal || e.Row.RowState == DataControlRowState.Edit)
                || (e.Row.RowType == DataControlRowType.DataRow) || (e.Row.RowState == DataControlRowState.Alternate))
            {
                HiddenField hdnTemplateName = (HiddenField)e.Row.FindControl("hdnTemplateName");
                TextBox editorPlanOfCare = (TextBox)e.Row.FindControl("editorPlanOfCare");
                editorPlanOfCare.Text = common.myStr(hdnTemplateName.Value);
                editorPlanOfCare.Enabled = !(e.Row.RowState.Equals(DataControlRowState.Normal) | e.Row.RowState.Equals(DataControlRowState.Alternate));
                editorPlanOfCare.Text = common.clearHTMLTags(editorPlanOfCare.Text);
                HiddenField hdnEncodedById = (HiddenField)e.Row.FindControl("hdnEncodedById");
                LinkButton lnkEdit = (LinkButton)e.Row.Cells[(byte)enumPlanOfCare.Edit].Controls[0];
                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    if (!common.myInt(hdnEncodedById.Value).Equals(common.myInt(Session["UserId"])))
                    {
                        lnkEdit.Visible = false;
                    }
                }
                setControlHeight(editorPlanOfCare, 125);
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void gvPlanOfCare_OnRowCancelingEdit(Object sender, GridViewCancelEditEventArgs e)
    {
        gvPlanOfCare.EditIndex = -1;
        BindPlanOfCareData("POC");
    }
    protected void gvPlanOfCare_OnRowUpdating(Object sender, GridViewUpdateEventArgs e)
    {
        ArrayList coll = new ArrayList();
        StringBuilder strNonTabularH = new StringBuilder();
        //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);
        //Hashtable HshOut = new Hashtable();

        try
        {
            HiddenField hdnTemplateID = (HiddenField)gvPlanOfCare.Rows[e.RowIndex].FindControl("hdnTemplateID");
            HiddenField hdnRecordId = (HiddenField)gvPlanOfCare.Rows[e.RowIndex].FindControl("hdnRecordId");
            TextBox editorPlanOfCare = (TextBox)gvPlanOfCare.Rows[e.RowIndex].FindControl("editorPlanOfCare");
            if (common.myLen(editorPlanOfCare.Text) > 0)
            {
                string strPlanOfCare = common.myStr(editorPlanOfCare.Text).Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(POCFieldId);
                coll.Add("W");
                coll.Add(strPlanOfCare);
                coll.Add("0");
                coll.Add(0);
                coll.Add(common.myInt(hdnRecordId.Value));
                coll.Add(POCSectionId);
                strNonTabularH.Append(common.setXmlTable(ref coll));
            }

            if (common.myLen(strNonTabularH.ToString()) >= 1)
            {
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SaveSingleScreenDashboard";
                APIRootClass.SaveSingleScreenDashboard objRoot = new global::APIRootClass.SaveSingleScreenDashboard();
                objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
                objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
                objRoot.EncounterId = common.myInt(Session["EncounterId"]);
                objRoot.FacilityId = common.myInt(Session["FacilityId"]);
                objRoot.DoctorId = common.myInt(Session["DoctorID"]);
                objRoot.UserId = common.myInt(Session["UserId"]);
                objRoot.xmlProblemDetails = string.Empty;
                objRoot.sProvisionalDiagnosis = string.Empty;
                objRoot.xmlVitalString = string.Empty;
                objRoot.strXMLDrug = string.Empty;
                objRoot.strXMLOther = string.Empty;
                objRoot.ProvisionalDiagnosisId = 0;
                objRoot.DiagnosisSearchId = 0;
                objRoot.bitNKDA = 0;
                objRoot.xmlTemplateDetails = strNonTabularH.ToString();
                objRoot.iSign = 0;
                objRoot.xmlNonDrugOrder = string.Empty;


                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                if (sValue.ToUpper().Contains(" UPDATED") || sValue.ToUpper().Contains(" SAVED"))
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblMessage.Text = sValue;
                    lblPlanOfCareMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblPlanOfCareMessage.Text = sValue;
                }
                //HshOut = objEMR.SaveSingleScreenDashboard(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]),
                //                       common.myInt(Session["EncounterId"]), common.myInt(Session["FacilityId"]), common.myInt(Session["DoctorID"]),
                //                       common.myInt(Session["UserId"]), string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, 0, 0, 0, strNonTabularH.ToString(), 0, string.Empty);
            }
            gvPlanOfCare.EditIndex = -1;
            BindPlanOfCareData("POC");

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            coll = null;
            strNonTabularH = null;
            //objEMR = null;
        }
    }
    protected void gvPlanOfCare_OnRowEditing(Object sender, GridViewEditEventArgs e)
    {
        try
        {
            if (!common.myBool(ViewState["EditEnable"]) && !common.myBool(Session["isEMRSuperUser"]))
            {
                Alert.ShowAjaxMsg("You are not authorized to Edit", Page);
                return;
            }
            else if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE") && !common.myBool(Session["isEMRSuperUser"]))
            {
                return;
            }
            else
            {
                GridViewRow row = gvPlanOfCare.Rows[e.NewEditIndex];
                HiddenField hdnEncodedById = (HiddenField)row.Cells[0].FindControl("hdnEncodedById");
                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    gvPlanOfCare.EditIndex = e.NewEditIndex;
                    BindPlanOfCareData("POC");
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    #endregion
    #region Cost Analysis
    protected void lnkCostAnalysis_OnClick(object sender, EventArgs e)//Previous Treatment
    {
        try
        {
            ClearMessageControl();
            RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3142";
            RadWindowForNew.Width = 1200;
            RadWindowForNew.Height = 630;
            RadWindowForNew.Top = 10;
            RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addCostAnalysisOnClientClose";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Maximize;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnCostAnalysisClose_OnClick(object sender, EventArgs e)
    {
        try
        {
            BindCostAnalysisData("CA");
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    public void BindCostAnalysisData(string TemplateType)
    {
        BindCommonData(string.Empty, "D", TemplateType, 0, 1);
    }
    protected void lnkViewCostAnalysis_OnClik(object sender, EventArgs e)  //For View Other Notes
    {
        ClearMessageControl();
        GridViewRow row = (GridViewRow)(((LinkButton)sender).NamingContainer);
        string TemplateId = ((HiddenField)row.FindControl("hdnTemplateID")).Value;
        if (!common.myStr(TemplateId).Equals(string.Empty))
        {
            try
            {
                RadWindowForNew.NavigateUrl = "~/Editor/WordProcessorTemplateBased.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=" + common.myInt(TemplateId);
                RadWindowForNew.Width = 1200;
                RadWindowForNew.Height = 630;
                RadWindowForNew.Top = 10;
                RadWindowForNew.Left = 10;
                RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                RadWindowForNew.Modal = true;
                RadWindowForNew.VisibleStatusbar = false;
            }
            catch (Exception Ex)
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblMessage.Text = "Error: " + Ex.Message;
                clsExceptionLog objException = new clsExceptionLog();
                objException.HandleException(Ex);
                objException = null;
            }
        }
    }
    protected void lnkEditCostAnalysis_OnClik(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            GridViewRow row = (GridViewRow)(((LinkButton)sender).NamingContainer);
            string TemplateId = ((HiddenField)row.FindControl("hdnTemplateID")).Value;
            HiddenField hdnTemplateName = (HiddenField)row.FindControl("hdnTemplateName");
            HiddenField hdnRecordId = (HiddenField)row.FindControl("hdnRecordId");
            if (!common.myStr(TemplateId).Equals(string.Empty))
            {
                txtWCostAnalysis.Text = common.myStr(hdnTemplateName.Value);
                hdnCostAnalysisRecordId.Value = common.myStr(hdnRecordId.Value);
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void gvCostAnalysis_OnDataBinding(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if ((e.Row.RowType == DataControlRowType.DataRow) && (e.Row.RowState == DataControlRowState.Normal || e.Row.RowState == DataControlRowState.Edit)
                || (e.Row.RowType == DataControlRowType.DataRow) || (e.Row.RowState == DataControlRowState.Alternate))
            {
                HiddenField hdnTemplateName = (HiddenField)e.Row.FindControl("hdnTemplateName");
                TextBox editorCostAnalysis = (TextBox)e.Row.FindControl("editorCostAnalysis");
                editorCostAnalysis.Text = common.myStr(hdnTemplateName.Value);
                editorCostAnalysis.Enabled = !(e.Row.RowState.Equals(DataControlRowState.Normal) | e.Row.RowState.Equals(DataControlRowState.Alternate));
                editorCostAnalysis.Text = common.clearHTMLTags(editorCostAnalysis.Text);
                HiddenField hdnEncodedById = (HiddenField)e.Row.FindControl("hdnEncodedById");
                LinkButton lnkEdit = (LinkButton)e.Row.Cells[(byte)enumCostAnalysis.Edit].Controls[0];
                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    if (!common.myInt(hdnEncodedById.Value).Equals(common.myInt(Session["UserId"])))
                    {
                        lnkEdit.Visible = false;
                    }
                }
                setControlHeight(editorCostAnalysis, 125);
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void gvCostAnalysis_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gvCostAnalysis.PageIndex = e.NewPageIndex;
        BindCostAnalysisData("CA");
    }
    protected void gvCostAnalysis_OnRowCancelingEdit(Object sender, GridViewCancelEditEventArgs e)
    {
        gvCostAnalysis.EditIndex = -1;
        BindCostAnalysisData("CA");
    }
    protected void gvCostAnalysis_OnRowUpdating(Object sender, GridViewUpdateEventArgs e)
    {
        ArrayList coll = new ArrayList();
        StringBuilder strNonTabularH = new StringBuilder();
        //Hashtable HshOut = new Hashtable();
        //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);

        try
        {
            HiddenField hdnTemplateID = (HiddenField)gvCostAnalysis.Rows[e.RowIndex].FindControl("hdnTemplateID");
            HiddenField hdnRecordId = (HiddenField)gvCostAnalysis.Rows[e.RowIndex].FindControl("hdnRecordId");
            TextBox editorCostAnalysis = (TextBox)gvCostAnalysis.Rows[e.RowIndex].FindControl("editorCostAnalysis");
            if (common.myLen(editorCostAnalysis.Text) > 0)
            {
                string strCostAnalysis = common.myStr(editorCostAnalysis.Text).Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(CAFieldId);
                coll.Add("W");
                coll.Add(strCostAnalysis);
                coll.Add("0");
                coll.Add(0);
                coll.Add(common.myInt(hdnRecordId.Value));
                coll.Add(CASectionId);
                strNonTabularH.Append(common.setXmlTable(ref coll));
            }

            if (common.myLen(strNonTabularH.ToString()) >= 1)
            {
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SaveSingleScreenDashboard";
                APIRootClass.SaveSingleScreenDashboard objRoot = new global::APIRootClass.SaveSingleScreenDashboard();
                objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
                objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
                objRoot.EncounterId = common.myInt(Session["EncounterId"]);
                objRoot.FacilityId = common.myInt(Session["FacilityId"]);
                objRoot.DoctorId = common.myInt(Session["DoctorID"]);
                objRoot.UserId = common.myInt(Session["UserId"]);
                objRoot.xmlProblemDetails = string.Empty;
                objRoot.sProvisionalDiagnosis = string.Empty;
                objRoot.xmlVitalString = string.Empty;
                objRoot.strXMLDrug = string.Empty;
                objRoot.strXMLOther = string.Empty;
                objRoot.ProvisionalDiagnosisId = 0;
                objRoot.DiagnosisSearchId = 0;
                objRoot.bitNKDA = 0;
                objRoot.xmlTemplateDetails = strNonTabularH.ToString();
                objRoot.iSign = 0;
                objRoot.xmlNonDrugOrder = string.Empty;


                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                if (sValue.Contains(" UPDATED") || sValue.ToUpper().Contains(" SAVED"))
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblMessage.Text = sValue;
                    lblCostAnalysisMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblCostAnalysisMessage.Text = sValue;
                }
                //HshOut = objEMR.SaveSingleScreenDashboard(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]),
                //                       common.myInt(Session["EncounterId"]), common.myInt(Session["FacilityId"]), common.myInt(Session["DoctorID"]),
                //                       common.myInt(Session["UserId"]), string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, 0, 0, 0, strNonTabularH.ToString(), 0, string.Empty);
            }
            gvCostAnalysis.EditIndex = -1;
            BindCostAnalysisData("CA");

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            coll = null;
            strNonTabularH = null;
            //objEMR = null;
        }
    }
    protected void gvCostAnalysis_OnRowEditing(Object sender, GridViewEditEventArgs e)
    {
        try
        {
            if (!common.myBool(ViewState["EditEnable"]) && !common.myBool(Session["isEMRSuperUser"]))
            {
                Alert.ShowAjaxMsg("You are not authorized to Edit", Page);
                return;
            }
            else if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE") && !common.myBool(Session["isEMRSuperUser"]))
            {
                return;
            }
            else
            {
                GridViewRow row = gvCostAnalysis.Rows[e.NewEditIndex];
                HiddenField hdnEncodedById = (HiddenField)row.Cells[0].FindControl("hdnEncodedById");
                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    gvCostAnalysis.EditIndex = e.NewEditIndex;
                    BindCostAnalysisData("CA");
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    #endregion
    #region Other Notes
    protected void gvOtherNotes_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gvOtherNotes.PageIndex = e.NewPageIndex;
        BindOtherNotes("ALL");
    }
    public void BindOtherNotes(string sTemplateType)
    {
        BindCommonData(string.Empty, "D", sTemplateType, 0, 1);
    }
    protected void gvOtherNotes_OnDataBinding(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if ((e.Row.RowType == DataControlRowType.DataRow) && (e.Row.RowState == DataControlRowState.Normal)
                || (e.Row.RowType == DataControlRowType.DataRow) && (e.Row.RowState == DataControlRowState.Alternate))
            {
                LinkButton lnlEdit = (LinkButton)e.Row.FindControl("lnlEdit");
                HiddenField hdnEncodedById = (HiddenField)e.Row.FindControl("hdnEncodedById");
                if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE") && !common.myBool(Session["isEMRSuperUser"]))
                {
                    lnlEdit.Visible = false;
                }
                if (!common.myInt(hdnEncodedById.Value).Equals(common.myInt(Session["UserId"])))
                {
                    lnlEdit.Visible = false;
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void lnkView_OnClik(object sender, EventArgs e)  //For View Other Notes
    {
        ClearMessageControl();
        autoSaveDataInTransit(true);
        GridViewRow row = (GridViewRow)(((LinkButton)sender).NamingContainer);
        string TemplateId = ((HiddenField)row.FindControl("hdnTemplateID")).Value;
        HiddenField hdnTemplateType = (HiddenField)row.FindControl("hdnTemplateType");
        Label lblTemplateName = (Label)row.FindControl("lblTemplateName");
        if (!common.myStr(TemplateId).Equals(string.Empty))
        {
            try
            {
                if (common.myStr(hdnTemplateType.Value).Equals("P"))
                {
                    if (common.myStr(lblTemplateName.Text).Equals("Doctor Progress Note"))
                    {
                        RadWindowForNew.NavigateUrl = "~/EMR/Templates/DoctorProgressNote.aspx?MP=NO";
                    }
                    else if (common.myStr(lblTemplateName.Text).Equals("Diet Order"))
                    {
                        RadWindowForNew.NavigateUrl = "~/Diet/EMRPatientDietRequisition.aspx?Regid=" + common.myInt(Session["RegistrationID"])
                             + "&RegNo=" + common.myStr(Session["RegistrationNo"])
                             + "&EncId=" + common.myInt(Session["Encounterid"])
                             + "&EncNo=" + common.myStr(Session["EncounterNo"])
                             + "&Ward=Ward";
                    }
                }
                else
                {
                    RadWindowForNew.NavigateUrl = "~/Editor/WordProcessorTemplateBased.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=" + common.myInt(TemplateId);
                }
                RadWindowForNew.Width = 1200;
                RadWindowForNew.Height = 630;
                RadWindowForNew.Top = 10;
                RadWindowForNew.Left = 10;
                RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                RadWindowForNew.Modal = true;
                RadWindowForNew.VisibleStatusbar = false;
                RadWindowForNew.Title = "Care Template";
                RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Maximize;
            }
            catch (Exception Ex)
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblMessage.Text = "Error: " + Ex.Message;
                clsExceptionLog objException = new clsExceptionLog();
                objException.HandleException(Ex);
                objException = null;
            }
        }
    }
    protected void lnlEdit_OnClik(object sender, EventArgs e)
    {
        if (!common.myBool(ViewState["EditEnable"]) && !common.myBool(Session["isEMRSuperUser"]))
        {
            Alert.ShowAjaxMsg("You are not authorized to Edit", Page);
            return;
        }
        if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE") && !common.myBool(Session["isEMRSuperUser"]))
        {
            return;
        }
        ClearMessageControl();
        autoSaveDataInTransit(true);
        GridViewRow row = (GridViewRow)(((LinkButton)sender).NamingContainer);
        string TemplateId = ((HiddenField)row.FindControl("hdnTemplateID")).Value;
        HiddenField hdnTemplateType = (HiddenField)row.FindControl("hdnTemplateType");
        Label lblTemplateName = (Label)row.FindControl("lblTemplateName");
        if (!common.myStr(TemplateId).Equals(string.Empty))
        {
            try
            {
                if (common.myStr(hdnTemplateType.Value).Equals("P"))
                {
                    if (common.myStr(lblTemplateName.Text).Equals("Doctor Progress Note"))
                    {
                        RadWindowForNew.NavigateUrl = "~/EMR/Templates/DoctorProgressNote.aspx?MP=NO";
                    }
                    else if (common.myStr(lblTemplateName.Text).Equals("Diet Order"))
                    {
                        RadWindowForNew.NavigateUrl = "~/Diet/EMRPatientDietRequisition.aspx?Ward=Ward";
                    }
                }
                else
                {
                    RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=" + common.myInt(TemplateId) + "&SingleScreenTemplateCode=OTH";
                }
                RadWindowForNew.Width = 1200;
                RadWindowForNew.Height = 630;
                RadWindowForNew.Top = 10;
                RadWindowForNew.Left = 10;
                RadWindowForNew.OnClientClose = "addTemplatesOnClientClose_All";
                RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
                RadWindowForNew.Modal = true;
                RadWindowForNew.VisibleStatusbar = false;
                RadWindowForNew.Title = "Care Template";
                RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Maximize;
            }
            catch (Exception Ex)
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblMessage.Text = "Error: " + Ex.Message;
                clsExceptionLog objException = new clsExceptionLog();
                objException.HandleException(Ex);
                objException = null;
            }
        }
    }
    protected void lnkAddTemplates_All_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/Templates/TemplateNotes.aspx?From=POPUP&SingleScreenTemplateCode=OTH";
            RadWindowForNew.Width = 650;
            RadWindowForNew.Height = 400;
            RadWindowForNew.Top = 10;
            RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addTemplatesOnClientClose_All";
            RadWindowForNew.Title = "Care Template";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnAddTemplatesClose_All_OnClick(object sender, EventArgs e)
    {
        try
        {
            BindOtherNotes("ALL");
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    #endregion
    #region Provisional Diagnosis
    protected void BindDiagnosisSearchCode()
    {
        //BaseC.DiagnosisDA objDiag = new BaseC.DiagnosisDA(sConString);
        DataTable dt = new DataTable();
        try
        {
            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/GetProvisionalDiagnosisSearchCodes";
            APIRootClass.GetProvisionalDiagnosisSearchCodes objRoot = new global::APIRootClass.GetProvisionalDiagnosisSearchCodes();
            objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
            objRoot.UserId = common.myInt(Session["UserID"]);
            objRoot.KeywordType = string.Empty;


            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;

            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);
            //dt = JsonConvert.DeserializeObject<DataTable>(sValue);
            DataSet ds = JsonConvert.DeserializeObject<DataSet>(sValue);
            //ds = objDiag.GetProvisionalDiagnosisSearchCodes(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["UserID"]), string.Empty);
            ddlDiagnosisSearchCodes.Items.Clear();
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlDiagnosisSearchCodes.DataSource = ds.Tables[0];
                ddlDiagnosisSearchCodes.DataValueField = "Id";
                ddlDiagnosisSearchCodes.DataTextField = "DiagnosisSearchCode";
                ddlDiagnosisSearchCodes.DataBind();
            }
            ddlDiagnosisSearchCodes.Items.Insert(0, new ListItem("Select", string.Empty));
            //ddlDiagnosisSearchCodes.Items.Insert(0, new ListItem("kuldeep", string.Empty));
            ddlDiagnosisSearchCodes.SelectedIndex = 0;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            //objDiag = null;
            dt.Dispose();
        }
    }
    protected void imgBtnProvisionalDiagnosis_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/Assessment/ProvisionalDiagnosis.aspx?Diag=Tx&IsEMRPopUp=1";
            RadWindowForNew.Width = 650;
            //RadWindowForNew.MinWidth = 650;
            RadWindowForNew.Height = 400;
            //RadWindowForNew.Top = 10;
            //RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addProvisionalDiagnosisClose";
            RadWindowForNew.Title = "Diagnosis";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void imgBtnFinalDiagnosis_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/Assessment/Diagnosis.aspx?Diag=Tx&IsEMRPopUp=1&From=POPUP";
            //RadWindowForNew.NavigateUrl = "~/EMR/Assessment/DiagnosisHistory.aspx?From=POPUP";
            //RadWindowForNew.Width = 650;
            //RadWindowForNew.Height = 400;
            //RadWindowForNew.Top = 10;
            //RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addFinalDiagnosisClose";
            RadWindowForNew.Title = "Patient Diagnosis With ICD Code";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnFinalDiagnosisClose_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            //  BindPatientProvisionalDiagnosis();
            RetrievePatientDiagnosis();
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnProvisionalDiagnosisClose_OnClick(object sender, EventArgs e)
    {
        ClearMessageControl();
        try
        {
            BindPatientProvisionalDiagnosis();
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    public void BindPatientProvisionalDiagnosis()
    {
        BindCommonData("Provisional Diagnosis", "S", string.Empty, 0, 1);
    }
    protected void btnAddDiag_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/Assessment/Status.aspx?Source=pd";
            RadWindowForNew.Width = 600;
            RadWindowForNew.Height = 500;
            RadWindowForNew.Top = 10;
            RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addDiagnosisSerchOnClientClose";
            RadWindowForNew.Title = "Add New Search Keyword";
            RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void gvData_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gvData.PageIndex = e.NewPageIndex;
        BindPatientProvisionalDiagnosis();
    }
    protected void gvData_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        //DataSet ds = new DataSet();
        //BaseC.DiagnosisDA objDiag = new BaseC.DiagnosisDA(sConString);
        try
        {
            lblMessage.Text = string.Empty;
            if (!common.myBool(ViewState["DeleteEnable"]))
            {
                Alert.ShowAjaxMsg("You are not authorized to delete", Page);
                return;
            }
            if (e.CommandName.Equals("Del"))
            {
                GridViewRow row = (GridViewRow)(((ImageButton)e.CommandSource).NamingContainer);
                HiddenField hdnProvisionalDiagnosisID = (HiddenField)row.FindControl("hdnProvisionalDiagnosisID");
                ViewState["_ID"] = common.myInt(hdnProvisionalDiagnosisID.Value);
                if (common.myInt(ViewState["_ID"]) > 0)
                {
                    // dvConfirmCancelOptionsProvisionalDiag.Visible = true;
                    ButtonOkProvisionalDiag_OnClick(null, null);
                    BindCommonData("Provisional Diagnosis", "S", string.Empty, 0, 1);
                }

            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            //ds.Dispose();
            //objDiag = null;
        }
    }
    protected void gvData_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if ((e.Row.RowType == DataControlRowType.DataRow) && (e.Row.RowState == DataControlRowState.Normal || e.Row.RowState == DataControlRowState.Edit)
            || (e.Row.RowType == DataControlRowType.DataRow) || (e.Row.RowState == DataControlRowState.Alternate))
            {
                ImageButton ibtnDelete = (ImageButton)e.Row.FindControl("ibtnDelete");
                HiddenField hdnProvisionalDiagnosis = (HiddenField)e.Row.FindControl("hdnProvisionalDiagnosis");
                TextBox editorProvisionalDiagnosis = (TextBox)e.Row.FindControl("editorProvisionalDiagnosis");
                DropDownList ddlProvType = (DropDownList)e.Row.FindControl("ddlProvType");
                //CheckBox chkProvisional = (CheckBox)e.Row.FindControl("chkProvisional");
                HiddenField hdnIsProvisonal = (HiddenField)e.Row.FindControl("hdnIsProvisonal");
                //CheckBox chkFinal = (CheckBox)e.Row.FindControl("chkFinal");
                HiddenField hdnIsFinal = (HiddenField)e.Row.FindControl("hdnIsFinal");
                if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE") && !common.myBool(Session["isEMRSuperUser"]))
                {
                    ibtnDelete.Visible = false;
                }
                editorProvisionalDiagnosis.Text = common.myStr(hdnProvisionalDiagnosis.Value);
                //chkProvisional.Checked = common.myBool(hdnIsProvisonal.Value);
                //chkFinal.Checked = common.myBool(hdnIsFinal.Value);
                editorProvisionalDiagnosis.Enabled = !(e.Row.RowState.Equals(DataControlRowState.Normal) | e.Row.RowState.Equals(DataControlRowState.Alternate));
                ddlProvType.Enabled = !(e.Row.RowState.Equals(DataControlRowState.Normal) | e.Row.RowState.Equals(DataControlRowState.Alternate));
                //chkFinal.Enabled = !(e.Row.RowState.Equals(DataControlRowState.Normal) | e.Row.RowState.Equals(DataControlRowState.Alternate));

                editorProvisionalDiagnosis.Text = common.clearHTMLTags(editorProvisionalDiagnosis.Text);

                if (common.myBool(hdnIsProvisonal.Value) == true)
                {
                    ddlProvType.SelectedIndex = ddlProvType.Items.IndexOf(ddlProvType.Items.FindByValue("P"));
                }
                if (common.myBool(hdnIsFinal.Value) == true)
                {
                    ddlProvType.SelectedIndex = ddlProvType.Items.IndexOf(ddlProvType.Items.FindByValue("F"));
                }

                HiddenField hdnEncodedById = (HiddenField)e.Row.FindControl("hdnEncodedById");
                LinkButton lnkEdit = (LinkButton)e.Row.Cells[(byte)enumProvisionalDiagnosis.Edit].Controls[0];
                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    if (!common.myInt(hdnEncodedById.Value).Equals(common.myInt(Session["UserId"])))
                    {
                        lnkEdit.Visible = false;
                        ibtnDelete.Visible = false;
                    }
                }
                setControlHeight(editorProvisionalDiagnosis, 80);
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void ButtonOkProvisionalDiag_OnClick(object sender, EventArgs e)
    {
        //BaseC.DiagnosisDA objDiag = new BaseC.DiagnosisDA(sConString);
        try
        {
            if (common.myInt(ViewState["_ID"]) > 0)
            {
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/DeletePatientProvisionalDiagnosis";
                APIRootClass.DeletePatientProvisionalDiagnosis objRoot = new global::APIRootClass.DeletePatientProvisionalDiagnosis();
                objRoot.ProvisionalDiagnosisId = common.myInt(ViewState["_ID"]);
                objRoot.UserId = common.myInt(Session["UserID"]);

                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                int i = JsonConvert.DeserializeObject<int>(sValue);

                //int i = objDiag.DeletePatientProvisionalDiagnosis(common.myInt(ViewState["_ID"]), common.myInt(Session["UserID"]));
                if (i.Equals(0))
                {
                    lblProvDiag.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblProvDiag.Text = "Provisional Diagnosis deleted.";
                }
                BindCommonData("Provisional Diagnosis", "S", string.Empty, 0, 1);
            }
            else
            {
                lblProvDiag.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblProvDiag.Text = "Select a provisional diagnosis";
            }
            dvConfirmCancelOptionsProvisionalDiag.Visible = false;
            BindPatientProvisionalDiagnosis();
            ViewState["_ID"] = 0;
            editorProvDiagnosis.Text = string.Empty;
            ddlDiagnosisSearchCodes.SelectedIndex = 0;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            //objDiag = null;
        }
    }
    protected void ButtonCancelProvisionalDiag_OnClick(object sender, EventArgs e)
    {
        dvConfirmCancelOptionsProvisionalDiag.Visible = false;
    }
    protected void btnAddDiagnosisSerchOnClientClose_OnClick(object sender, EventArgs e)
    {
        try
        {
            BindDiagnosisSearchCode();
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void gvData_OnRowCancelingEdit(Object sender, GridViewCancelEditEventArgs e)
    {
        gvData.EditIndex = -1;
        BindCommonData("Provisional Diagnosis", "S", string.Empty, 0, 1);
    }
    protected void gvData_OnRowUpdating(Object sender, GridViewUpdateEventArgs e)
    {
        //ArrayList coll = new ArrayList();
        //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);

        try
        {
            HiddenField hdnProvisionalDiagnosisID = (HiddenField)gvData.Rows[e.RowIndex].FindControl("hdnProvisionalDiagnosisID");
            HiddenField hdnDiagnosisSearchId = (HiddenField)gvData.Rows[e.RowIndex].FindControl("hdnDiagnosisSearchId");
            TextBox editorProvisionalDiagnosis = (TextBox)gvData.Rows[e.RowIndex].FindControl("editorProvisionalDiagnosis");
            //CheckBox chkProvisional = (CheckBox)gvData.Rows[e.RowIndex].FindControl("chkProvisional");
            //HiddenField hdnIsProvisonal = (HiddenField)gvData.Rows[e.RowIndex].FindControl("hdnIsProvisonal");
            //CheckBox chkFinal = (CheckBox)gvData.Rows[e.RowIndex].FindControl("chkFinal");
            //HiddenField hdnIsFinal = (HiddenField)gvData.Rows[e.RowIndex].FindControl("hdnIsFinal");
            DropDownList ddlProvType = (DropDownList)gvData.Rows[e.RowIndex].FindControl("ddlProvType");
            ViewState["_ID"] = common.myInt(hdnProvisionalDiagnosisID.Value);
            #region provisionalDiagnosis
            int intProvisionalDiagnosisId = common.myInt(ViewState["_ID"]);
            string ProvisionalDiagnosis = common.myStr(editorProvisionalDiagnosis.Text).Replace("\n", "<br/>");
            int DiagnosisSearchId = common.myInt(hdnDiagnosisSearchId.Value);
            #endregion

            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SaveSingleScreenDashboard";
            APIRootClass.SaveSingleScreenDashboard objRoot = new global::APIRootClass.SaveSingleScreenDashboard();
            objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
            objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
            objRoot.EncounterId = common.myInt(Session["EncounterId"]);
            objRoot.FacilityId = common.myInt(Session["FacilityId"]);
            objRoot.DoctorId = common.myInt(Session["DoctorID"]);
            objRoot.UserId = common.myInt(Session["UserId"]);
            objRoot.xmlProblemDetails = string.Empty;
            objRoot.sProvisionalDiagnosis = ProvisionalDiagnosis;
            objRoot.xmlVitalString = string.Empty;
            objRoot.strXMLDrug = string.Empty;
            objRoot.strXMLOther = string.Empty;
            objRoot.ProvisionalDiagnosisId = intProvisionalDiagnosisId;
            objRoot.DiagnosisSearchId = DiagnosisSearchId;
            objRoot.bitNKDA = 0;
            objRoot.xmlTemplateDetails = string.Empty;
            objRoot.iSign = 0;
            objRoot.xmlNonDrugOrder = string.Empty;
            if (ddlProvType.SelectedItem.Value == "P")
                objRoot.IsProvisionalDignosis = true;
            if (ddlProvType.SelectedItem.Value == "F")
                objRoot.IsFinalDignosis = true;


            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;

            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);

            //Hashtable HshOut = objEMR.SaveSingleScreenDashboard(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]),
            //                       common.myInt(Session["EncounterId"]), common.myInt(Session["FacilityId"]), common.myInt(Session["DoctorID"]),
            //                       common.myInt(Session["UserId"]), string.Empty, ProvisionalDiagnosis, string.Empty, string.Empty, string.Empty, intProvisionalDiagnosisId, DiagnosisSearchId, 0, string.Empty, 0, string.Empty);
            gvData.EditIndex = -1;
            BindCommonData("Provisional Diagnosis", "S", string.Empty, 0, 1);
            if (sValue.ToUpper().Contains(" UPDATED") || sValue.ToUpper().Contains(" SAVED"))
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                lblMessage.Text = sValue;
                //lblProvDiag.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);bhakti
                //lblProvDiag.Text = sValue;bhakti
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            //coll = null;
            //objEMR = null;
            ViewState["_ID"] = null;
        }
    }
    protected void gvData_OnRowEditing(Object sender, GridViewEditEventArgs e)
    {
        try
        {
            if (!common.myBool(ViewState["EditEnable"]) && !common.myBool(Session["isEMRSuperUser"]))
            {
                Alert.ShowAjaxMsg("You are not authorized to Edit", Page);
                return;
            }
            else if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE") && !common.myBool(Session["isEMRSuperUser"]))
            {
                return;
            }
            else
            {
                GridViewRow row = gvData.Rows[e.NewEditIndex];
                HiddenField hdnEncodedById = (HiddenField)row.Cells[0].FindControl("hdnEncodedById");
                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    gvData.EditIndex = e.NewEditIndex;
                    BindCommonData("Provisional Diagnosis", "S", string.Empty, 0, 1);
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    #endregion
    #region Order And Procedure
    protected void gvOrdersAndProcedures_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gvOrdersAndProcedures.PageIndex = e.NewPageIndex;
        bindOrdersAndProcedures();
    }
    public void bindOrdersAndProcedures()
    {
        BindCommonData("Orders And Procedures", "S", string.Empty, 0, 1);
    }
    protected void lnkAddOrdersAndProcedures_OnClick(object sender, EventArgs e)
    {
        try
        {
            if (!common.myStr(Session["OPIP"]).Equals("O"))
            {
                if (common.myInt(ViewState["CheifComplaintFound"]).Equals(0))
                {
                    Alert.ShowAjaxMsg("Please save Chief Complaint first", this.Page);
                    return;
                }
            }
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "/EMR/Orders/Orders.aspx?IsEMRPopUp=1";
            RadWindowForNew.Width = 650;
            RadWindowForNew.Height = 400;
            //RadWindowForNew.Top = 10;
            //RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addOrdersAndProceduresOnClientClose";
            RadWindowForNew.Title = "Order and Procedures";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnAddOrdersAndProceduresClose_OnClick(object sender, EventArgs e)
    {
        try
        {
            bindOrdersAndProcedures();
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    #endregion
    #region Prescription
    protected void gvPrescriptions_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType.Equals(DataControlRowType.DataRow))
            {
                Label lblPrescriptionDetail = (Label)e.Row.FindControl("lblPrescriptionDetail");
                HiddenField hdnItemId = (HiddenField)e.Row.FindControl("hdnItemId");
                HiddenField hdnIndentId = (HiddenField)e.Row.FindControl("hdnIndentId");
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void gvPrescriptions_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gvPrescriptions.PageIndex = e.NewPageIndex;
        bindPrescriptions();
    }
    public void bindPrescriptions()
    {
        BindCommonData("Prescription", "S", string.Empty, 0, 1);
    }
    protected void lnkAddPrescriptions_OnClick(object sender, EventArgs e)
    {
        try
        {
            autoSaveDataInTransit(true);
            // added by kuldeep kumar 3/2/2021
            //if (common.myInt(ViewState["CheifComplaintFound"]).Equals(0))
            //{
            //    Alert.ShowAjaxMsg("Please save Chief Complaint first", this.Page);
            //    return;
            //}
            // End
            if (!common.myStr(Session["OPIP"]).Equals("O"))
            {
                //if (common.myInt(ViewState["CheifComplaintFound"]).Equals(0))
                //{
                //    Alert.ShowAjaxMsg("Please save Chief Complaint first", this.Page);
                //    return;
                //}

                if (!CheckDiagnosisPrimary())
                {
                    //Alert.ShowAjaxMsg("Atleast One Primery Diagnosis Is Required. Please Enter Diagnosis then Continue..", this);
                    //return;

                }
            }

            //if (txtHeight.Text == "" && TxtWeight.Text == "")
            //{
            //    Alert.ShowAjaxMsg("Before proceed the prescription, Please save Height & Weight of patient in vital.", this.Page);
            //    return;
            //}

            if (common.myStr(Session["OPIP"]).Equals("I"))
            {
                RadWindowForNew.NavigateUrl = "/EMR/Medication/PrescribeMedicationNew.aspx?IsEMRPopUp=1&Regid=" + common.myInt(Session["RegistrationID"])
                                        + "&RegNo=" + common.myInt(Session["RegistrationNo"])
                                        + "&EncId=" + common.myInt(Session["EncounterId"])
                                        + "&EncNo=" + common.myInt(Session["EncounterNo"]);
            }
            else
            {
                string NewPrescriptionPageForOPPatient = common.GetFlagValueHospitalSetup(common.myInt(Session["HospitalLocationId"]),
                                  common.myInt(Session["FacilityId"]), "NewPrescriptionPageForOPPatient", sConString);

                if (NewPrescriptionPageForOPPatient.ToUpper().Equals("Y"))
                {
                    RadWindowForNew.NavigateUrl = "/EMR/Medication/PrescribeMedicationV3.aspx?IsEMRPopUp=1&Regid=" + common.myInt(Session["RegistrationID"])
                                                           + "&RegNo=" + common.myInt(Session["RegistrationNo"])
                                                           + "&EncId=" + common.myInt(Session["EncounterId"])
                                                           + "&EncNo=" + common.myInt(Session["EncounterNo"]);
                }
                else
                {
                    RadWindowForNew.NavigateUrl = "/EMR/Medication/PrescribeMedicationNew.aspx?IsEMRPopUp=1&Regid=" + common.myInt(Session["RegistrationID"])
                                            + "&RegNo=" + common.myInt(Session["RegistrationNo"])
                                            + "&EncId=" + common.myInt(Session["EncounterId"])
                                            + "&EncNo=" + common.myInt(Session["EncounterNo"]);

                }
            }
            RadWindowForNew.Width = 650;
            RadWindowForNew.Height = 400;
            //RadWindowForNew.Top = 10;
            //RadWindowForNew.Left = 10;

            RadWindowForNew.OnClientClose = "addPrescriptionsOnClientClose";
            RadWindowForNew.Title = "Prescriptions";
            RadWindowForNew.VisibleOnPageLoad = true;
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }


    private bool CheckDiagnosisPrimary()
    {

        WebClient client = new WebClient();
        client.Headers["Content-type"] = "application/json";
        client.Encoding = Encoding.UTF8;
        string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/CheckPrimaryDiagnosisForEncounter";
        APIRootClass.CheckPrimaryDiagnosisForEncounter objRoot = new global::APIRootClass.CheckPrimaryDiagnosisForEncounter();
        objRoot.RegistraionId = common.myInt(Session["RegistrationId"]);
        string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
        string sValue = client.UploadString(ServiceURL, inputJson);
        sValue = JsonConvert.DeserializeObject<string>(sValue);
        bool CheckDiagnosisPrimaryForPatient = JsonConvert.DeserializeObject<bool>(sValue);

        return CheckDiagnosisPrimaryForPatient;
        //if (phr.CheckDiagnosisPrimaryForPatient(common.myInt(Session["EncounterId"])) == false)
        //if (!CheckDiagnosisPrimaryForPatient)
        //{
        //    //Alert.ShowAjaxMsg("Atleast One Primery Diagnosis Is Required. Please Enter Diagnosis then Continue..", this);
        //    //return;
        //    lblERXNo.Text = "Atleast One Primery Diagnosis Is Required. Please Enter Diagnosis then Continue..";
        //    return;
        //}
    }
    protected void btnAddPrescriptionsClose_OnClick(object sender, EventArgs e)
    {
        try
        {
            bindPrescriptions();
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    #endregion
    #region Non Drug Order
    protected void gvNonDrugOrder_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            if (e.CommandName.Equals("Select"))
            {
                GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
                Label lblPrescription = (Label)row.FindControl("lblPrescription");
                HiddenField NonDrugOrderId = (HiddenField)row.FindControl("hdnNonDrugOrderId");
                HiddenField hdnOrderType = (HiddenField)row.FindControl("hdnOrderType");
                HiddenField hdnDoctorId = (HiddenField)row.FindControl("hdnDoctorId");
                editorNonDrugOrder.Text = common.myStr(lblPrescription.Text);
                ddlOrderType.SelectedIndex = ddlOrderType.Items.IndexOf(ddlOrderType.Items.FindByValue(common.myStr(hdnOrderType.Value)));
                ddlDoctor.SelectedIndex = ddlDoctor.Items.IndexOf(ddlDoctor.Items.FindByValue(common.myStr(hdnDoctorId.Value)));
                hdnNonDrugOrderId.Value = common.myStr(NonDrugOrderId.Value);
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void gvNonDrugOrder_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if ((e.Row.RowType == DataControlRowType.DataRow) && (e.Row.RowState == DataControlRowState.Normal || e.Row.RowState == DataControlRowState.Edit)
                || (e.Row.RowType == DataControlRowType.DataRow) || (e.Row.RowState == DataControlRowState.Alternate))
            {
                HiddenField hdnAcknowledgeBy = (HiddenField)e.Row.FindControl("hdnAcknowledgeBy");
                HiddenField hdnPrescription = (HiddenField)e.Row.FindControl("hdnPrescription");
                TextBox edNonDrugOrder = (TextBox)e.Row.FindControl("edNonDrugOrder");
                if (common.myBool(hdnAcknowledgeBy.Value))
                {
                    e.Row.BackColor = System.Drawing.Color.LightGreen;
                }
                edNonDrugOrder.Text = common.myStr(hdnPrescription.Value);
                edNonDrugOrder.Enabled = !(e.Row.RowState.Equals(DataControlRowState.Normal) | e.Row.RowState.Equals(DataControlRowState.Alternate));
                edNonDrugOrder.Text = common.clearHTMLTags(edNonDrugOrder.Text);
                HiddenField hdnEncodedById = (HiddenField)e.Row.FindControl("hdnEncodedById");
                LinkButton lnkEdit = (LinkButton)e.Row.Cells[(byte)enumNonDrugOrder.Edit].Controls[0];
                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    if (!common.myInt(hdnEncodedById.Value).Equals(common.myInt(Session["UserId"])))
                    {
                        lnkEdit.Visible = false;
                    }
                }
                setControlHeight(edNonDrugOrder, 80);
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void imgNonDrugOrder_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "/ICM/ICMNONDrugOrder.aspx?POPUP=POPUP&IsEMRPopUp=1";
            RadWindowForNew.Width = 1200;
            RadWindowForNew.Height = 630;
            RadWindowForNew.Top = 10;
            RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addNonDrugOrderOnClientClose";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Maximize;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnNonDrugOrder_OnClick(object sender, EventArgs e)
    {
        try
        {
            BindCommonData("Non Drug Order", "S", string.Empty, 0, 1);
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    private void BindDoctor()
    {
        //BaseC.ICM objICM = new BaseC.ICM(sConString);
        DataSet ds = new DataSet();
        try
        {
            string ServiceURL = WebAPIAddress.ToString() + "api/Common/GetICMSignDoctors";
            APIRootClass.GetICMSignDoctors objRoot = new global::APIRootClass.GetICMSignDoctors();
            objRoot.HospitalLocationID = common.myInt(Session["HospitalLocationID"]);
            objRoot.FacilityId = common.myInt(Session["FacilityId"]);


            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;

            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);
            ds = JsonConvert.DeserializeObject<DataSet>(sValue);
            ddlDoctor.Items.Clear();
            //ds = objICM.GetICMSignDoctors(common.myInt(Session["HospitalLocationID"]), common.myInt(Session["FacilityId"]));
            if (ds.Tables[0].Rows.Count > 0)
            {

                ddlDoctor.DataSource = ds.Tables[0];
                ddlDoctor.DataTextField = "DoctorName";
                ddlDoctor.DataValueField = "ID";
                ddlDoctor.DataBind();
            }
            ddlDoctor.Items.Insert(0, new ListItem("Select", string.Empty));
            ddlDoctor.SelectedIndex = ddlDoctor.Items.IndexOf(ddlDoctor.Items.FindByValue(common.myStr(Session["EmployeeId"])));
        }
        catch (Exception ex)
        {
            lblMessage.Text = ex.Message;
            lblMessage.ForeColor = System.Drawing.Color.Red;
        }
        finally
        {
            ds.Dispose();
            //objICM = null;
        }
    }
    protected void gvNonDrugOrder_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gvNonDrugOrder.PageIndex = e.NewPageIndex;
        BindCommonData("Non Drug Order", "S", string.Empty, 0, 1);
    }
    protected void gvNonDrugOrder_OnRowCancelingEdit(Object sender, GridViewCancelEditEventArgs e)
    {
        gvNonDrugOrder.EditIndex = -1;
        BindCommonData("Non Drug Order", "S", string.Empty, 0, 1);
    }
    protected void gvNonDrugOrder_OnRowUpdating(Object sender, GridViewUpdateEventArgs e)
    {
        ArrayList coll = new ArrayList();
        StringBuilder objXMLNonDrugOrder = new StringBuilder();
        //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);
        //Hashtable HshOut = new Hashtable();

        try
        {
            HiddenField hdnNonDrugOrderId = (HiddenField)gvNonDrugOrder.Rows[e.RowIndex].FindControl("hdnNonDrugOrderId");
            HiddenField hdnOrderType = (HiddenField)gvNonDrugOrder.Rows[e.RowIndex].FindControl("hdnOrderType");
            TextBox edNonDrugOrder = (TextBox)gvNonDrugOrder.Rows[e.RowIndex].FindControl("edNonDrugOrder");
            if (common.myLen(edNonDrugOrder.Text) > 0)
            {
                string strNonDrugOrder = common.myStr(edNonDrugOrder.Text).Replace("\n", "<br/>");
                coll.Add(hdnNonDrugOrderId.Value);
                coll.Add(strNonDrugOrder);
                coll.Add(hdnOrderType.Value);
                coll.Add(ddlDoctor.SelectedValue);
                objXMLNonDrugOrder.Append(common.setXmlTable(ref coll));
            }
            if (common.myLen(objXMLNonDrugOrder.ToString()) >= 1)
            {
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SaveSingleScreenDashboard";
                APIRootClass.SaveSingleScreenDashboard objRoot = new global::APIRootClass.SaveSingleScreenDashboard();
                objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
                objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
                objRoot.EncounterId = common.myInt(Session["EncounterId"]);
                objRoot.FacilityId = common.myInt(Session["FacilityId"]);
                objRoot.DoctorId = common.myInt(Session["DoctorID"]);
                objRoot.UserId = common.myInt(Session["UserId"]);
                objRoot.xmlProblemDetails = string.Empty;
                objRoot.sProvisionalDiagnosis = string.Empty;
                objRoot.xmlVitalString = string.Empty;
                objRoot.strXMLDrug = string.Empty;
                objRoot.strXMLOther = string.Empty;
                objRoot.ProvisionalDiagnosisId = 0;
                objRoot.DiagnosisSearchId = 0;
                objRoot.bitNKDA = 0;
                objRoot.xmlTemplateDetails = string.Empty;
                objRoot.iSign = 0;
                objRoot.xmlNonDrugOrder = objXMLNonDrugOrder.ToString();


                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                if (sValue.ToUpper().Contains(" UPDATED") || sValue.ToUpper().Contains(" SAVED"))
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblMessage.Text = sValue;
                    lblNonDrugOrder.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblNonDrugOrder.Text = sValue;
                    gvNonDrugOrder.EditIndex = -1;
                }
                //HshOut = objEMR.SaveSingleScreenDashboard(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]),
                //                       common.myInt(Session["EncounterId"]), common.myInt(Session["FacilityId"]), common.myInt(Session["DoctorID"]),
                //                       common.myInt(Session["UserId"]), string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, 0, 0, 0, string.Empty, 0, objXMLNonDrugOrder.ToString());
            }
            gvNonDrugOrder.EditIndex = -1;
            BindCommonData("Non Drug Order", "S", string.Empty, 0, 1);

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            coll = null;
            objXMLNonDrugOrder = null;
            //objEMR = null;
            //HshOut = null;
        }
    }
    protected void gvNonDrugOrder_OnRowEditing(Object sender, GridViewEditEventArgs e)
    {
        try
        {
            if (!common.myBool(ViewState["EditEnable"]) && !common.myBool(Session["isEMRSuperUser"]))
            {
                Alert.ShowAjaxMsg("You are not authorized to Edit", Page);
                return;
            }
            else if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE") && !common.myBool(Session["isEMRSuperUser"]))
            {
                return;
            }
            else
            {
                GridViewRow row = gvNonDrugOrder.Rows[e.NewEditIndex];
                HiddenField hdnEncodedById = (HiddenField)row.Cells[0].FindControl("hdnEncodedById");
                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    gvNonDrugOrder.EditIndex = e.NewEditIndex;
                    BindCommonData("Non Drug Order", "S", string.Empty, 0, 1);
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    #endregion
    #region Other Events
    protected void lnkImmunisationHistory_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            //RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=6039&SingleScreenTemplateCode=IH";
            RadWindowForNew.NavigateUrl = "/EMR/Immunization/ImmunizationBabyDueDate.aspx";
            RadWindowForNew.Width = 650;
            RadWindowForNew.Height = 400;
            //RadWindowForNew.Top = 10;
            //RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addTemplatesOnClientClose_All";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Reload;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void lnkEducationCounseling_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            //RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=5998&SingleScreenTemplateCode=EC";
            RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3101&SingleScreenTemplateCode=NT";
            RadWindowForNew.Width = 650;
            RadWindowForNew.Height = 400;
            //RadWindowForNew.Top = 10;
            //RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addTemplatesOnClientClose_All";
            RadWindowForNew.Title = "Patient and Family Education";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Reload;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void lnkReferrals_OnClick(object sender, EventArgs e)
    {
        try
        {
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "/EMR/ReferralSlip.aspx?OP_IP=B&MASTER=NO&RegNo=" + common.myStr(Session["RegistrationNo"])
                + "&EId=" + common.myInt(Session["EncounterId"]) + "&IsEMRPopUp=1";
            RadWindowForNew.Width = 650;
            RadWindowForNew.Height = 400;
            //RadWindowForNew.Top = 10;
            //RadWindowForNew.Left = 10;
            RadWindowForNew.VisibleOnPageLoad = true;
            RadWindowForNew.Title = "Referrals & Reply to Referrals";
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Reload;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void lnkAnaesthesiaCritical_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            //RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateGroupId=1113&TemplateId=0";
            RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=0&TemplateGroupId=1406";
            RadWindowForNew.Width = 1200;
            RadWindowForNew.Height = 630;
            RadWindowForNew.Top = 10;
            RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addTemplatesOnClientClose_All";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Maximize;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void lnkMultidisciplinaryEvaluation_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            //RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=6019&SingleScreenTemplateCode=EP";
            RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3119&SingleScreenTemplateCode=EP";
            RadWindowForNew.Width = 650;
            RadWindowForNew.Height = 400;
            //RadWindowForNew.Top = 10;
            //RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addTemplatesOnClientClose_All";
            RadWindowForNew.Title = "Multidisciplinary Evaluation and Plan of Care";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Reload;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnSaveDashboard_OnClick(object sender, EventArgs e)
    {
        try
        {
            if (ValidatTemplate())
            {

                if (gvPatientServiceDetail.Rows.Count > 0)
                {
                    SaveData();

                    if (ViewState["RadiologyFormRequest"].Equals(" Radiology Request is required ..!"))
                    {
                        lblMessage.Text = ViewState["RadiologyFormRequest"].ToString();
                        return;
                    }
                }
                SaveDasboardData(0); //Not
                BindCommonData(string.Empty, string.Empty, string.Empty, 0, 1);
                ScriptManager.RegisterClientScriptBlock(this.Page, this.GetType(), "MyFun", "BindPatientDiagnosis();", true);

            }
        }
        catch (Exception Ex)
        {
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnSaveAsSigned_OnClick(object sender, EventArgs e)
    {
        try
        {
            if (ValidatTemplate())
            {
                SaveDasboardData(1);//Signed
                Session["EncounterStatus"] = "CLOSE";
                btnSaveSign.Visible = false;
                btnSaveAsSigned.Visible = false;
                btnSave.Visible = false;
                btnSaveDashboard.Visible = false;
                if ((common.myBool(Session["isEMRSuperUser"]) || common.myBool(ViewState["SaveEnable"]))
                            && common.myStr(Session["OPIP"]).Equals("O"))
                {
                    btnDefinalise.Visible = true;
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    private void SaveDasboardData(int iSign)
    {
        //BaseC.ParseData objParse = new BaseC.ParseData();
        //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);

        string strMsg = string.Empty;
        //BaseC.EMRAllergy objAllergy = new BaseC.EMRAllergy(sConString);
        DataSet dsAllergy = new DataSet();
        StringBuilder objXMLVital = new StringBuilder();
        StringBuilder strXMLDrug = new StringBuilder();
        StringBuilder strXMLOther = new StringBuilder();
        StringBuilder objXMLProblem = new StringBuilder();
        StringBuilder objXMLNonDrugOrder = new StringBuilder();
        StringBuilder strNonTabularH = new StringBuilder();
        StringBuilder strNonTabularPT = new StringBuilder();
        StringBuilder strNonTabularE = new StringBuilder();
        StringBuilder strNonTabularN = new StringBuilder();
        StringBuilder strNonTabularP = new StringBuilder();
        StringBuilder strNonTabularFollow = new StringBuilder();

        StringBuilder strNonTabularC = new StringBuilder();
        StringBuilder xmlTemplateDetails = new StringBuilder();
        StringBuilder strNonTabularPH = new StringBuilder();
        StringBuilder strNonTabularFreeText = new StringBuilder();
        ArrayList coll = new ArrayList();
        try
        {
            if (!common.myBool(ViewState["SaveEnable"]) && !common.myBool(Session["isEMRSuperUser"]))
            {
                Alert.ShowAjaxMsg("You are not authorized to Save", Page);
                return;
            }
            if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE")
                && !common.myBool(Session["isEMRSuperUser"]))
            {
                if (!common.myBool(ViewState["SaveEnable"]))
                {
                    Alert.ShowAjaxMsg("You are not authorized to Save", Page);
                    return;
                }
            }
            ClearMessageControl();
            #region  Problem
            coll = new ArrayList();
            if (!editorChiefComplaints.Text.Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                //foreach (GridViewRow gv in gvProblemDetails.Rows)
                //{
                //    if (common.myStr(editorChiefComplaints.Text).Trim().Equals(common.myStr(((HiddenField)gv.FindControl("hdnProblem")).Value)))
                //    {
                //        if (!common.myStr(txtedit.Text).Trim().Equals(common.myStr(((HiddenField)gv.FindControl("hdnProblemId")).Value)))
                //        {
                //            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                //            lblMessage.Text = "This  (" + common.myStr(editorChiefComplaints.Text).Trim() + ")  already exists in Today's Problems!";
                //            return;
                //        }
                //    }
                //}
                string editID;
                if (!(txtedit.Text.Trim().Equals(string.Empty)))
                {
                    editID = txtedit.Text;
                }
                else
                {
                    editID = string.Empty;
                }
                string TemplateId = Request.QueryString["POPUP"] != null && common.myStr(Request.QueryString["POPUP"]).Equals("StaticTemplate") ? common.myStr(Request.QueryString["TemplateFieldId"]) : "0";
                //string strProblem = objParse.ParseQ(common.myStr(editorChiefComplaints.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty));
                string strProblem = editorChiefComplaints.Text.Trim();
                if (common.myLen(strProblem) > 2000)
                {
                    Alert.ShowAjaxMsg("Chief complaints (free text) length must be less than 2000 character!", this.Page);
                    return;
                }
                strProblem = strProblem.Replace("\n", "<br/>");//removed "\r" bhakti
                // coll.Add(editID);//Id
                if (common.myInt(hdnProblemId.Value) > 0)
                    coll.Add(common.myInt(hdnProblemId.Value));//ProblemId
                else
                    coll.Add(0);
                coll.Add(0);//ProblemId
                coll.Add(strProblem);//Problem
                coll.Add(0);//DurationID
                coll.Add(string.Empty);//Duration
                coll.Add(0);//ContextID
                coll.Add(string.Empty);//Context
                coll.Add(0);//SeverityId
                coll.Add(string.Empty);//Severity
                coll.Add(0);//IsPrimary
                coll.Add(0);//IsChronic
                coll.Add(common.myStr(Session["DoctorID"]));//DoctorId
                coll.Add(common.myStr(Session["FacilityId"]));//FacilityId
                coll.Add(0);//SCTId
                coll.Add(string.Empty);//QualityIDs
                coll.Add(0);//LocationID
                coll.Add(string.Empty);//Location
                coll.Add(0);//OnsetID
                coll.Add(0);//AssociatedProblemId1
                coll.Add(string.Empty);//AssociatedProblem1
                coll.Add(0);//AssociatedProblemId2
                coll.Add(string.Empty);//AssociatedProblem2
                coll.Add(0);//AssociatedProblemId3
                coll.Add(string.Empty);//AssociatedProblem3
                coll.Add(0);//AssociatedProblemId4
                coll.Add(string.Empty);//AssociatedProblem4
                coll.Add(0);//AssociatedProblemId5
                coll.Add(string.Empty);//AssociatedProblem5
                coll.Add(string.Empty);//Side
                coll.Add(0);//ConditionId
                coll.Add(0);//Percentage
                coll.Add(0);//Durations
                coll.Add(string.Empty);//DurationType
                coll.Add(TemplateId);//TemplateFieldId
                coll.Add(0);//ComplaintSearchId
                objXMLProblem.Append(common.setXmlTable(ref coll));
            }
            #endregion
            #region provisionalDiagnosis

            //if (common.myInt(ddlDiagnosisSearchCodes.SelectedValue).Equals(0)
            //    && !common.myStr(editorProvDiagnosis.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            //{
            //    Alert.ShowAjaxMsg("Please select search keyword for provisional diagnosis", Page);
            //    return;
            //}
            int intProvisionalDiagnosisId = common.myInt(ViewState["_ID"]);
            string ProvisionalDiagnosis = common.myStr(editorProvDiagnosis.Text).Replace("\n", "<br/>"); ;
            int DiagnosisSearchId = common.myInt(ddlDiagnosisSearchCodes.SelectedValue);
            bool IsProvisionalDignosis = ProvchkQuery.Checked;
            bool IsFinalDignosis = ProvchkIsFinalDiagnosis.Checked;

            #endregion
            #region  Vital
            coll = new ArrayList();
            if (txtHeight.ReadOnly != true)
            {
                if (common.myLen(txtHeight.Text) > 0)
                {
                    coll.Add(common.myStr(hdnHeight.Value));//VitalId smallint,              
                    coll.Add(common.myStr(txtHeight.Text).Trim());//EnteredVitalValue1 varchar(50),
                    coll.Add(5);//EnteredUnitId1 smallint,
                    objXMLVital.Append(common.setXmlTable(ref coll));
                }
                if (common.myLen(TxtWeight.Text) > 0)
                {
                    coll.Add(common.myStr(hdnWeight.Value));
                    coll.Add(common.myStr(TxtWeight.Text).Trim());
                    coll.Add(1);
                    objXMLVital.Append(common.setXmlTable(ref coll));
                }
                if (common.myLen(txtHC.Text) > 0)
                {
                    coll.Add(common.myStr(hdnHC.Value));
                    coll.Add(common.myStr(txtHC.Text).Trim());
                    coll.Add(5);
                    objXMLVital.Append(common.setXmlTable(ref coll));
                }
                if (common.myLen(TxtTemperature.Text) > 0)
                {
                    coll.Add(common.myStr(hdnTemperature.Value));
                    coll.Add(common.myStr(TxtTemperature.Text).Trim());
                    coll.Add(9);
                    objXMLVital.Append(common.setXmlTable(ref coll));
                }
                if (common.myLen(txtRespiration.Text) > 0)
                {
                    coll.Add(common.myStr(hdnRespiration.Value));
                    coll.Add(common.myStr(txtRespiration.Text).Trim());
                    coll.Add(0);
                    objXMLVital.Append(common.setXmlTable(ref coll));
                }
                if (common.myLen(txtPulse.Text) > 0)
                {
                    coll.Add(common.myStr(hdnPulse.Value));
                    coll.Add(common.myStr(txtPulse.Text).Trim());
                    coll.Add(0);
                    objXMLVital.Append(common.setXmlTable(ref coll));
                }
                if (common.myLen(txtBPSystolic.Text) > 0)
                {
                    coll.Add(common.myStr(hdnBPSystolic.Value));
                    coll.Add(common.myStr(txtBPSystolic.Text).Trim());
                    coll.Add(0);
                    objXMLVital.Append(common.setXmlTable(ref coll));
                }
                if (common.myLen(txtBPDiastolic.Text) > 0)
                {
                    coll.Add(common.myStr(hdnBPDiastolic.Value));
                    coll.Add(common.myStr(txtBPDiastolic.Text).Trim());
                    coll.Add(0);
                    objXMLVital.Append(common.setXmlTable(ref coll));
                }
                if (common.myLen(txtMAC.Text) > 0)
                {
                    coll.Add(common.myStr(hdnMAC.Value));
                    coll.Add(common.myStr(txtMAC.Text).Trim());
                    coll.Add(0);
                    objXMLVital.Append(common.setXmlTable(ref coll));
                }
                if (common.myLen(txtSpO2.Text) > 0)
                {
                    coll.Add(common.myStr(hdnSpO2.Value));
                    coll.Add(common.myStr(txtSpO2.Text).Trim());
                    coll.Add(21);
                    objXMLVital.Append(common.setXmlTable(ref coll));
                }
                if (common.myLen(hdnBMIValue.Value) > 0)
                {
                    coll.Add(common.myStr(hdnBMI.Value));
                    coll.Add(common.myStr(hdnBMIValue.Value).Trim());
                    coll.Add(0);
                    objXMLVital.Append(common.setXmlTable(ref coll));
                }
                if (common.myLen(hdnBSAValue.Value) > 0)
                {
                    coll.Add(common.myStr(hdnBSA.Value));
                    coll.Add(common.myStr(hdnBSAValue.Value).Trim());
                    coll.Add(0);
                    objXMLVital.Append(common.setXmlTable(ref coll));
                }
            }
            #endregion
            #region Allergy
            coll = new ArrayList();
            if (common.myInt(hdnItemId.Value) > 0 && common.myInt(ddlAllergySeverity.SelectedValue).Equals(0))
            {
                Alert.ShowAjaxMsg("Please select interaction severity", Page);
                return;
            }
            int bitNKDA = 0;
            if (chkNoAllergies.Checked)
            {
                bitNKDA = 1;
            }
            if (common.myLen(hdnItemId.Value) > 0)
            {
                switch (common.myStr(hdnAllergyType.Value))
                {
                    case "Drug":
                        coll.Add(0);//Id int,             
                        coll.Add(string.Empty);//Drug_Id varchar(10),          
                        coll.Add(0);//Drug_Syn_ID int,
                        coll.Add(0);//GenericId int,
                        coll.Add(common.myInt(hdnItemId.Value));//ItemId int,
                        coll.Add(string.Empty);//Reaction varchar(500),          
                        coll.Add(0);//Intolerance bit,          
                        coll.Add(string.Empty);//AllergyDate varchar(10),          
                        coll.Add(string.Empty);//Remarks varchar(500),  
                        coll.Add(common.myInt(ddlAllergySeverity.SelectedValue));//AllerySeverity int 
                        coll.Add(0);
                        strXMLDrug.Append(common.setXmlTable(ref coll));
                        break;
                    case "Generic":
                        coll.Add(0);//Id int,             
                        coll.Add(string.Empty);//Drug_Id varchar(10),          
                        coll.Add(0);//Drug_Syn_ID int,
                        coll.Add(common.myInt(hdnItemId.Value));//GenericId int,
                        coll.Add(0);//ItemId int,
                        coll.Add(string.Empty);//Reaction varchar(500),          
                        coll.Add(0);//Intolerance bit,          
                        coll.Add(string.Empty);//AllergyDate varchar(10),          
                        coll.Add(string.Empty);//Remarks varchar(500),  
                        coll.Add(common.myInt(ddlAllergySeverity.SelectedValue));//AllerySeverity int 
                        coll.Add(0);
                        strXMLDrug.Append(common.setXmlTable(ref coll));
                        break;
                    case "CIMS":
                    case "VIDAL":
                    case "Food":
                    case "Others":
                        coll.Add(0);//Id int,             
                        coll.Add(common.myInt(hdnItemId.Value));//AllergyId int,          
                        coll.Add(string.Empty);//Reaction varchar(500),          
                        coll.Add(0);//Intolerance bit,          
                        coll.Add(string.Empty);//AllergyDate varchar(10),          
                        coll.Add(string.Empty);//Remarks varchar(500),  
                        coll.Add(0);
                        strXMLOther.Append(common.setXmlTable(ref coll));
                        break;
                }
            }
            #endregion
            #region History
            coll = new ArrayList();
            //bindVisitRecord(HISTemplateId);
            if (!common.myStr(txtWHistory.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                string strHistory = common.myStr(txtWHistory.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty);
                strHistory = strHistory.Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(HISFieldId); //FieldId
                coll.Add("W");
                coll.Add(strHistory);
                coll.Add("0");
                coll.Add(0); //coll.Add(RowCaptionId);
                if (common.myInt(hdnWRecordId.Value) > 0) // !common.myStr(Session["RecordId"]).Equals(string.Empty)
                {
                    coll.Add(common.myInt(hdnWRecordId.Value));
                    //coll.Add(common.myInt(hdnHistoryRecordId.Value));
                }
                else
                {
                    coll.Add(0);//common.myInt(ViewState["RecordId"])
                }
                coll.Add(HISSectionId);
                strNonTabularH.Append(common.setXmlTable(ref coll));
            }
            #endregion
            #region  PreviousTreatment
            coll = new ArrayList();
            //bindVisitRecord(PTTemplateId);
            if (!common.myStr(txtWPrevTreatment.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                string strPreTre = common.myStr(txtWPrevTreatment.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty);
                strPreTre = strPreTre.Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(PTFieldId); //FieldId
                coll.Add("W");
                coll.Add(strPreTre);
                coll.Add("0");
                coll.Add(0); //coll.Add(RowCaptionId);
                if (!common.myStr(hdnPreviousTreatmentRecordId.Value).Equals(string.Empty))
                {
                    coll.Add(common.myInt(hdnPreviousTreatmentRecordId.Value));
                }
                else
                {
                    coll.Add(0);//common.myInt(ViewState["RecordId"])
                }

                coll.Add(PTSectionId);
                strNonTabularPT.Append(common.setXmlTable(ref coll));
            }
            #endregion
            #region Examination
            coll = new ArrayList();
            //bindVisitRecord(EXMTemplateId);
            if (!common.myStr(txtWExamination.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                string strExamination = common.myStr(txtWExamination.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty);
                strExamination = strExamination.Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(EXMFieldId); //fieldId
                coll.Add("W");
                coll.Add(strExamination);
                coll.Add("0");
                coll.Add(0); //coll.Add(RowCaptionId);
                if (common.myInt(hdnWEmRecordId.Value) > 0)
                {
                    coll.Add(common.myInt(hdnWEmRecordId.Value));
                    //coll.Add(common.myInt(hdnHistoryRecordId.Value));
                }
                else
                {
                    coll.Add(0);//common.myInt(ViewState["RecordId"])
                }
                //if (!common.myStr(hdnExaminationRecordId.Value).Equals(string.Empty))
                //{
                //    coll.Add(common.myInt(hdnExaminationRecordId.Value));
                //}
                //else
                //{
                //    coll.Add(0);//common.myInt(ViewState["RecordId"])
                //}
                coll.Add(EXMSectionId);
                strNonTabularE.Append(common.setXmlTable(ref coll));
            }
            #endregion
            #region  Nutrition
            coll = new ArrayList();
            //bindVisitRecord(NSTemplateId);
            if (!common.myStr(txtWNutritionalStatus.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                string strNutritional = common.myStr(txtWNutritionalStatus.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty);
                strNutritional = strNutritional.Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(NSFieldId); //FieldId
                coll.Add("W");
                coll.Add(strNutritional);
                coll.Add("0");
                coll.Add(0); //coll.Add(RowCaptionId);
                if (!common.myStr(hdnNutritionalStatusRecordId.Value).Equals(string.Empty))
                {
                    coll.Add(common.myInt(hdnNutritionalStatusRecordId.Value));
                }
                else
                {
                    coll.Add(0);//common.myInt(ViewState["RecordId"])
                }
                coll.Add(NSSectionId);
                strNonTabularN.Append(common.setXmlTable(ref coll));
            }
            #endregion
            #region PlanofCare
            coll = new ArrayList();
            //bindVisitRecord(POCTemplateId);
            if (!common.myStr(txtWPlanOfCare.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                string strPlanOfCare = common.myStr(txtWPlanOfCare.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty);
                strPlanOfCare = strPlanOfCare.Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(POCFieldId); //coll.Add(item2.Cells[0].Text);
                coll.Add("W");
                coll.Add(strPlanOfCare);
                coll.Add("0");
                coll.Add(0); //coll.Add(RowCaptionId);
                if (common.myInt(hdnWPlanRecordId.Value) > 0)
                {
                    coll.Add(common.myInt(hdnWPlanRecordId.Value));
                    //coll.Add(common.myInt(hdnHistoryRecordId.Value));
                }
                else
                {
                    coll.Add(0);//common.myInt(ViewState["RecordId"])
                }
                //if (!common.myStr(hdnPlanOfCareRecordId.Value).Equals(string.Empty))
                //{
                //    coll.Add(common.myInt(hdnPlanOfCareRecordId.Value));
                //}
                //else
                //{
                //    coll.Add(0);//common.myInt(ViewState["RecordId"])
                //}
                coll.Add(POCSectionId);
                strNonTabularP.Append(common.setXmlTable(ref coll));
            }
            #endregion
            #region Follow Up
            coll = new ArrayList();
            if (!common.myStr(txtFollowup.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                string strFollowUP = common.myStr(txtFollowup.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty);
                strFollowUP = strFollowUP.Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(UPFieldId); //coll.Add(item2.Cells[0].Text);
                coll.Add("W");
                coll.Add(strFollowUP);
                coll.Add("0");
                coll.Add(0); //coll.Add(RowCaptionId);
                if (common.myInt(hdnFollowup.Value) > 0)
                {
                    coll.Add(common.myInt(hdnFollowup.Value));
                    //coll.Add(common.myInt(hdnHistoryRecordId.Value));
                }
                else
                {
                    coll.Add(0);//common.myInt(ViewState["RecordId"])
                }

                coll.Add(UPSectionId);
                strNonTabularFollow.Append(common.setXmlTable(ref coll));
            }
            #endregion
            #region Remarks
            coll = new ArrayList();

            if (!common.myStr(txtRemarks.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                string strRemarks = common.myStr(txtRemarks.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty);
                strRemarks = strRemarks.Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(INFieldId); //coll.Add(item2.Cells[0].Text);
                coll.Add("W");
                coll.Add(strRemarks);
                coll.Add("0");
                coll.Add(0); //coll.Add(RowCaptionId);
                if (common.myInt(hdntxtRemarksId.Value) > 0)
                {
                    coll.Add(common.myInt(hdntxtRemarksId.Value));
                    //coll.Add(common.myInt(hdnHistoryRecordId.Value));
                }
                else
                {
                    coll.Add(0);//common.myInt(ViewState["RecordId"])
                }

                coll.Add(INSectionId);
                strNonTabularP.Append(common.setXmlTable(ref coll));
            }
            #endregion
            #region CostAnalysis
            coll = new ArrayList();
            //bindVisitRecord(CATemplateId);
            if (!common.myStr(txtWCostAnalysis.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                string strCostAnalysis = common.myStr(txtWCostAnalysis.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty);
                strCostAnalysis = strCostAnalysis.Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(CAFieldId); //FieldId
                coll.Add("W");//FieldType
                coll.Add(strCostAnalysis);//FieldValue
                coll.Add("0");//RowNo
                coll.Add(0); //RowCaptionId
                if (!common.myStr(hdnCostAnalysisRecordId.Value).Equals(string.Empty))
                {
                    coll.Add(common.myInt(hdnCostAnalysisRecordId.Value));
                }
                else
                {
                    coll.Add(0);//common.myInt(ViewState["RecordId"])
                }
                coll.Add(CASectionId); // RowSEcitonid
                strNonTabularC.Append(common.setXmlTable(ref coll));
            }
            #endregion
            #region NonDrugOrder
            coll = new ArrayList();
            if (common.myInt(ddlDoctor.SelectedValue).Equals(0)
                && !common.myStr(editorNonDrugOrder.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                Alert.ShowAjaxMsg("Please select doctor", Page);
                return;
            }
            if (common.myStr(ddlOrderType.SelectedValue).Equals(string.Empty)
                && !common.myStr(editorNonDrugOrder.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                Alert.ShowAjaxMsg("Please select order type", Page);
                return;
            }
            if (!common.myStr(editorNonDrugOrder.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                string strNonDrugOrder = common.myStr(editorNonDrugOrder.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty);
                strNonDrugOrder = strNonDrugOrder.Replace("\n", "<br/>");
                coll.Add(hdnNonDrugOrderId.Value);
                coll.Add(strNonDrugOrder);
                coll.Add(ddlOrderType.SelectedValue);
                coll.Add(ddlDoctor.SelectedValue);
                objXMLNonDrugOrder.Append(common.setXmlTable(ref coll));
            }
            #endregion
            #region Past gvPHistory
            coll = new ArrayList();
            //bindVisitRecord(HISTemplateId);   // Template Id
            if (!common.myStr(txtPHistory.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                coll = new ArrayList();
                coll.Add(HISFieldId); //FieldId
                coll.Add("W");
                coll.Add(common.myStr(txtPHistory.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty));
                coll.Add("0");
                coll.Add(0); //coll.Add(RowCaptionId);

                if (common.myInt(Session["PRecordId"]) > 0)
                {
                    coll.Add(common.myInt(Session["PRecordId"]));
                    //coll.Add(common.myInt(hdnHistoryRecordId.Value));
                }
                else
                {
                    coll.Add(0);//common.myInt(ViewState["RecordId"])
                }

                //if (!common.myStr(hdnPastHistoryRecordId.Value).Equals(string.Empty))
                //{
                //    coll.Add(common.myInt(hdnPastHistoryRecordId.Value));
                //}
                //else
                //{
                //    coll.Add(0);//common.myInt(ViewState["RecordId"])
                //}
                coll.Add(HISSectionId);  // SectionId
                strNonTabularPH.Append(common.setXmlTable(ref coll));
            }
            #endregion
            #region  //Ritika (12-09-2022) FreeText
            coll = new ArrayList();

            if (!common.myStr(txtFreeText.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                string strFreeText = common.myStr(txtFreeText.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty);
                strFreeText = strFreeText.Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(FTFieldId); //coll.Add(item2.Cells[0].Text);
                coll.Add("W");
                coll.Add(strFreeText);
                coll.Add("0");
                coll.Add(0); //coll.Add(RowCaptionId);
                if (common.myInt(hdnFreeTextID.Value) > 0)
                {
                    coll.Add(common.myInt(hdnFreeTextID.Value));
                    //coll.Add(common.myInt(hdnHistoryRecordId.Value));
                }
                else
                {
                    coll.Add(0);//common.myInt(ViewState["RecordId"])
                }

                coll.Add(FTSectionId);
                strNonTabularFreeText.Append(common.setXmlTable(ref coll));
            }
            #endregion
            xmlTemplateDetails.Append(strNonTabularH.ToString());
            xmlTemplateDetails.Append(strNonTabularPT.ToString());
            xmlTemplateDetails.Append(strNonTabularE.ToString());
            xmlTemplateDetails.Append(strNonTabularN.ToString());
            xmlTemplateDetails.Append(strNonTabularP.ToString());
            xmlTemplateDetails.Append(strNonTabularC.ToString());
            //xmlTemplateDetails.Append(strNonTabularPH.ToString());
            xmlTemplateDetails.Append(strNonTabularFollow.ToString());
            xmlTemplateDetails.Append(strNonTabularFreeText.ToString());

            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SaveSingleScreenDashboard";
            APIRootClass.SaveSingleScreenDashboard objRoot = new global::APIRootClass.SaveSingleScreenDashboard();
            objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
            objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
            objRoot.EncounterId = common.myInt(Session["EncounterId"]);
            objRoot.FacilityId = common.myInt(Session["FacilityId"]);
            objRoot.DoctorId = common.myInt(Session["DoctorID"]);
            objRoot.UserId = common.myInt(Session["UserId"]);
            objRoot.xmlProblemDetails = objXMLProblem.ToString();
            objRoot.sProvisionalDiagnosis = ProvisionalDiagnosis;
            objRoot.xmlVitalString = objXMLVital.ToString();
            objRoot.strXMLDrug = strXMLDrug.ToString();
            objRoot.strXMLOther = strXMLOther.ToString();
            objRoot.ProvisionalDiagnosisId = intProvisionalDiagnosisId;
            objRoot.DiagnosisSearchId = DiagnosisSearchId;
            objRoot.bitNKDA = bitNKDA;
            objRoot.xmlTemplateDetails = xmlTemplateDetails.ToString();
            objRoot.iSign = iSign;
            objRoot.IsProvisionalDignosis = IsProvisionalDignosis;
            objRoot.IsFinalDignosis = IsFinalDignosis;
            objRoot.xmlNonDrugOrder = objXMLNonDrugOrder.ToString();


            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;

            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);

            //Hashtable HshOut = objEMR.SaveSingleScreenDashboard(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]),
            //                        common.myInt(Session["EncounterId"]), common.myInt(Session["FacilityId"]), common.myInt(Session["DoctorID"]),
            //                        common.myInt(Session["UserId"]), objXMLProblem.ToString(), ProvisionalDiagnosis, objXMLVital.ToString(),
            //                        strXMLDrug.ToString(), strXMLOther.ToString(), intProvisionalDiagnosisId, DiagnosisSearchId,
            //                        bitNKDA, xmlTemplateDetails.ToString(), iSign, objXMLNonDrugOrder.ToString());

            //gvProblemDetails.EditIndex = -1;
            gvHistory.EditIndex = -1;
            gvPrevTreatment.EditIndex = -1;
            gvExamination.EditIndex = -1;
            gvNutritional.EditIndex = -1;
            gvPlanOfCare.EditIndex = -1;
            gvCostAnalysis.EditIndex = -1;
            gvData.EditIndex = -1;
            gvNonDrugOrder.EditIndex = -1;
            gvPHistory.EditIndex = -1;

            BindCommonData(string.Empty, string.Empty, string.Empty, 0, 1);
            ClearMessageControl();
            //txtHeight.Text = string.Empty;
            //TxtWeight.Text = string.Empty;
            //TxtTemperature.Text = string.Empty;
            //txtRespiration.Text = string.Empty;
            //txtPulse.Text = string.Empty;
            //txtBPSystolic.Text = string.Empty;
            //txtBPDiastolic.Text = string.Empty;
            //txtHC.Text = string.Empty;
            //txtMAC.Text = string.Empty;
            //txtSpO2.Text = string.Empty;
            //txtBMI.Text = string.Empty;
            //hdnBMIValue.Value = string.Empty;
            //txtBSA.Text = string.Empty;
            //hdnBSAValue.Value = string.Empty;

            txtedit.Text = string.Empty;
            //editorChiefComplaints.Text = string.Empty;
            ClearEditorControls();
            ddlAllergySeverity.SelectedIndex = 0;
            hdnAllergyType.Value = string.Empty;
            ddlBrand.Text = string.Empty;
            hdnItemId.Value = string.Empty;
            hdnItemName.Value = string.Empty;
            ViewState["strId"] = null;
            ViewState["_ID"] = null;
            hdnNonDrugOrderId.Value = null;
            hdnHistoryRecordId.Value = string.Empty;
            hdnPastHistoryRecordId.Value = string.Empty;
            hdnPreviousTreatmentRecordId.Value = string.Empty;
            hdnExaminationRecordId.Value = string.Empty;
            hdnNutritionalStatusRecordId.Value = string.Empty;
            hdnPlanOfCareRecordId.Value = string.Empty;
            hdnCostAnalysisRecordId.Value = string.Empty;
            ddlDiagnosisSearchCodes.SelectedIndex = 0;
            ddlDoctor.SelectedIndex = ddlDoctor.Items.IndexOf(ddlDoctor.Items.FindByValue(common.myStr(Session["EmployeeId"])));
            if (sValue.ToUpper().Contains(" UPDATED") || sValue.ToUpper().Contains(" SAVED"))
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                lblMessage.Text = sValue;
                lblmessage1.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                lblmessage1.Text = sValue;
                // ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "Message('" + sValue + "');", true);
                // ScriptManager.RegisterClientScriptBlock(this.Page, this.GetType(), "MyFun", "Message('"+ sValue + "');", true);
                hdnCurrentControlFocused.Value = null;
                hdnIsTransitDataEntered.Value = "0";
                reSetTimer();
            }
            //DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
            BaseC.ThreeLayerComponent obj = BaseC.ThreeLayerComponent.MyObject;
            ViewState["CheifComplaintFound"] = common.myInt(obj.GetSingleValue("uspCheckPatientProblem @encounterID=" + common.myInt(Session["EncounterId"])));
            if (!common.myInt(ViewState["CheifComplaintFound"]).Equals(0) || common.myLen(objXMLProblem.ToString()) > 0)
                ViewState["CheifComplaintFound"] = 1;
            else
                ViewState["CheifComplaintFound"] = 0;
            obj = null;

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            //objParse = null;
            //objEMR = null;
            strMsg = string.Empty;
            //objAllergy = null;
            dsAllergy.Dispose();
            objXMLVital = null;
            strXMLDrug = null;
            strXMLOther = null;
            objXMLProblem = null;
            objXMLNonDrugOrder = null;
            strNonTabularH = null;
            strNonTabularPT = null;
            strNonTabularE = null;
            strNonTabularN = null;
            strNonTabularP = null;
            strNonTabularC = null;
            xmlTemplateDetails = null;
            strNonTabularPH = null;
            coll = null;
        }
    }

    protected void SetChifComplaint()
    {
        BaseC.ThreeLayerComponent obj = BaseC.ThreeLayerComponent.MyObject;
        ViewState["CheifComplaintFound"] = common.myInt(obj.GetSingleValue("uspCheckPatientProblem @encounterID=" + common.myInt(Session["EncounterId"])));
        if (!common.myInt(ViewState["CheifComplaintFound"]).Equals(0))
            ViewState["CheifComplaintFound"] = 1;
        else
            ViewState["CheifComplaintFound"] = 0;
        obj = null;
    }
    protected void btnICCA_OnClick(object sender, EventArgs e)
    {
        //string fileOfpatient = "";
        //BaseC.Dynamic objdy = new BaseC.Dynamic(sConString);
        //DataSet ds = objdy.GetTableWiseData(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["FacilityId"]), "FacilityMaster");
        //string strIccaLocationfile = common.myStr(ds.Tables[0].Rows[0]["ICCAPatientDocumentPath"]);
        //if (common.myStr(ds.Tables[0].Rows[0]["ICCAPatientDocumentPath"]) != "")
        //{
        //    DirectoryInfo objDir = new DirectoryInfo(@"" + common.myStr(ds.Tables[0].Rows[0]["ICCAPatientDocumentPath"]));
        //    // string[] fi_array = Directory.GetFiles(@"" + common.myStr(ds.Tables[0].Rows[0]["ICCAPatientDocumentPath"]) + Convert.ToString(Session["RegistrationNo"]) + "*");
        //    // string[] fi_array = Directory.GetFiles(@"D:\Rajeev\icca\" + Convert.ToString(Session["RegistrationNo"]) + "*");
        //    if (objDir.Exists == true)
        //    {
        //        FileInfo[] fi_array = objDir.GetFiles(Convert.ToString(Session["RegistrationNo"]) + "*");
        //        if (fi_array.Length > 0)
        //        {
        //            fileOfpatient = fi_array[0].Name;
        //            if (fi_array.Length == 1)
        //            {
        //                string path = @"" + strIccaLocationfile + fi_array[0].Name;
        //                WebClient client = new WebClient();
        //                Byte[] buffer = client.DownloadData(path);
        //                if (buffer != null)
        //                {
        //                    Response.ContentType = "application/pdf";
        //                    Response.AddHeader("content-length", buffer.Length.ToString());
        //                    Response.BinaryWrite(buffer);
        //                }
        //            }
        //            else
        //            {
        //                RadWindowForNew.NavigateUrl = "~/EMR/Dashboard/ICCAFile.aspx";
        //                RadWindowForNew.Width = 800;
        //                RadWindowForNew.Height = 330;
        //                RadWindowForNew.Top = 10;
        //                RadWindowForNew.Left = 10;
        //                RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
        //                RadWindowForNew.Modal = true;
        //                RadWindowForNew.VisibleStatusbar = false;
        //            }
        //        }
        //        else
        //        {
        //            Alert.ShowAjaxMsg("File Not Exists !", this.Page);
        //        }
        //    }
        //}
        //else
        //{
        //    Alert.ShowAjaxMsg("File location is not save in database  !", this.Page);
        //}
    }
    private void SetPermission()
    {
        if (!common.myInt(Session["ModuleId"]).Equals(3))
        {
            return;
        }
        //UserAuthorisations ua1 = new UserAuthorisations(sConString);
        UserAuthorisations ua1 = new UserAuthorisations();
        try
        {
            ViewState["IsAllowEdit"] = "true";
            ViewState["SaveEnable"] = "true";
            ViewState["EditEnable"] = "true";
            ViewState["DeleteEnable"] = "true";

            //ViewState["IsAllowEdit"] = ua1.CheckPermissionsForEMRModule("E", Request.Url.AbsolutePath, common.myInt(Session["EncounterId"]));
            //ViewState["SaveEnable"] = ua1.CheckPermissionsForEMRModule("N", Request.Url.AbsolutePath, common.myInt(Session["EncounterId"]));
            //ViewState["EditEnable"] = ua1.CheckPermissionsForEMRModule("E", Request.Url.AbsolutePath, common.myInt(Session["EncounterId"]));
            //ViewState["DeleteEnable"] = ua1.CheckPermissionsForEMRModule("C", Request.Url.AbsolutePath, common.myInt(Session["EncounterId"]));
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            ua1.Dispose();
        }
    }
    protected void btnDefinalise_OnClick(object sender, EventArgs e)
    {
        try
        {
            SaveDasboardData(2);//Unsign
            Session["EncounterStatus"] = "OPEN";
            btnDefinalise.Visible = false;
            btnSaveDashboard.Visible = true;
            btnSave.Visible = true;
            if (common.myStr(Session["OPIP"]).Equals("O"))
            {
                btnSaveSign.Visible = true;
                btnSaveAsSigned.Visible = true;
                btnSaveDashboard.Text = "Save As Unsigned";
                btnSave.Text = "Save As Unsigned";
            }
            else
            {
                btnSaveSign.Visible = false;
                btnSaveAsSigned.Visible = false;
                btnSaveDashboard.Text = "Save (F3)";
                btnSave.Text = "Save (F3)";
            }
            OpenButtonControls();
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    #endregion
    #region Paging
    protected void lnkPageVitals_OnClick(object sender, EventArgs e)
    {
        int pageIndex = int.Parse((sender as LinkButton).CommandArgument);
        BindCommonData("Vitals", "S", string.Empty, 0, pageIndex);
    }
    protected void lnkPageOrdersAndProcedures_OnClick(object sender, EventArgs e)
    {
        int pageIndex = int.Parse((sender as LinkButton).CommandArgument);
        BindCommonData("Orders And Procedures", "S", string.Empty, 0, pageIndex);
    }
    protected void lnkPagePrescriptions_OnClick(object sender, EventArgs e)
    {
        int pageIndex = int.Parse((sender as LinkButton).CommandArgument);
        BindCommonData("Prescription", "S", string.Empty, 0, pageIndex);
    }
    private void populatePager(Repeater rpt, int TotalRecordsCount, int PageNo, int PageSize)
    {
        try
        {
            double dblPageCount = (double)((decimal)TotalRecordsCount / decimal.Parse(PageSize.ToString()));
            int pageCount = (int)Math.Ceiling(dblPageCount);
            List<ListItem> pages = new List<ListItem>();
            if (pageCount > 0)
            {
                pages.Add(new ListItem("First", "1", PageNo > 1));
                for (int i = 1; i <= pageCount; i++)
                {
                    pages.Add(new ListItem(i.ToString(), i.ToString(), !i.Equals(PageNo)));
                }
                pages.Add(new ListItem("Last", pageCount.ToString(), PageNo < pageCount));
            }
            rpt.DataSource = pages;
            rpt.DataBind();
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }


    protected void lnkPastHis_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=5896&SingleScreenTemplateCode=OTH";
            //RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3025&SingleScreenTemplateCode=PHIS";
            RadWindowForNew.Width = 650;
            RadWindowForNew.Height = 400;
            //RadWindowForNew.Top = 10;
            //RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addPastHistoryOnClientClose";
            RadWindowForNew.Title = "Past History";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    #endregion
    #region Past History
    protected void lnkPastHistory_OnClick(object sender, EventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=5896&SingleScreenTemplateCode=OTH";
            //RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3025&SingleScreenTemplateCode=PHIS";
            RadWindowForNew.Width = 650;
            RadWindowForNew.Height = 400;
            //RadWindowForNew.Top = 10;
            //RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addPastHistoryOnClientClose";
            RadWindowForNew.Title = "Past History";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Reload;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnBindPasthistory_OnClick(object sender, EventArgs e)
    {
        try
        {
            BindHistoryData("HIS"); //PHIS
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void gvPHistory_OnDataBinding(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if ((e.Row.RowType == DataControlRowType.DataRow) && (e.Row.RowState == DataControlRowState.Normal || e.Row.RowState == DataControlRowState.Edit)
                || (e.Row.RowType == DataControlRowType.DataRow) || (e.Row.RowState == DataControlRowState.Alternate))
            {
                HiddenField hdnTemplateName = (HiddenField)e.Row.FindControl("hdnTemplateName");
                TextBox editorPHistory = (TextBox)e.Row.FindControl("editorHistory");
                editorPHistory.Text = common.myStr(hdnTemplateName.Value);
                editorPHistory.Enabled = !(e.Row.RowState.Equals(DataControlRowState.Normal) | e.Row.RowState.Equals(DataControlRowState.Alternate));
                editorPHistory.Text = common.clearHTMLTags(editorPHistory.Text);
                HiddenField hdnEncodedById = (HiddenField)e.Row.FindControl("hdnEncodedById");
                LinkButton lnkEdit = (LinkButton)e.Row.Cells[(byte)enumPHistory.Edit].Controls[0];
                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    if (!common.myInt(hdnEncodedById.Value).Equals(common.myInt(Session["UserId"])))
                    {
                        lnkEdit.Visible = false;
                    }
                }
                setControlHeight(editorPHistory, 125);
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void gvPHistory_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gvPHistory.PageIndex = e.NewPageIndex;
        BindHistoryData("HIS");//PHIS
    }
    protected void gvPHistory_OnRowCancelingEdit(Object sender, GridViewCancelEditEventArgs e)
    {
        gvPHistory.EditIndex = -1;
        BindHistoryData("HIS");//PHIS
    }
    protected void gvPHistory_OnRowUpdating(Object sender, GridViewUpdateEventArgs e)
    {
        ArrayList coll = new ArrayList();
        StringBuilder strNonTabularH = new StringBuilder();
        //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);
        //Hashtable HshOut = new Hashtable();

        try
        {
            HiddenField hdnTemplateID = (HiddenField)gvPHistory.Rows[e.RowIndex].FindControl("hdnTemplateID");
            HiddenField hdnRecordId = (HiddenField)gvPHistory.Rows[e.RowIndex].FindControl("hdnRecordId");
            TextBox editorHistory = (TextBox)gvPHistory.Rows[e.RowIndex].FindControl("editorHistory");
            if (common.myLen(editorHistory.Text) > 0)
            {
                coll = new ArrayList();
                coll.Add(79727);  //FieldID
                coll.Add("W");
                coll.Add(editorHistory.Text);
                coll.Add("0");
                coll.Add(0);
                coll.Add(common.myInt(hdnRecordId.Value));
                coll.Add(17615); // SectionID
                strNonTabularH.Append(common.setXmlTable(ref coll));
            }
            if (common.myLen(strNonTabularH.ToString()) >= 1)
            {

                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SaveSingleScreenDashboard";
                APIRootClass.SaveSingleScreenDashboard objRoot = new global::APIRootClass.SaveSingleScreenDashboard();
                objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
                objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
                objRoot.EncounterId = common.myInt(Session["EncounterId"]);
                objRoot.FacilityId = common.myInt(Session["FacilityId"]);
                objRoot.DoctorId = common.myInt(Session["DoctorID"]);
                objRoot.UserId = common.myInt(Session["UserId"]);
                objRoot.xmlProblemDetails = string.Empty;
                objRoot.sProvisionalDiagnosis = string.Empty;
                objRoot.xmlVitalString = string.Empty;
                objRoot.strXMLDrug = string.Empty;
                objRoot.strXMLOther = string.Empty;
                objRoot.ProvisionalDiagnosisId = 0;
                objRoot.DiagnosisSearchId = 0;
                objRoot.bitNKDA = 0;
                objRoot.xmlTemplateDetails = strNonTabularH.ToString();
                objRoot.iSign = 0;
                objRoot.xmlNonDrugOrder = string.Empty;


                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                if (sValue.ToUpper().Contains(" UPDATED") || sValue.ToUpper().Contains(" SAVED"))
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblMessage.Text = sValue;
                    lblPHistoryMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblPHistoryMessage.Text = sValue;
                }
                //HshOut = objEMR.SaveSingleScreenDashboard(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]),
                //                       common.myInt(Session["EncounterId"]), common.myInt(Session["FacilityId"]), common.myInt(Session["DoctorID"]),
                //                       common.myInt(Session["UserId"]), string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, 0, 0, 0, strNonTabularH.ToString(), 0, string.Empty);
            }
            gvPHistory.EditIndex = -1;
            BindHistoryData("HIS"); //PHIS

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            coll = null;
            strNonTabularH = null;
            //objEMR = null;
            //HshOut = null;
        }
    }
    protected void gvPHistory_OnRowEditing(Object sender, GridViewEditEventArgs e)
    {
        try
        {
            if (!common.myBool(ViewState["EditEnable"]) && !common.myBool(Session["isEMRSuperUser"]))
            {
                Alert.ShowAjaxMsg("You are not authorized to Edit", Page);
                return;
            }
            else if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE") && !common.myBool(Session["isEMRSuperUser"]))
            {
                return;
            }
            else
            {
                gvPHistory.EditIndex = e.NewEditIndex;
                BindHistoryData("HIS");//PHIS
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    #endregion



    public void GetDoctorNote()
    {
        //WebClient client = new WebClient();
        //client.Headers["Content-type"] = "application/json";
        //client.Encoding = Encoding.UTF8;
        //string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/GetDoctorProgressNote";
        //APIRootClass.GetDoctorProgressNote objDoctorProgressNote = new global::APIRootClass.GetDoctorProgressNote();
        //objDoctorProgressNote.HospitalLocationId = common.myInt(HttpContext.Current.Session["HospitalLocationID"]);
        //objDoctorProgressNote.FacilityId = common.myInt(Session["facilityid"]);
        //objDoctorProgressNote.RegistrationId = common.myInt(Session["RegistrationId"]);
        //objDoctorProgressNote. = common.myInt(Session["RegistrationId"]);
        //objVitalsValue.xmlstr = objStr.ToString();

        //string inputJson = (new JavaScriptSerializer()).Serialize(objVitalsValue);
        //string sValue = client.UploadString(ServiceURL, inputJson);
        //sValue = JsonConvert.DeserializeObject<string>(sValue);
        //ds = JsonConvert.DeserializeObject<DataSet>(sValue);
    }
    protected void btnBackToMenu_OnClick(object sender, EventArgs e)
    {
        Response.Redirect("~/EMR/Templates/TemplateNotes.aspx?Mpg=P1265", false);
    }
    private void setControlHeight(TextBox TXT, int intMaxLength)
    {
        try
        {
            if (common.myLen(TXT.Text) > 4)
            {
                double dblLineChar = 60.00;
                if (intMaxLength > 90)
                {
                    dblLineChar = 80.00;
                }
                string[] lines = Regex.Split(common.myStr(TXT.Text), "\r\n");
                double intHeight = 20;
                intHeight = (common.myLen(TXT.Text) / dblLineChar) * 20.00;
                if (intHeight < (lines.Length * 20))
                {
                    intHeight = (lines.Length * 20);
                }
                if (intHeight > 20 && intHeight < 40)
                {
                    intHeight = 40;
                }
                if (intHeight > 40 && intHeight < 60)
                {
                    intHeight = 60;
                }
                if (intHeight > 60 && intHeight < 80)
                {
                    intHeight = 80;
                }
                if (intHeight > intMaxLength)
                {
                    intHeight = intMaxLength;
                }
                TXT.Height = common.myInt(intHeight);
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    private void bindDataInTransit()
    {
        //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);
        DataSet ds = new DataSet();
        try
        {
            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/getEMRSingleScreenDataInTransit";
            APIRootClass.getEMRSingleScreenDataInTransit objRoot = new global::APIRootClass.getEMRSingleScreenDataInTransit();
            objRoot.FacilityId = common.myInt(Session["FacilityId"]);
            objRoot.EncounterId = common.myInt(Session["EncounterId"]);
            objRoot.EncodedBy = common.myInt(Session["UserId"]);


            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;

            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);
            ds = JsonConvert.DeserializeObject<DataSet>(sValue);

            //ds = objEMR.getEMRSingleScreenDataInTransit(common.myInt(Session["FacilityId"]), common.myInt(Session["EncounterId"]), common.myInt(Session["UserId"]));
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
                {
                    DataRow DR = ds.Tables[0].Rows[0];
                    editorChiefComplaints.Text = common.myStr(DR["Complaints"]);
                    chkNoAllergies.Checked = common.myBool(DR["NoAllergies"]);
                    ddlBrand.SelectedIndex = ddlBrand.Items.IndexOf(ddlBrand.Items.FindItemByValue(common.myStr(DR["AllergyId"])));
                    ddlBrand.Text = common.myStr(DR["AllergyName"]);
                    hdnItemId.Value = common.myStr(DR["AllergyId"]);
                    hdnAllergyType.Value = common.myStr(DR["AllergyType"]);
                    ddlAllergySeverity.SelectedIndex = ddlAllergySeverity.Items.IndexOf(ddlAllergySeverity.Items.FindByValue(common.myStr(DR["ServerityId"])));
                    txtHeight.Text = common.myStr(DR["HT"]);
                    TxtWeight.Text = common.myStr(DR["WT"]);
                    txtHC.Text = common.myStr(DR["HC"]);
                    TxtTemperature.Text = common.myStr(DR["T"]);
                    txtRespiration.Text = common.myStr(DR["R"]);
                    txtPulse.Text = common.myStr(DR["P"]);
                    txtBPSystolic.Text = common.myStr(DR["BPS"]);
                    txtBPDiastolic.Text = common.myStr(DR["BPD"]);
                    txtMAC.Text = common.myStr(DR["MAC"]);
                    txtSpO2.Text = common.myStr(DR["SPO2"]);
                    txtBMI.Text = common.myStr(DR["BMI"]);
                    hdnBMIValue.Value = common.myStr(DR["BMI"]);
                    txtBSA.Text = common.myStr(DR["BSA"]);
                    hdnBSAValue.Value = common.myStr(DR["BSA"]);
                    txtWHistory.Text = common.myStr(DR["History"]);
                    txtPHistory.Text = common.myStr(DR["PastHistory"]);
                    txtWPrevTreatment.Text = common.myStr(DR["PreviousTreatment"]);
                    txtWExamination.Text = common.myStr(DR["Examination"]);
                    txtWNutritionalStatus.Text = common.myStr(DR["NutritionalStatus"]);
                    txtWCostAnalysis.Text = common.myStr(DR["CostAnalysis"]);
                    txtWPlanOfCare.Text = common.myStr(DR["PlanOfCare"]);
                    ddlDiagnosisSearchCodes.SelectedIndex = ddlDiagnosisSearchCodes.Items.IndexOf(ddlDiagnosisSearchCodes.Items.FindByValue(common.myStr(DR["DiagnosisSearchKeyId"])));
                    editorProvDiagnosis.Text = common.myStr(DR["ProvisionalDiagnosis"]);
                    ddlOrderType.SelectedIndex = ddlOrderType.Items.IndexOf(ddlOrderType.Items.FindByValue(common.myStr(DR["OrderType"])));
                    ddlDoctor.SelectedIndex = ddlDoctor.Items.IndexOf(ddlDoctor.Items.FindByValue(common.myStr(DR["NonDrugDoctorId"])));
                    editorNonDrugOrder.Text = common.myStr(DR["NonDrugOrder"]);
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            //objEMR = null;
            ds.Dispose();
        }
    }
    private void autoSaveDataInTransit(bool IsPopupOpen)
    {
        //BaseC.ParseData objParse = new BaseC.ParseData();
        //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);
        try
        {
            if (common.myInt(Session["EncounterId"]) > 0)
            {
                if (common.myBool(hdnIsTransitDataEntered.Value))
                {
                    string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SaveSingleScreenDataInTransit";
                    APIRootClass.SaveSingleScreenDataInTransit objRoot = new global::APIRootClass.SaveSingleScreenDataInTransit();
                    objRoot.HospId = common.myInt(Session["HospitalLocationId"]);
                    objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
                    objRoot.EncounterId = common.myInt(Session["EncounterId"]);
                    objRoot.FacilityId = common.myInt(Session["FacilityId"]);
                    objRoot.Complaints = common.ParseString(common.myStr(editorChiefComplaints.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty));
                    objRoot.IsNoAllergies = chkNoAllergies.Checked;
                    objRoot.AllergyId = common.myInt(hdnItemId.Value);
                    objRoot.AllergyName = common.myStr(ddlBrand.Text);
                    objRoot.AllergyType = common.myStr(hdnAllergyType.Value);
                    objRoot.ServerityId = common.myInt(ddlAllergySeverity.SelectedValue);
                    objRoot.VitalHT = common.myStr(txtHeight.Text);
                    objRoot.VitalWT = common.myStr(TxtWeight.Text);
                    objRoot.VitalHC = common.myStr(txtHC.Text);
                    objRoot.VitalT = common.myStr(TxtTemperature.Text);
                    objRoot.VitalR = common.myStr(txtRespiration.Text);
                    objRoot.VitalP = common.myStr(txtPulse.Text);
                    objRoot.VitalBPS = common.myStr(txtBPSystolic.Text);
                    objRoot.VitalBPD = common.myStr(txtBPDiastolic.Text);
                    objRoot.VitalMAC = common.myStr(txtMAC.Text);
                    objRoot.VitalSPO2 = common.myStr(txtSpO2.Text);
                    objRoot.VitalBMI = common.myStr(hdnBMIValue.Value);
                    objRoot.VitalBSA = common.myStr(hdnBSAValue.Value);
                    objRoot.History = common.ParseString(common.myStr(txtWHistory.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty));
                    objRoot.PastHistory = common.ParseString(common.myStr(txtPHistory.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty));
                    objRoot.PreviousTreatment = common.ParseString(common.myStr(txtWPrevTreatment.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty));
                    objRoot.Examination = common.ParseString(common.myStr(txtWExamination.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty));
                    objRoot.NutritionalStatus = common.ParseString(common.myStr(txtWNutritionalStatus.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty));
                    objRoot.CostAnalysis = common.ParseString(common.myStr(txtWCostAnalysis.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty));
                    objRoot.PlanOfCare = common.ParseString(common.myStr(txtWPlanOfCare.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty));
                    objRoot.DiagnosisSearchKeyId = common.myInt(ddlDiagnosisSearchCodes.SelectedValue);
                    objRoot.ProvisionalDiagnosis = common.ParseString(common.myStr(editorProvDiagnosis.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty));
                    objRoot.OrderType = common.myStr(ddlOrderType.SelectedValue);
                    objRoot.NonDrugDoctorId = common.myInt(ddlDoctor.SelectedValue);
                    objRoot.NonDrugOrder = common.ParseString(common.myStr(editorNonDrugOrder.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty));
                    objRoot.EncodedBy = common.myInt(Session["UserId"]);


                    WebClient client = new WebClient();
                    client.Headers["Content-type"] = "application/json";
                    client.Encoding = Encoding.UTF8;

                    string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                    string sValue = client.UploadString(ServiceURL, inputJson);
                    string strMsg = JsonConvert.DeserializeObject<string>(sValue);
                    //string strMsg = objEMR.SaveSingleScreenDataInTransit(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]),
                    //                                     common.myInt(Session["EncounterId"]), common.myInt(Session["FacilityId"]),
                    //                                     objParse.ParseQ(common.myStr(editorChiefComplaints.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty)),
                    //                                     chkNoAllergies.Checked, common.myInt(hdnItemId.Value), common.myStr(ddlBrand.Text), common.myStr(hdnAllergyType.Value), common.myInt(ddlAllergySeverity.SelectedValue),
                    //                                     common.myStr(txtHeight.Text).Trim(), common.myStr(TxtWeight.Text).Trim(), common.myStr(txtHC.Text).Trim(), common.myStr(TxtTemperature.Text).Trim(), common.myStr(txtRespiration.Text).Trim(), common.myStr(txtPulse.Text).Trim(), common.myStr(txtBPSystolic.Text).Trim(), common.myStr(txtBPDiastolic.Text).Trim(), common.myStr(txtMAC.Text).Trim(), common.myStr(txtSpO2.Text).Trim(), common.myStr(hdnBMIValue.Value).Trim(), common.myStr(hdnBSAValue.Value).Trim(),
                    //                                     objParse.ParseQ(common.myStr(txtWHistory.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty)),
                    //                                     objParse.ParseQ(common.myStr(txtPHistory.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty)),
                    //                                     objParse.ParseQ(common.myStr(txtWPrevTreatment.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty)),
                    //                                     objParse.ParseQ(common.myStr(txtWExamination.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty)),
                    //                                     objParse.ParseQ(common.myStr(txtWNutritionalStatus.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty)),
                    //                                     objParse.ParseQ(common.myStr(txtWCostAnalysis.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty)),
                    //                                     objParse.ParseQ(common.myStr(txtWPlanOfCare.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty)), common.myInt(ddlDiagnosisSearchCodes.SelectedValue),
                    //                                     objParse.ParseQ(common.myStr(editorProvDiagnosis.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty)),
                    //                                     common.myStr(ddlOrderType.SelectedValue), common.myInt(ddlDoctor.SelectedValue),
                    //                                     objParse.ParseQ(common.myStr(editorNonDrugOrder.Text).Trim().Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty)),
                    //                                     common.myInt(Session["UserId"]));
                    if (common.myStr(strMsg).ToUpper().Contains(" UPDATED") || common.myStr(strMsg).ToUpper().Contains(" SAVED"))
                    {
                        hdnIsTransitDataEntered.Value = "1";  // yogesh 1_09_2022
                    }
                }
                if (IsPopupOpen)
                {
                    hdnCurrentControlFocused.Value = null;
                    hdnIsTransitDataEntered.Value = "0";
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            //objEMR = null;
            //objParse = null;
            reSetTimer();
            setFocus(IsPopupOpen);
        }
    }
    private void setFocus(bool IsPopupOpen)
    {
        try
        {
            if (!common.myBool(hdnIsTransitDataEntered.Value) && !IsPopupOpen)
            {
                //lblMessage.Text = DateTime.Now.Minute.ToString() + ":" + DateTime.Now.Second.ToString();
                switch (common.myStr(hdnCurrentControlFocused.Value))
                {
                    case "ctl00$ContentPlaceHolder1$editorChiefComplaints":
                        editorChiefComplaints.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + editorChiefComplaints.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$chkNoAllergies":
                        chkNoAllergies.Focus();
                        break;
                    case "ctl00$ContentPlaceHolder1$ddlBrand":
                        ddlBrand.Focus();
                        break;
                    case "ctl00$ContentPlaceHolder1$ddlAllergySeverity":
                        ddlAllergySeverity.Focus();
                        break;
                    case "ctl00$ContentPlaceHolder1$txtHeight":
                        txtHeight.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + txtHeight.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$TxtWeight":
                        TxtWeight.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + TxtWeight.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$txtHC":
                        txtHC.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + txtHC.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$TxtTemperature":
                        TxtTemperature.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + TxtTemperature.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$txtRespiration":
                        txtRespiration.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + txtRespiration.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$txtPulse":
                        txtPulse.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + txtPulse.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$txtBPSystolic":
                        txtBPSystolic.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + txtBPSystolic.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$txtBPDiastolic":
                        txtBPDiastolic.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + txtBPDiastolic.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$txtMAC":
                        txtMAC.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + txtMAC.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$txtSpO2":
                        txtSpO2.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + txtSpO2.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$txtWHistory":
                        txtWHistory.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + txtWHistory.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$txtPHistory":
                        txtPHistory.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + txtPHistory.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$txtWPrevTreatment":
                        txtWPrevTreatment.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + txtWPrevTreatment.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$txtWExamination":
                        txtWExamination.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + txtWExamination.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$txtWNutritionalStatus":
                        txtWNutritionalStatus.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + txtWNutritionalStatus.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$txtWCostAnalysis":
                        txtWCostAnalysis.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + txtWCostAnalysis.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$ddlDiagnosisSearchCodes":
                        ddlDiagnosisSearchCodes.Focus();
                        break;
                    case "ctl00$ContentPlaceHolder1$editorProvDiagnosis":
                        editorProvDiagnosis.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + editorProvDiagnosis.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$txtWPlanOfCare":
                        txtWPlanOfCare.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + txtWPlanOfCare.ClientID + "');", true);
                        break;
                    case "ctl00$ContentPlaceHolder1$ddlOrderType":
                        ddlOrderType.Focus();
                        break;
                    case "ctl00$ContentPlaceHolder1$ddlDoctor":
                        ddlDoctor.Focus();
                        break;
                    case "ctl00$ContentPlaceHolder1$editorNonDrugOrder":
                        editorNonDrugOrder.Focus();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "SetFocusAtEnd('" + editorNonDrugOrder.ClientID + "');", true);
                        break;
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    private void reSetTimer()
    {
        try
        {
            //true For starting the timer
            //false For stop the timer
            TimerAutoSaveDataInTransit.Enabled = common.myBool(hdnIsTransitDataEntered.Value);
            if (common.myBool(hdnIsTransitDataEntered.Value))
            {
                editorChiefComplaints.Style["backgroundColor"] = "AntiqueWhite";
                txtHeight.Style["backgroundColor"] = "AntiqueWhite";
                TxtWeight.Style["backgroundColor"] = "AntiqueWhite";
                txtHC.Style["backgroundColor"] = "AntiqueWhite";
                TxtTemperature.Style["backgroundColor"] = "AntiqueWhite";
                txtRespiration.Style["backgroundColor"] = "AntiqueWhite";
                txtPulse.Style["backgroundColor"] = "AntiqueWhite";
                txtBPSystolic.Style["backgroundColor"] = "AntiqueWhite";
                txtBPDiastolic.Style["backgroundColor"] = "AntiqueWhite";
                txtMAC.Style["backgroundColor"] = "AntiqueWhite";
                txtSpO2.Style["backgroundColor"] = "AntiqueWhite";
                txtWHistory.Style["backgroundColor"] = "AntiqueWhite";
                txtPHistory.Style["backgroundColor"] = "AntiqueWhite";
                txtWPrevTreatment.Style["backgroundColor"] = "AntiqueWhite";
                txtWExamination.Style["backgroundColor"] = "AntiqueWhite";
                txtWNutritionalStatus.Style["backgroundColor"] = "AntiqueWhite";
                txtWCostAnalysis.Style["backgroundColor"] = "AntiqueWhite";
                editorProvDiagnosis.Style["backgroundColor"] = "AntiqueWhite";
                txtWPlanOfCare.Style["backgroundColor"] = "AntiqueWhite";
                editorNonDrugOrder.Style["backgroundColor"] = "AntiqueWhite";
            }
            else
            {
                editorChiefComplaints.Style["backgroundColor"] = "none";
                txtHeight.Style["backgroundColor"] = "none";
                TxtWeight.Style["backgroundColor"] = "none";
                txtHC.Style["backgroundColor"] = "none";
                TxtTemperature.Style["backgroundColor"] = "none";
                txtRespiration.Style["backgroundColor"] = "none";
                txtPulse.Style["backgroundColor"] = "none";
                txtBPSystolic.Style["backgroundColor"] = "none";
                txtBPDiastolic.Style["backgroundColor"] = "none";
                txtMAC.Style["backgroundColor"] = "none";
                txtSpO2.Style["backgroundColor"] = "none";
                txtWHistory.Style["backgroundColor"] = "none";
                txtPHistory.Style["backgroundColor"] = "none";
                txtWPrevTreatment.Style["backgroundColor"] = "none";
                txtWExamination.Style["backgroundColor"] = "none";
                txtWNutritionalStatus.Style["backgroundColor"] = "none";
                txtWCostAnalysis.Style["backgroundColor"] = "none";
                editorProvDiagnosis.Style["backgroundColor"] = "none";
                txtWPlanOfCare.Style["backgroundColor"] = "none";
                editorNonDrugOrder.Style["backgroundColor"] = "none";
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    protected void TimerAutoSaveDataInTransit_OnTick(object sender, EventArgs e)
    {
        try
        {
            //lblMessage.Text = DateTime.Now.Minute.ToString() + ":" + DateTime.Now.Second.ToString();
            if (common.myBool(hdnIsTransitDataEntered.Value))
            {
                autoSaveDataInTransit(false);
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            reSetTimer();
        }
    }

    protected void btnAssigntoMe_Click(object sender, EventArgs e)
    {
        try
        {
            if (common.myBool(Session["IsLoginDoctor"]) == false)
            {
                Alert.ShowAjaxMsg("Only Doctor Can Assign !", this);
                return;
            }

            string ServiceURL = WebAPIAddress.ToString() + "api/Common/ChangeEncounterDoctor";
            APIRootClass.ChangeEncounterDoctor objRoot = new global::APIRootClass.ChangeEncounterDoctor();
            objRoot.EncounterId = common.myInt(Session["EncounterId"]);
            objRoot.DoctorId = common.myInt(Session["EmployeeId"]);
            objRoot.UserId = common.myInt(Session["UserId"]);


            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;

            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            //DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
            //dl.ExecuteNonQuery(CommandType.Text, "Exec UspChangeEncounterDoctor @encounterID=" + common.myInt(Session["EncounterId"]).ToString() + ",@doctorID =" + 
            //common.myInt(common.myInt(Session["EmployeeId"])).ToString() + ",@userID =" + common.myInt(Session["UserId"]));
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        //btnAssigntoMe
    }

    protected void btnShowHistory_Click(object sender, EventArgs e)
    {
        try
        {//common.myInt(Session["RegistrationID"])\
            Button btn = sender as Button;
            if (btn.ID.Contains("History"))
            {
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/getPAstHistory";
                APIRootClass.getPAstHistory objRoot = new global::APIRootClass.getPAstHistory();
                objRoot.regID = common.myInt(Session["RegistrationID"]);
                objRoot.encounterID = common.myInt(Session["EncounterId"]);
                objRoot.doctorID = common.myInt(Session["EmployeeId"]);


                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                DataSet ds = JsonConvert.DeserializeObject<DataSet>(sValue);
                //DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
                //DataSet ds = dl.FillDataSet(CommandType.Text, "Exec uspgetPAstHistory @regID=" + common.myInt(Session["RegistrationID"]) + ", @encounterID=" + common.myInt(Session["EncounterId"]).ToString() + ",@doctorID =" + common.myInt(common.myInt(Session["EmployeeId"])).ToString());
                gvhistoryautopop.DataSource = ds.Tables[0];
                gvhistoryautopop.DataBind();
                dvHhostory.Visible = true;
            }
            else
            {
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/getPAstCheifComplaints";
                APIRootClass.getPAstCheifComplaints objRoot = new global::APIRootClass.getPAstCheifComplaints();
                objRoot.regID = common.myInt(Session["RegistrationID"]);
                objRoot.encounterID = common.myInt(Session["EncounterId"]);
                objRoot.doctorID = common.myInt(Session["EmployeeId"]);


                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                DataSet ds = JsonConvert.DeserializeObject<DataSet>(sValue);
                //DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
                //DataSet ds = dl.FillDataSet(CommandType.Text, "Exec uspgetPAstCheifComplaints @regID=" + common.myInt(Session["RegistrationID"]) + ", @encounterID=" + common.myInt(Session["EncounterId"]).ToString() + ",@doctorID =" + common.myInt(common.myInt(Session["EmployeeId"])).ToString());
                gvhistoryData.DataSource = ds.Tables[0];
                gvhistoryData.DataBind();
                dvchfhistory.Visible = true;
            }
            //exec uspgetPAstCheifComplaints 196226,1871,0
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    protected void btnCopyselected_Click(object sender, EventArgs e)
    {
        string seelctedText = "";
        for (int i = 0; i < gvhistoryData.Rows.Count; i++)
        {
            if ((gvhistoryData.Rows[i].FindControl("chkselect") as CheckBox).Checked == true)
            {
                seelctedText = seelctedText + (gvhistoryData.Rows[i].FindControl("txtHistory") as TextBox).Text + System.Environment.NewLine;
            }
        }
        editorChiefComplaints.Text = seelctedText;
    }

    protected void btnClose_Click(object sender, EventArgs e)
    {
        dvchfhistory.Visible = false;
        dvHhostory.Visible = false;
    }

    protected void btnhistoryCopy_Click(object sender, EventArgs e)
    {
        string seelctedText = "";
        for (int i = 0; i < gvhistoryautopop.Rows.Count; i++)
        {
            if ((gvhistoryautopop.Rows[i].FindControl("chkselect") as CheckBox).Checked == true)
            {
                seelctedText = seelctedText + (gvhistoryautopop.Rows[i].FindControl("txtHistory") as TextBox).Text + System.Environment.NewLine;
            }
        }
        txtWHistory.Text = seelctedText;
    }

    protected void lnkIPExtension_Click(object sender, EventArgs e)
    {
        RadWindowForNew.NavigateUrl = "/Approval/Extensions.aspx?RNo=" + common.myStr(Session["RegistrationNo"])
                               + "&Regid=" + common.myInt(Session["RegistrationId"]) + "&RegNo=" + common.myStr(Session["RegistrationNo"])
                               + "&EncId=" + common.myInt(Session["EncounterId"]) + "&EncNo=" + common.myStr(Session["EncounterNo"])
                               + "&FromWard=Y&OP_IP=I&Category=PopUp";
        RadWindowForNew.Width = 650;
        RadWindowForNew.Height = 400;
        //RadWindowForNew.Top = 10;
        //RadWindowForNew.Left = 10;
        RadWindowForNew.OnClientClose = string.Empty;
        RadWindowForNew.Modal = true;
        RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code    
        RadWindowForNew.VisibleStatusbar = false;
        RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Reload;
    }

    protected void btnCopyExamination_Click(object sender, EventArgs e)
    {

    }

    protected void lnkpreauth_Click(object sender, EventArgs e)
    {
        RadWindowForNew.NavigateUrl = "~/EMR/Newpreauth.aspx?EncId=" + common.myInt(Session["EncounterId"]);
        //"/Approval/Extensions.aspx?RNo=" + common.myStr(Session["RegistrationNo"])
        //                     + "&Regid=" + common.myInt(Session["RegistrationId"]) + "&RegNo=" + common.myStr(Session["RegistrationNo"])
        //                     + "&EncId=" + common.myInt(Session["EncounterId"]) + "&EncNo=" + common.myStr(Session["EncounterNo"])
        //                     + "&FromWard=Y&OP_IP=I&Category=PopUp";
        RadWindowForNew.Width = 650;
        RadWindowForNew.Height = 400;
        //RadWindowForNew.Top = 10;
        //RadWindowForNew.Left = 10;
        RadWindowForNew.OnClientClose = string.Empty;
        RadWindowForNew.Modal = true;
        RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code    
        RadWindowForNew.VisibleStatusbar = false;
        RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Reload;
    }

    protected void lnktriageform_Click(object sender, EventArgs e)
    {
        RadWindowForNew.NavigateUrl = "/EMRReports/CallAdmissionfrmrpt.aspx?ReportName=TrigData&ToeknNo=" + common.myInt(lnktriageform.CommandName).ToString();
        //RadWindow1.Height = 400;
        //RadWindow1.Width = 500;
        RadWindowForNew.Top = 50;
        RadWindowForNew.Left = 100;
        RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code 
        RadWindowForNew.InitialBehaviors = WindowBehaviors.Maximize;
        RadWindowForNew.Modal = true;
        RadWindowForNew.VisibleStatusbar = false;
    }

    private void setTabVisibility()
    {
        //clsIVF objI = new clsIVF(sConString);
        DataSet dsSpec = new DataSet();
        DataSet ds = new DataSet();
        try
        {
            //trOpticals.Visible = false;
            //trChiefComplaints.Visible = false;
            //trAllergies.Visible = false;
            //trVitals.Visible = false;
            //trHistory.Visible = false;
            //trExamination.Visible = false;
            //trPlanOfCare.Visible = false;
            //trOtherNotes.Visible = false;
            //trProvisionalDiagnosis.Visible = false;
            //trOrdersAndProcedures.Visible = false;
            //trPrescriptions.Visible = false;
            //divDiagnosisDetails.Visible = false;


            ///* New Templates*/
            //trImmunisationHistory.Visible = false;
            //trPastHistory.Visible = false;
            //trPreviousTreatment.Visible = false;
            //trNutritionalStatus.Visible = false;
            //trCostAnalysis.Visible = false;
            //trNonDrugOrder.Visible = false;
            //trPatientFamilyEducationCounseling.Visible = false;
            //trReferralsReplyToReferrals.Visible = false;
            //trAnaesthesiaCriticalCareNotes.Visible = false;
            //trMultidisciplinaryEvaluationPlanOfCare.Visible = false;
            //trTreatment.Visible = false;
            //trRemark.Visible = false;
            //trLabResult.Visible = false;

            if (common.myInt(Session["FacilityId"]) > 0)
            {


                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/getSingleScreenUserTemplates";
                APIRootClass.getSingleScreenUserTemplates objRoot = new global::APIRootClass.getSingleScreenUserTemplates();
                objRoot.SpecialisationId = common.myInt(Session["UserSpecialisationId"]);
                objRoot.FacilityId = common.myInt(Session["FacilityId"]);
                objRoot.DoctorId = common.myInt(Session["EmployeeId"]);


                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                ds = JsonConvert.DeserializeObject<DataSet>(sValue);

                //ds = objI.getSingleScreenUserTemplates(0, common.myInt(Session["FacilityId"]), common.myInt(Session["EmployeeId"]));
                ViewState["dsgetSingleScreenUserTemplates"] = ds;
                if (ds != null && ds.Tables.Count > 0)
                {
                    if (ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
                    {
                        for (int rowIdx = 0; rowIdx < ds.Tables[0].Rows.Count; rowIdx++)
                        {
                            DataRow DR = ds.Tables[0].Rows[rowIdx];
                            switch (common.myStr(DR["TemplateCode"]))
                            {
                                //case "TG"://Treatment Given
                                //    trTreatment.Visible = true;
                                //    spnTreatmentGivenStar.Visible = common.myBool(DR["IsMandatory"]);
                                //    if (common.myBool(DR["IsCollapse"]))
                                //    {
                                //        pnlTreatmentGiven.Visible = false;
                                //        imgTreatmentGiven.ImageUrl = "~/Images/plus-icon.svg";
                                //    }
                                //    break;
                                //case "IN"://Remarks
                                //    trRemark.Visible = true;
                                //    spnInstructionsStar.Visible = common.myBool(DR["IsMandatory"]);
                                //    if (common.myBool(DR["IsCollapse"]))
                                //    {
                                //        pnlInstructions.Visible = false;
                                //        imgInstructions.ImageUrl = "~/Images/plus-icon.svg";
                                //    }
                                //    break;
                                case "OVT"://Chief Complaints
                                    trOpticals.Visible = true;
                                    //spnChiefComplaintsStar.Visible = common.myBool(DR["IsMandatory"]);
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        OpticalsPanel.Visible = false;
                                        ImageOPt1.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "COM"://Chief Complaints
                                    trChiefComplaints.Visible = true;
                                    pnlChiefComplaints.Visible = true;
                                    imgbtnChiefComplaints.ImageUrl = "~/Images/minus-icon.svg";
                                    spnChiefComplaintsStar.Visible = common.myBool(DR["IsMandatory"]);
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        pnlChiefComplaints.Visible = false;
                                        imgbtnChiefComplaints.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "ALG"://Allergies
                                    trAllergies.Visible = true;
                                    spnAllergiesStar.Visible = common.myBool(DR["IsMandatory"]);
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        Panel2.Visible = false;
                                        tblAllergiesDetail.Visible = false;
                                        ImageButton3.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "IMH"://Immunisation History
                                    trImmunisationHistory.Visible = false;
                                    //spnImmunisationHistory.Visible = common.myBool(DR["IsMandatory"]);
                                    break;


                                case "VTL"://Vitals
                                    trVitals.Visible = true;
                                    pnlVitals.Visible = true;
                                    imgVbtnVital.ImageUrl = "~/Images/minus-icon.svg";
                                    spnVitalsStar.Visible = common.myBool(DR["IsMandatory"]);
                                    //if (common.myBool(DR["IsCollapse"]))
                                    //{
                                    //    pnlVitals.Visible = false;
                                    //    imgVbtnVital.ImageUrl = "~/Images/plus-icon.svg";
                                    //}
                                    break;
                                case "HIS"://History
                                    trHistory.Visible = true;
                                    pnlHistory.Visible = true;
                                    imbtnHistory.ImageUrl = "~/Images/minus-icon.svg";
                                    spnHistoryStar.Visible = common.myBool(DR["IsMandatory"]);
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        pnlHistory.Visible = false;
                                        imbtnHistory.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "PRT"://Previous Treatment
                                    trPreviousTreatment.Visible = true;
                                    spnPreviousTreatment.Visible = common.myBool(DR["IsMandatory"]);
                                    Panel3.Visible = true;
                                    ImageButton2.ImageUrl = "~/Images/minus-icon.svg";
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        Panel3.Visible = false;
                                        ImageButton2.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "EXM"://Examination
                                    trExamination.Visible = true;
                                    spnExaminationStar.Visible = common.myBool(DR["IsMandatory"]);
                                    Panel10.Visible = true;
                                    imgbtnTemplate.ImageUrl = "~/Images/minus-icon.svg";
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        Panel10.Visible = false;
                                        imgbtnTemplate.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "NTS"://Nutritional Status
                                    trNutritionalStatus.Visible = false;
                                    spnNutritionalStatus.Visible = common.myBool(DR["IsMandatory"]);
                                    Panel6.Visible = true;
                                    imgbtnTemplate.ImageUrl = "~/Images/minus-icon.svg";
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        Panel6.Visible = false;
                                        imgbtnTemplate.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "POC"://Plan Of Care
                                    trPlanOfCare.Visible = true;
                                    spnPlanOfCareStar.Visible = common.myBool(DR["IsMandatory"]);
                                    Panel13.Visible = false;
                                    ImageButton4.ImageUrl = "~/Images/minus-icon.svg";
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        Panel13.Visible = false;
                                        ImageButton4.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "COA"://Cost Analysis
                                    trCostAnalysis.Visible = false;
                                    spnCostAnalysis.Visible = common.myBool(DR["IsMandatory"]);
                                    Panel14.Visible = true;
                                    ImageButton4.ImageUrl = "~/Images/minus-icon.svg";
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        Panel14.Visible = false;
                                        ImageButton4.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "OTN"://Other Notes
                                    trOtherNotes.Visible = true;
                                    imgbtntherNotes.ImageUrl = "~/Images/minua-icon.svg";
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        pnlOtherNotes.Visible = false;
                                        imgbtntherNotes.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "PDG"://Provisional Diagnosis
                                    trProvisionalDiagnosis.Visible = true;
                                    spnProvisionalDiagnosisStar.Visible = common.myBool(DR["IsMandatory"]);
                                    imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/minus-icon.svg";
                                    pnlProvisionalDiagnosis.Visible = true;
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        pnlProvisionalDiagnosis.Visible = false;
                                        imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "ORD"://Orders And Procedures
                                    trOrdersAndProcedures.Visible = true;
                                    pnlOrderProcedures.Visible = true;
                                    gvOrdersAndProcedures.Visible = true;
                                    imgbtnOrdersAndProcedures.ImageUrl = "~/Images/minus-icon.svg";
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        pnlOrderProcedures.Visible = false;
                                        //gvOrdersAndProcedures.Visible = false;bhakti
                                        imgbtnOrdersAndProcedures.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "PRS"://Prescriptions
                                    trPrescriptions.Visible = true;
                                    pnlPrescription.Visible = true;
                                    gvPrescriptions.Visible = true;
                                    imgbtnPrescription.ImageUrl = "~/Images/minus-icon.svg";
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        pnlPrescription.Visible = false;
                                        gvPrescriptions.Visible = false;
                                        imgbtnPrescription.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "NDO"://Non Drug Order
                                    trNonDrugOrder.Visible = true;
                                    Panel20.Visible = true;
                                    spnNonDrugOrder.Visible = common.myBool(DR["IsMandatory"]);
                                    imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/minus-icon.svg";
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        Panel20.Visible = false;
                                        imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "ATM"://Attach Documents
                                           ////trAttachDocuments.Visible = true;
                                    break;
                                case "PFE"://Patient and family education and counseling
                                    trPatientFamilyEducationCounseling.Visible = true;

                                    break;
                                case "RRR"://Referrals and Reply to referrals
                                    trReferralsReplyToReferrals.Visible = true;
                                    break;
                                case "ACN"://Anaesthesia and Critical care notes
                                    trAnaesthesiaCriticalCareNotes.Visible = true;
                                    break;
                                case "MEP"://Multidisciplinary evaluation and plan of care
                                    trMultidisciplinaryEvaluationPlanOfCare.Visible = true;
                                    break;
                                case "DGN"://Diagnosis
                                    divDiagnosisDetails.Visible = true;
                                    pnlDiagnosis.Visible = true;
                                    ImageButton13.ImageUrl = "~/Images/minus-icon.svg";
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        pnlDiagnosis.Visible = false;
                                        ImageButton13.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "PH"://Past History
                                    trPastHistory.Visible = true;
                                    Panel23.Visible = true;
                                    imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/minus-icon.svg";
                                    spnPastHistory.Visible = common.myBool(DR["IsMandatory"]);
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        Panel23.Visible = false;
                                        imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "PCN"://PAC Notes
                                    trPACTemplates.Visible = true;
                                    pnlPACTemplates.Visible = true;
                                    imgpnlPACTemplates.ImageUrl = "~/Images/minus-icon.svg";
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        pnlPACTemplates.Visible = false;
                                        imgpnlPACTemplates.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "OTR"://OT Request
                                    trOTRequest.Visible = true;
                                    pnlOTRequest.Visible = true;
                                    imgExpndOTRequest.ImageUrl = "~/Images/minus-icon.svg";
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        // pnlOTRequest.Visible = false;
                                        pnlOTRequest.Visible = false;
                                        imgExpndOTRequest.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                //case "LAB"://LAB
                                //    trLabResult.Visible = true;
                                //    break;
                                case "IN"://Remarks
                                    trRemarks.Visible = true;
                                    spnRemarks.Visible = common.myBool(DR["IsMandatory"]);
                                    PanelRemarks.Visible = false;
                                    ImageButtonRemarks.ImageUrl = "~/Images/minus-icon.svg";
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        PanelRemarks.Visible = false;
                                        ImageButtonRemarks.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "UP"://Remarks
                                    trFollowup.Visible = true;
                                    SpanFollowup.Visible = common.myBool(DR["IsMandatory"]);
                                    PanelFollowup.Visible = false;
                                    ImageButtonFollowup.ImageUrl = "~/Images/minus-icon.svg";
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        PanelFollowup.Visible = false;
                                        ImageButtonFollowup.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                                case "MDFT"://Ritika (12-09-2022) Free Text
                                    trFreeText.Visible = true;
                                    spnFreeText.Visible = common.myBool(DR["IsMandatory"]);
                                    PanelFreeText.Visible = false;
                                    ImageButtonFreeText.ImageUrl = "~/Images/minus-icon.svg";
                                    if (common.myBool(DR["IsCollapse"]))
                                    {
                                        PanelFreeText.Visible = false;
                                        ImageButtonFreeText.ImageUrl = "~/Images/plus-icon.svg";
                                    }
                                    break;
                            }
                        }
                        if (ds.Tables.Count > 1)
                        {
                            DataView dv = ds.Tables[1].DefaultView;
                            dv.RowFilter = "GroupName = 'Anesthesia and critical care'";
                            if (dv.ToTable().Rows.Count > 0)
                                hdnAnesthesiaAndCriticalCareGroupId.Value = dv.ToTable().Rows[0]["GroupId"].ToString();
                            dv = ds.Tables[1].DefaultView;
                            dv.RowFilter = "GroupName = 'PAC Notes'";
                            hdnPACNotesGroupId.Value = dv.ToTable().Rows[0]["GroupId"].ToString();
                        }
                    }
                    else
                    {
                        btnSave.Visible = false;
                    }
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
        }
    }

    private bool ValidatTemplate()
    {
        DataSet ds = new DataSet();
        DataView DV = new DataView();
        ds = (DataSet)ViewState["dsgetSingleScreenUserTemplates"];
        try
        {
            if (ds != null)
            {
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        DV = ds.Tables[0].DefaultView;
                        //Chief Complaints      [COM]
                        DV.RowFilter = "TemplateCode='COM' AND IsMandatory=true";
                        //if (DV.ToTable().Rows.Count > 0)
                        //{
                        //    // trChiefComplaints.Visible = true;
                        //    if (common.myInt(gvProblemDetails.Rows.Count).Equals(1) && common.myStr(editorChiefComplaints.Text).Equals(string.Empty))
                        //    {
                        //        GridViewRow gv1 = gvProblemDetails.Rows[0];
                        //        TextBox txteditorProblem = (TextBox)gv1.FindControl("editorProblem");
                        //        string strProblem = txteditorProblem.Text.Trim();
                        //        if (strProblem.Equals(string.Empty))
                        //        {
                        //            Alert.ShowAjaxMsg("Please enter chief complaints !", Page.Page);
                        //            txteditorProblem.Focus();
                        //            return false;
                        //        }
                        //    }
                        //}
                        DV.RowFilter = string.Empty;
                        //Allergies             [ALG]                        
                        //DV.RowFilter = "TemplateCode='ALG' AND IsMandatory=true";
                        //if (DV.ToTable().Rows.Count > 0)
                        //{
                        //    //trAllergies.Visible = true;
                        //    if (common.myInt(gvAllergies.Rows.Count).Equals(0) && !chkNoAllergies.Checked)
                        //    {
                        //        Alert.ShowAjaxMsg("Please enter allergies !", Page.Page);
                        //        chkNoAllergies.Focus();
                        //        return false;
                        //    }
                        //}
                        //DV.RowFilter = string.Empty;


                        //Allergies[ALG]
                        DV.RowFilter = "TemplateCode='ALG' AND IsMandatory=true";
                        if (DV.ToTable().Rows.Count > 0)
                        {
                            //trAllergies.Visible = true;
                            if ((common.myLen(editorAllergy.Text).Equals(0) && (common.myInt(ddlBrand.SelectedValue).Equals(0) || common.myInt(ddlAllergySeverity.SelectedValue).Equals(0))) && (!chkNoAllergies.Checked))
                            {
                                Alert.ShowAjaxMsg("Please enter allergies !", Page.Page);
                                chkNoAllergies.Focus();
                                return false;
                            }
                        }
                        DV.RowFilter = string.Empty;
                        //Vitals                [VTL]                        
                        DV.RowFilter = "TemplateCode='VTL' AND IsMandatory=true";
                        //if (DV.ToTable().Rows.Count > 0)
                        //{
                        //    //  trVitals.Visible = true;
                        //    if (common.myInt(gvVitals.Rows.Count).Equals(0))
                        //    {
                        //        if ((txtHeight.Text).Equals(string.Empty)
                        //        && (TxtWeight.Text).Equals(string.Empty) && (txtHC.Text).Equals(string.Empty) && (TxtTemperature.Text).Equals(string.Empty)
                        //        && (txtRespiration.Text).Equals(string.Empty) && (txtPulse.Text).Equals(string.Empty) && (txtBPSystolic.Text).Equals(string.Empty)
                        //        && (txtBPDiastolic.Text).Equals(string.Empty) && (txtMAC.Text).Equals(string.Empty) && (txtSpO2.Text).Equals(string.Empty)
                        //        && (txtBMI.Text).Equals(string.Empty) && (txtBSA.Text).Equals(string.Empty))
                        //        {
                        //            Alert.ShowAjaxMsg("Please enter vitals !", Page.Page);
                        //            txtHeight.Focus();
                        //            return false;
                        //        }
                        //    }
                        //}
                        DV.RowFilter = string.Empty;
                        //History               [HIS]                        
                        DV.RowFilter = "TemplateCode='HIS' AND IsMandatory=true";
                        if (DV.ToTable().Rows.Count > 0)
                        {
                            if (common.myInt(gvHistory.Rows.Count).Equals(1))
                            {
                                GridViewRow gv1 = gvHistory.Rows[0];
                                TextBox txteditorHistory = (TextBox)gv1.FindControl("editorHistory");
                                string streditorHistory = txteditorHistory.Text.Trim();
                                if (streditorHistory.Equals(string.Empty) && common.myStr(txtWHistory.Text).Equals(string.Empty))
                                {
                                    Alert.ShowAjaxMsg("Please enter history !", Page.Page);
                                    txteditorHistory.Focus();
                                    return false;
                                }
                            }
                        }
                        DV.RowFilter = string.Empty;
                        //Examination           [EXM]                        
                        DV.RowFilter = "TemplateCode='EXM' AND IsMandatory=true";
                        if (DV.ToTable().Rows.Count > 0)
                        {
                            if (common.myInt(gvExamination.Rows.Count).Equals(1) && common.myStr(txtWExamination.Text).Equals(string.Empty))
                            {
                                GridViewRow gv1 = gvExamination.Rows[0];
                                TextBox txteditorExamination = (TextBox)gv1.FindControl("editorExamination");
                                string strExamination = txteditorExamination.Text.Trim();
                                if (strExamination.Equals(string.Empty))
                                {
                                    Alert.ShowAjaxMsg("Please enter examination !", Page.Page);
                                    txteditorExamination.Focus();
                                    return false;
                                }
                            }
                        }
                        DV.RowFilter = string.Empty;
                        // TG 
                        //DV.RowFilter = "TemplateCode='TG' AND IsMandatory=true";
                        //if (DV.ToTable().Rows.Count > 0)
                        //{
                        //    if (common.myInt(gvTreatmentGiven.Rows.Count).Equals(1))
                        //    {
                        //        GridViewRow gv1 = gvTreatmentGiven.Rows[0];
                        //        TextBox txteditorTreatmentGiven = (TextBox)gv1.FindControl("editorTreatmentGiven");
                        //        string strTreatmentGiven = txteditorTreatmentGiven.Text.Trim();
                        //        if (strTreatmentGiven.Equals(string.Empty))
                        //        {
                        //            Alert.ShowAjaxMsg("Please enter Treatment Given details !", Page.Page);
                        //            txteditorTreatmentGiven.Focus();
                        //            return false;
                        //        }
                        //    }
                        //}
                        //DV.RowFilter = string.Empty;
                        //Plan Of Care          [POC]                        
                        DV.RowFilter = "TemplateCode='POC' AND IsMandatory=true";
                        if (DV.ToTable().Rows.Count > 0)
                        {
                            // trPlanOfCare.Visible = true;
                            if (common.myInt(gvPlanOfCare.Rows.Count).Equals(1) && common.myStr(txtWPlanOfCare.Text).Equals(string.Empty))
                            {
                                GridViewRow gv1 = gvPlanOfCare.Rows[0];
                                TextBox txteditorPlanOfCare = (TextBox)gv1.FindControl("editorPlanOfCare");
                                string strPlanOfCare = txteditorPlanOfCare.Text.Trim();
                                if (strPlanOfCare.Equals(string.Empty))
                                {
                                    Alert.ShowAjaxMsg("Please enter plan of care !", Page.Page);
                                    txteditorPlanOfCare.Focus();
                                    return false;
                                }
                            }
                        }
                        DV.RowFilter = string.Empty;
                        //Other Notes           [OTN]                        
                        //DV.RowFilter = "TemplateCode='OTN' AND IsMandatory=true";
                        //if (DV.ToTable().Rows.Count > 0)
                        //{
                        //    //trOtherNotes.Visible = true;gvOtherNotes
                        //    if (common.myInt(gvOtherNotes.Rows.Count).Equals(1))
                        //    {
                        //        Alert.ShowAjaxMsg("Please enter other notes !", Page.Page);
                        //        return false;
                        //    }
                        //}
                        //DV.RowFilter = string.Empty;
                        //Provisional Diagnosis [PDG]                        
                        DV.RowFilter = "TemplateCode='PDG' AND IsMandatory=true";
                        if (DV.ToTable().Rows.Count > 0)
                        {
                            //trProvisionalDiagnosis.Visible = true; gvData
                            if (common.myInt(gvData.Rows.Count).Equals(1))
                            {
                                GridViewRow gv1 = gvData.Rows[0];
                                TextBox txteditorProvisionalDiagnosis = (TextBox)gv1.FindControl("editorProvisionalDiagnosis");
                                string strProvisionalDiagnosis = txteditorProvisionalDiagnosis.Text.Trim();
                                if (strProvisionalDiagnosis.Equals(string.Empty) && common.myInt(ddlDiagnosisSearchCodes.SelectedValue).Equals(0))
                                {
                                    Alert.ShowAjaxMsg("Please enter provisional diagnosis !", Page.Page);
                                    txteditorProvisionalDiagnosis.Focus();
                                    return false;
                                }
                            }
                        }
                        DV.RowFilter = string.Empty;

                        #region new Templates addition
                        // Past History PH
                        DV.RowFilter = "TemplateCode='PH' AND IsMandatory=true";
                        if (DV.ToTable().Rows.Count > 0)
                        {
                            if (common.myInt(gvPHistory.Rows.Count).Equals(1) && common.myStr(txtPHistory.Text).Equals(string.Empty))
                            {
                                GridViewRow gv1 = gvPHistory.Rows[0];
                                TextBox txteditorHistory = (TextBox)gv1.FindControl("editorHistory");
                                string strHistory = txteditorHistory.Text.Trim();
                                if (strHistory.Equals(string.Empty))
                                {
                                    Alert.ShowAjaxMsg("Please enter Past History !", Page.Page);
                                    txteditorHistory.Focus();
                                    return false;
                                }
                            }
                        }
                        DV.RowFilter = string.Empty;
                        //Previous Treatment     [PT]
                        DV.RowFilter = "TemplateCode='PT' AND IsMandatory=true";
                        if (DV.ToTable().Rows.Count > 0)
                        {
                            if (common.myInt(gvPrevTreatment.Rows.Count).Equals(1) && common.myStr(txtWPrevTreatment.Text).Equals(string.Empty))
                            {
                                GridViewRow gv1 = gvPrevTreatment.Rows[0];
                                TextBox txteditorPrevTreatment = (TextBox)gv1.FindControl("editorPrevTreatment");
                                string strPrevTreatment = txteditorPrevTreatment.Text.Trim();
                                if (strPrevTreatment.Equals(string.Empty))
                                {
                                    Alert.ShowAjaxMsg("Please enter Previous Treatment !", Page.Page);
                                    txteditorPrevTreatment.Focus();
                                    return false;
                                }
                            }
                        }
                        DV.RowFilter = string.Empty;

                        // Nutritional Status NTS
                        DV.RowFilter = "TemplateCode='NTS' AND IsMandatory=true";
                        if (DV.ToTable().Rows.Count > 0)
                        {
                            if (common.myInt(gvNutritional.Rows.Count).Equals(1) && common.myStr(txtWNutritionalStatus.Text).Equals(string.Empty))
                            {
                                GridViewRow gv1 = gvNutritional.Rows[0];
                                TextBox txteditorNutritional = (TextBox)gv1.FindControl("editorNutritional");
                                string streditorNutritional = txteditorNutritional.Text.Trim();
                                if (streditorNutritional.Equals(string.Empty))
                                {
                                    Alert.ShowAjaxMsg("Please enter Nutritional Status !", Page.Page);
                                    txteditorNutritional.Focus();
                                    return false;
                                }
                            }
                        }
                        DV.RowFilter = string.Empty;


                        //Cost Analysis     [COA]
                        DV.RowFilter = "TemplateCode='COA' AND IsMandatory=true";
                        if (DV.ToTable().Rows.Count > 0)
                        {
                            if (common.myInt(gvCostAnalysis.Rows.Count).Equals(1) && common.myStr(txtWCostAnalysis.Text).Equals(string.Empty))
                            {
                                GridViewRow gv1 = gvCostAnalysis.Rows[0];
                                TextBox txteditorCostAnalysis = (TextBox)gv1.FindControl("editorCostAnalysis");
                                string strCostAnalysis = txteditorCostAnalysis.Text.Trim();
                                if (strCostAnalysis.Equals(string.Empty))
                                {
                                    Alert.ShowAjaxMsg("Please enter Cost Analysis !", Page.Page);
                                    txteditorCostAnalysis.Focus();
                                    return false;
                                }
                            }
                        }
                        DV.RowFilter = string.Empty;


                        //Non Drug Order [NDO]
                        DV.RowFilter = "TemplateCode='NDO' AND IsMandatory=true";
                        if (DV.ToTable().Rows.Count > 0)
                        {
                            if (common.myInt(gvNonDrugOrder.Rows.Count).Equals(1) && common.myStr(editorNonDrugOrder.Text).Equals(string.Empty))
                            {
                                GridViewRow gv1 = gvNonDrugOrder.Rows[0];
                                TextBox txtedNonDrugOrder = (TextBox)gv1.FindControl("edNonDrugOrder");
                                string stredNonDrugOrder = txtedNonDrugOrder.Text.Trim();
                                if (stredNonDrugOrder.Equals(string.Empty) && (common.myInt(ddlOrderType.SelectedValue).Equals(0) || common.myInt(ddlDoctor.SelectedValue).Equals(0)))
                                {
                                    Alert.ShowAjaxMsg("Please enter Non Drug Order !", Page.Page);
                                    editorNonDrugOrder.Focus();
                                    return false;
                                }
                            }
                        }
                        DV.RowFilter = string.Empty;
                        //Remarks     [IN]
                        //DV.RowFilter = "TemplateCode='IN' AND IsMandatory=true";
                        //if (DV.ToTable().Rows.Count > 0)
                        //{
                        //    // trRemark.Visible = true;
                        //    if (common.myInt(gvRemarks.Rows.Count).Equals(1))
                        //    {
                        //        GridViewRow gv1 = gvRemarks.Rows[0];
                        //        TextBox txteditorRemarks = (TextBox)gv1.FindControl("editorRemarks");
                        //        string streditorRemarks = txteditorRemarks.Text.Trim();
                        //        if (streditorRemarks.Equals(string.Empty))
                        //        {
                        //            Alert.ShowAjaxMsg("Please enter instructions !", Page.Page);
                        //            txteditorRemarks.Focus();
                        //            return false;
                        //        }
                        //    }
                        //}
                        //DV.RowFilter = string.Empty;
                        //Remarks     [IN]
                        //DV.RowFilter = "TemplateCode='IN' AND IsMandatory=true";
                        //if (DV.ToTable().Rows.Count > 0)
                        //{
                        //    // trRemark.Visible = true;
                        //    if (common.myInt(gvRemarks.Rows.Count).Equals(1))
                        //    {
                        //        GridViewRow gv1 = gvRemarks.Rows[0];
                        //        TextBox txteditorRemarks = (TextBox)gv1.FindControl("editorRemarks");
                        //        string streditorRemarks = txteditorRemarks.Text.Trim();
                        //        if (streditorRemarks.Equals(string.Empty))
                        //        {
                        //            Alert.ShowAjaxMsg("Please enter instructions !", Page.Page);
                        //            txteditorRemarks.Focus();
                        //            return false;
                        //        }
                        //    }
                        //}
                        //DV.RowFilter = string.Empty;
                        #endregion
                    }
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        return true;
    }
    protected void lnkCopyLastPrescription_Click(object sender, EventArgs e)
    {
        try
        {
            RadWindowForNew.NavigateUrl = "/EMR/Dashboard/PopUpPatientDashboardForDoctorNew.aspx?From=POPUP&CloseButtonShow=Yes";
            RadWindowForNew.Width = 650;
            RadWindowForNew.Height = 400;
            //RadWindowForNew.Top = 10;
            //RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "CopyLastPrescription";
            RadWindowForNew.VisibleOnPageLoad = true;
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            //  RadWindowForNew.Behaviors = WindowBehaviors.Maximize | WindowBehaviors.Minimize | WindowBehaviors.Close | WindowBehaviors.Move | WindowBehaviors.Pin;
            RadWindowForNew.InitialBehaviors = WindowBehaviors.Reload;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnEnableControl_OnClick(object sender, EventArgs e)
    {
        try
        {
            if (hdnButtonId.Value != "" && hdnButtonId.Value != "undefined")
            {
                string ButtonId = hdnButtonId.Value;
                switch (ButtonId)
                {
                    case "btnAddChiefComplaintsClose":
                        RetrievePatientProblemsDetail();
                        chkNoAllergies.Focus();
                        break;
                    case "btnAddAllergyClose":
                        btnAddVitalsClose.Focus();
                        Response.Redirect(Request.RawUrl.ToString()); // redirect on itself
                        break;
                    case "btnAddVitalsClose":
                        bindVitals();
                        break;
                    case "btnBindhistoryHistory":
                        BindHistoryData("HIS");
                        imgBtnTemplates.Focus();
                        break;
                    case "btnBindhistoryAddTemplate":
                        BindCommonData(string.Empty, string.Empty, string.Empty, 0, 1);
                        imgBtnTemplates.Focus();
                        break;
                    case "btnBindhistoryExamination":
                        BindHistoryData("EXM");
                        imgbtnAddOrdersAndProcedures.Focus();
                        break;
                    case "btnAddOrdersAndProceduresClose":
                        bindOrdersAndProcedures();
                        break;
                    case "btnBindOrderGrid":
                        BindGridOrders();
                        break;
                    case "btnProvisionalDiagnosisClose":
                        BindCommonData("Provisional Diagnosis", "S", string.Empty, 0, 1);
                        imgBtnFinalDiagnosis.Focus();
                        break;
                    case "btnFinalDiagnosisClose":
                        BindCommonData("Diagnosis", "S", string.Empty, 0, 1);
                        imgBtnAddPrescriptions.Focus();
                        break;
                    case "btnAddDiagnosisSerchOnClientClose":
                        BindDiagnosisSearchCode();
                        imgBtnAddPrescriptions.Focus();
                        break;
                    case "btnAddPrescriptionsClose":
                        bindPrescriptions();
                        break;
                    case "btnBindPresGrid":
                        BindGrid();
                        break;
                    case "btnBindInstructionsTemplate":
                        BindHistoryData("EXM");
                        break;
                    case "btnBindhistoryPOF":
                        BindHistoryData("POC");
                        break;
                    case "btnBindOrderPriscriptionPlaneOfCare":
                        BindCommonData(string.Empty, string.Empty, string.Empty, 0, 1);
                        break;
                    case "btnReloadSingleScreen":
                        BindCommonData(string.Empty, string.Empty, string.Empty, 0, 1);
                        break;
                    case "":
                        BindCommonData(string.Empty, string.Empty, string.Empty, 0, 1);
                        break;
                }
            }
            else
            {
                BindCommonData(string.Empty, string.Empty, string.Empty, 0, 1);
            }
            if (chkNoAllergies.Checked)
            {
                ddlBrand.Enabled = false;
                ddlAllergySeverity.Enabled = false;
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    public void BindGridOrders()
    {
        BindCommonData("Orders And Procedures", "S", string.Empty, 0, 1);
        if (common.myStr(Session["PlanOfCare"]) != null || common.myStr(Session["PlanOfCare"]) != string.Empty)
        {
            GridViewRow gridPlanOfCare = gvPlanOfCare.Rows[0];
            TextBox txteditorPlanOfCare = (TextBox)gridPlanOfCare.FindControl("editorPlanOfCare");
            txteditorPlanOfCare.Text = common.clearHTMLTags(common.myStr(Session["PlanOfCare"]));
        }
    }

    public void BindGrid()
    {
        BindCommonData("Prescription", "S", string.Empty, 0, 1);
    }


    public void bindTestData()
    {
        try
        {

            //setDate();
            // string sConStrings = "server=akhil;database=paras;uid=sa;pwd=;MultipleActiveResultSets=True; MAX POOL SIZE=300;";
            // BaseC.clsLISLabOther objval = new BaseC.clsLISLabOther(sConStrings);

            DataTable dt = new DataTable();
            // BaseC.clsLISPhlebotomy objval = new BaseC.clsLISPhlebotomy(sConString);
            int iProviderID = common.myInt(Session["EmployeeId"]);

            int pageindex = 0;

            string
                RegNo = "",
                Pname = "";
            //if (gvResultFinal.Rows.Count > 0)
            //{
            //    pageindex = gvResultFinal.PageIndex + 1;
            //}
            //else
            //{
            //    pageindex = 1;
            //}
            //if (ddlSearch.Visible)
            //{
            //    if (ddlSearch.SelectedValue == "IP")
            //    {
            //        EncounterNo = txtSearchCretria.Text.Trim();
            //    }
            //    else if (ddlSearch.SelectedValue == "PN")
            //    {
            //        Pname = txtSearchCretria.Text.Trim();
            //    }
            //    else if (ddlSearch.SelectedValue == "RN")
            //    {
            //        RegNo = common.myInt(txtSearchCretria.Text).ToString();
            //    }
            //}

            //if (common.myInt(Request.QueryString["mainRegNo"]) > 0)
            //{
            //    RegNo = common.myStr(Request.QueryString["mainRegNo"]);
            //}

            if (common.myInt(RegNo).Equals(0))
            {
                RegNo = string.Empty;
            }

            lblMessage.Text = "";
            //gvResultFinal.DataSource = null;
            //gvResultFinal.DataBind();
            bool isER = false;
            //if (Request.QueryString["IsER"] != null)
            //{
            //    if (common.myInt(Request.QueryString["IsER"]) == 1)
            //    {
            //        isER = true;
            //        lblheader.Text = "Lab Result  [ER]  ";
            //    }
            //}

            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;
            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/getPatientLabResultHistoryDash";
            APIRootClass.LabResultHistory objRoot = new global::APIRootClass.LabResultHistory();
            objRoot.FacilityId = common.myInt(Session["FacilityID"]);
            objRoot.iHostId = common.myInt(Session["HospitalLocationID"]);
            objRoot.fromDate = "";
            objRoot.toDate = "";
            objRoot.iRegNo = common.myStr(RegNo);
            objRoot.iProviderId = iProviderID;
            objRoot.iPageSize = 15;
            objRoot.iPageNo = 1;
            objRoot.AbnormalResult = false;
            objRoot.CriticalResult = false;
            objRoot.iStatusId = common.myInt(0);
            objRoot.iLoginFacilityId = common.myInt(Session["FacilityID"]);
            objRoot.chvEncounterNo = common.myStr(Session["EncounterNo"]);
            objRoot.ReviewedStatus = common.myInt(0);
            objRoot.PatientName = common.myStr(Pname);
            objRoot.iUserId = common.myInt(Session["UserId"]);

            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);
            DataSet ds = JsonConvert.DeserializeObject<DataSet>(sValue);


            if (ds.Tables[0].Rows.Count > 0)
            {
                DataView dv = ds.Tables[0].DefaultView;
                dv.RowFilter = "AuditDiagSampleId = 1";
                //lblResultChanged.Text = " Result changed after provisional release : " + dv.Count.ToString();
                //if (common.myInt(dv.Count) > 0)
                //    lblResultChanged.CssClass = "blink";
                //else
                //    lblResultChanged.CssClass = "noblink";

                dv.RowFilter = "";
                dv.RowFilter = "ReviewedStatus = 1";
                Label lbl = Master.FindControl("labResultId") as Label;
                int count = (common.myInt(ds.Tables[0].Rows.Count) - common.myInt(dv.Count));
                if (count > 9)
                {
                    lbl.Text = "9" + "<sup>+</sup>";
                }
                else
                {
                    lbl.Text = "" + (common.myInt(ds.Tables[0].Rows.Count) - common.myInt(dv.Count));
                }


                //if ((common.myInt(ds.Tables[0].Rows.Count) - common.myInt(dv.Count)) > 0)
                //    lblNew.CssClass = "blink";
                //else
                //    lblNew.CssClass = "noblink";
            }


        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;

        }
    }

    //protected void btnTreatmentPlan_Click1(object sender, EventArgs e)
    //{
    //    ScriptManager.RegisterClientScriptBlock(Page, typeof(Page), "Script", "TreatmentPlan();", true);

    //}

    // Add Dignosis

    public void ddlDiagnosiss_OnItemsRequested(object sender, RadComboBoxItemsRequestedEventArgs e)
    {
        DataTable data = new DataTable();
        try
        {

            data = CreateTable();
            data = PopulateAllDiagnosis(e.Text);

            int itemOffset = e.NumberOfItems;
            if (itemOffset == 0)
            {
                this.ddlDiagnosiss.Items.Clear();
            }
            int endOffset = Math.Min(itemOffset + 50, data.Rows.Count);
            e.EndOfItems = endOffset == data.Rows.Count;

            for (int i = itemOffset; i < endOffset; i++)
            {
                //RadCmbPatientSearch.Items.Add(new RadComboBoxItem(data.Rows[i]["CompanyName"].ToString(), data.Rows[i]["CompanyName"].ToString()));
                RadComboBoxItem item = new RadComboBoxItem();
                item.Text = (string)data.Rows[i]["ICDDescription"];
                item.Value = data.Rows[i]["ICDID"].ToString();
                item.Attributes["ICDID"] = data.Rows[i]["ICDID"].ToString();
                item.Attributes["ICDCode"] = data.Rows[i]["ICDCode"].ToString();
                item.Attributes["ICDDescription"] = data.Rows[i]["ICDDescription"].ToString();

                this.ddlDiagnosiss.Items.Add(item);
                item.DataBind();
            }
            e.Message = GetStatusMessage(endOffset, data.Rows.Count);
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            // objException.HandleException(Ex);
        }
        finally
        {
            data.Dispose();
        }


    }
    private DataTable PopulateAllDiagnosis(string txt)
    {
        DataTable DT = new DataTable();
        DataSet ds = new DataSet();
        DataTable dt = new DataTable();
        try
        {

            ViewState["BTN"] = "ALL";

            if (Session["encounterid"] != null)
            {
                //objDiag = new BaseC.DiagnosisDA(sConString);


                //ds = objDiag.BindDiagnosis(common.myInt(ddlCategory.SelectedValue), common.myInt(ddlSubCategory.SelectedValue), strSearchCriteria); 

                string strSearchCriteria = string.Empty;

                strSearchCriteria = "%" + common.myStr(txt, true) + "%";

                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/BindDiagnosis";
                APIRootClass.BindDiagnosis objRoot = new global::APIRootClass.BindDiagnosis();
                objRoot.DiagnosisGroupId = 0;
                objRoot.DiagnosisSubGroupId = 0;
                objRoot.DiagnosisCode = strSearchCriteria;

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                ds = JsonConvert.DeserializeObject<DataSet>(sValue);


                if (ds.Tables[0].Rows.Count > 0)
                {

                    dt = ds.Tables[0];
                    dt.Columns.Add("Id");
                    dt.Columns.Add("EncounterDate");
                    DT = dt;
                }
                else
                {
                    //BindBlankGrid();
                }
            }

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            //objException.HandleException(Ex);
        }
        finally
        {
            ds.Dispose();
            dt.Dispose();
        }

        return DT;
    }
    protected DataTable CreateTable()
    {
        DataTable Dt = new DataTable();
        DataColumn dc = new DataColumn("ID");
        dc.DefaultValue = 0;
        Dt.Columns.Add(dc);
        Dt.Columns.Add("ICDID");
        Dt.Columns.Add("IcdCode");
        Dt.Columns.Add("ICDDescription");
        Dt.Columns.Add("OnsetDate");
        Dt.Columns.Add("OnsetDateWithoutFormat");
        Dt.Columns.Add("LocationId");
        Dt.Columns.Add("PrimaryDiagnosis");
        Dt.Columns.Add("IsChronic");
        Dt.Columns.Add("IsQuery");
        Dt.Columns.Add("ConditionIds");
        Dt.Columns.Add("TypeId");
        Dt.Columns.Add("IsResolved");
        Dt.Columns.Add("DoctorId");
        Dt.Columns.Add("FacilityId");
        Dt.Columns.Add("Remarks");
        //yogesh
        Dt.Columns.Add("ProvisionalFinalDiagnosis");
        Dt.Columns.Add("IsFinalDiagnosis");
        // Dt.Columns.Add("IsResolved");

        Dt.Columns.Add("TemplateFieldId");
        // Dt.Columns.Add("IsFinalDiagnosis");
        Dt.Columns.Add("EncodedBy", System.Type.GetType("System.Int32"));


        return Dt;
    }
    protected void btnAddtogrid_Click(object sender, EventArgs e)
    {
        DataSet ds = new DataSet();
        try
        {
            //objDiag = new BaseC.DiagnosisDA(sConString);
            StringBuilder strXMLAleart = new StringBuilder();
            ArrayList coll = new ArrayList();

            //DataSet ds = objDiag.CheckDiagnosisExcluded(common.myInt(Session["HospitalLocationId"]),
            //                        common.myInt(Session["Facilityid"]), common.myInt(Session["RegistrationId"]), txtIcdCodes.Text);

            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;
            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/CheckDiagnosisExcluded";
            APIRootClass.CheckDiagnosisExcluded objRoot = new global::APIRootClass.CheckDiagnosisExcluded();
            objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
            objRoot.Facilityid = common.myInt(Session["Facilityid"]);
            objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
            objRoot.IcdCode = txtIcdCodes.Text;

            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);
            ds = JsonConvert.DeserializeObject<DataSet>(sValue);

            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    //divExcludedService.Visible = true;
                    return;
                }
            }
            saveData();

            btnFinalDiagnosisClose_OnClick(null, null);
            RetrievePatientDiagnosis();
            //  Page.ClientScript.RegisterStartupScript(this.GetType(), "Get", "BindPatientDiagnosis();", true);
            ScriptManager.RegisterClientScriptBlock(this.Page, this.GetType(), "MyFun", "BindPatientDiagnosis();", true);

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            //objException.HandleException(Ex);
        }
        finally
        {
            ds.Dispose();
        }
    }
    public void saveData()
    {
        StringBuilder strXMLAleart = new StringBuilder();
        ArrayList coll = new ArrayList();
        ScriptManager.RegisterStartupScript(Page, GetType(), "scrip1", "nSat=0;", true);
        DataSet dsprimary = new DataSet();
        DataSet ds = new DataSet();
        try
        {
            if (ddlDiagnosiss.Text.Trim() == "")
            {
                hdnIsUnSavedData.Value = "0";
                return;
            }
            if (btnAddtogrid.Text == "Add")
            {
                if (common.myInt(ddlDiagnosiss.SelectedValue) == 0)
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                    lblMessage.Text = "";
                    hdnIsUnSavedData.Value = "0";
                    Alert.ShowAjaxMsg("Please Select Diagnosis !", this.Page);
                    return;
                }
            }

            //if (rblShowNote.SelectedIndex == -1)
            //{
            //    Alert.ShowAjaxMsg("Would you like to show update data in Notes. Please Select Show in Note Option Yes or No ? ", this.Page);
            //    return;
            //}

            object ob;
            //DateTime dt=new DateTime();
            string dt = "";

            //if (rdpOnsetDate.SelectedDate != null)
            //{
            //    dt = common.myStr(rdpOnsetDate.SelectedDate);

            //    ob = dt;
            //}
            //else
            //{
            //    ob = DBNull.Value;
            //}
            if (btnAddtogrid.Text != "Update List")
            {
                if (gvDiagnosisDetails.Rows.Count == 1)
                {
                    chkPrimarys.Checked = true;
                }
            }
            //string strSQL = "";
            //Hashtable hash2 = new Hashtable();

            //hash2.Add("@inticdid", hdnDiagnosisId.Value);
            //hash2.Add("@intRegistrationId", Convert.ToInt32(Session["RegistrationID"]));
            //hash2.Add("@intEncounterId", Convert.ToInt32(Session["EncounterID"]));
            //BaseC.DiagnosisDA ObjDiagnosis = new BaseC.DiagnosisDA(sConString);
            if (chkPrimarys.Checked)
            {
                //DataSet dsprimary = ObjDiagnosis.SelectDiagnosispatientdtl(common.myInt(hdnDiagnosisId.Value), common.myInt(Session["RegistrationID"]),
                //                                common.myInt(Session["EncounterID"]));
                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/CheckPatientPrimaryDiagnosis";
                APIRootClass.CheckPatientPrimaryDiagnosis objRoot = new global::APIRootClass.CheckPatientPrimaryDiagnosis();
                objRoot.DiagnosisId = common.myInt(hdnDiagnosisId.Value);
                objRoot.EncounterId = common.myInt(Session["EncounterID"]);
                objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);


                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                dsprimary = JsonConvert.DeserializeObject<DataSet>(sValue);
                //sikandar
                if (dsprimary.Tables[0].Rows.Count > 0)
                {
                    if (!common.myInt(hdnDiagnosisId.Value).Equals(common.myInt(dsprimary.Tables[0].Rows[0]["icdid"])) && chkPrimarys.Checked)
                    {
                        //Alert.ShowAjaxMsg("Duplicate data add...", Page);
                        //lblMessage.Text = "Only One ICD can be Primary for Visit.";
                        //Alert.ShowAjaxMsg("Only One ICD can be Primary for Visit.", Page);
                        chkPrimarys.Checked = false;
                        //return;
                    }
                }
            }

            if (ddlDiagnosiss.SelectedValue != "" || hdnDiagnosisId.Value != "0" || hdnDiagnosisId.Value != "")
            {
                //bool bResult = objDiag.CheckValidForPrimaryDiagnosis(common.myInt(ddlDiagnosiss.SelectedValue == "" ? hdnDiagnosisId.Value : ddlDiagnosiss.SelectedValue));
                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/CheckValidForPrimaryDiagnosis";
                APIRootClass.CheckValidForPrimaryDiagnosis objRoot = new global::APIRootClass.CheckValidForPrimaryDiagnosis();
                objRoot.DiagnosisId = common.myInt(ddlDiagnosiss.SelectedValue == "" ? hdnDiagnosisId.Value : ddlDiagnosiss.SelectedValue);

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                bool bResult = JsonConvert.DeserializeObject<bool>(sValue);

                if (bResult == false && chkPrimarys.Checked == true)
                {
                    hdnIsUnSavedData.Value = "0";
                    Alert.ShowAjaxMsg("This ICD is not valid for Primary Diagnosis", Page);
                    return;
                }
            }

            if (btnAddtogrid.Text == "Update List")
            {
                if (chkChronics.Checked)
                {
                    foreach (GridViewRow gv in gvDiagnosisDetails.Rows)
                    {
                        if (common.myInt(((Label)gv.FindControl("lblId")).Text) != common.myInt(txtid.Text))
                        {
                            if (common.myStr(txtIcdId.Text) == common.myStr(((Label)gv.FindControl("lblIcdId")).Text))
                            {
                                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);

                                lblMessage.Text = "This  (" + ddlDiagnosiss.Text.Trim() + ")  already exists in Chronics Diagnosis!";
                                hdnIsUnSavedData.Value = "0";
                                return;
                            }
                        }
                    }
                }
                else
                {
                    foreach (GridViewRow gv in gvDiagnosisDetails.Rows)
                    {
                        if (common.myInt(((Label)gv.FindControl("lblId")).Text) != common.myInt(txtid.Text))
                        {
                            if (common.myStr(txtIcdId.Text) == common.myStr(((Label)gv.FindControl("lblIcdId")).Text))
                            {
                                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                                lblMessage.Text = "This  (" + ddlDiagnosiss.Text.Trim() + ")  already exists in Today's Diagnosis!";
                                hdnIsUnSavedData.Value = "0";
                                return;
                            }
                        }
                    }
                }
            }
            StringBuilder objXML = new StringBuilder();

            coll = new ArrayList();

            coll.Add(common.ParseString(txtid.Text.Trim()));
            coll.Add(common.myInt(hdnDiagnosisId.Value));
            coll.Add(chkPrimarys.Checked);
            coll.Add(chkChronics.Checked);
            coll.Add(chkQuery.Checked);
            coll.Add("");
            coll.Add(0);
            coll.Add((common.myInt(Session["DoctorID"]) > 0) ? common.myStr(Session["DoctorID"]) : string.Empty);
            coll.Add(Session["FacilityId"]);
            coll.Add("");
            coll.Add("");
            coll.Add(0);
            coll.Add(chkResolve.Checked);
            coll.Add(Request.QueryString["POPUP"] != null && common.myStr(Request.QueryString["POPUP"]) == "StaticTemplate" ? Request.QueryString["TemplateFieldId"].ToString() : "0");
            coll.Add(chkIsFinalDiagnosis.Checked);

            objXML.Append(common.setXmlTable(ref coll));

            //objXML.Append("<Table1><c1>");
            //objXML.Append(common.ParseString(txtid.Text.Trim()));
            //objXML.Append("</c1><c2>");
            //// objXML.Append(common.ParseString(txtIcdId.Text.Trim()));hdnDiagnosisId.Value
            //objXML.Append(common.myInt(hdnDiagnosisId.Value));
            //objXML.Append("</c2><c3>");
            //objXML.Append(chkPrimarys.Checked);
            //objXML.Append("</c3><c4>");
            //objXML.Append(chkChronics.Checked);
            //objXML.Append("</c4><c5>");
            //objXML.Append(chkQuery.Checked);
            //objXML.Append("</c5><c6>");
            //objXML.Append(ob);
            //objXML.Append("</c6><c7>");
            //objXML.Append(ddlSides.SelectedValue);
            //objXML.Append("</c7><c8>");
            //if (common.myInt(ddlProviders.SelectedValue) != 0)
            //{
            //    objXML.Append(ddlProviders.SelectedValue);
            //}
            //else
            //{
            //    objXML.Append(DBNull.Value);
            //}
            //objXML.Append("</c8><c9>");
            //objXML.Append(ddlFacility.SelectedValue);
            //objXML.Append("</c9><c10>");
            //objXML.Append(common.ParseString(txtcomments.Text.Trim()));
            //objXML.Append("</c10><c11>");
            //objXML.Append(txtstatusIds.Text);
            //objXML.Append("</c11><c12>");
            //objXML.Append(ddlDiagnosisType.SelectedValue);
            //objXML.Append("</c12><c13>");
            //objXML.Append(chkResolve.Checked);
            //objXML.Append("</c13><c14>");
            //objXML.Append(Request.QueryString["POPUP"] != null && common.myStr(Request.QueryString["POPUP"]) == "StaticTemplate" ? Request.QueryString["TemplateFieldId"].ToString() : "0");
            //objXML.Append("</c14><c15>");
            //objXML.Append(chkIsFinalDiagnosis.Checked);
            //objXML.Append("</c15></Table1>");

            //ds = objDiag.CheckDuplicateProblem(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]),
            //            common.myInt(Session["EncounterId"]), common.myInt(hdnDiagnosisId.Value), common.myBool(chkChronics.Checked));
            WebClient client1 = new WebClient();
            client1.Headers["Content-type"] = "application/json";
            client1.Encoding = Encoding.UTF8;
            string ServiceURL1 = WebAPIAddress.ToString() + "api/EMRAPI/CheckDuplicateDiagnosis";
            APIRootClass.CheckDuplicateDiagnosis objRoot1 = new global::APIRootClass.CheckDuplicateDiagnosis();
            objRoot1.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
            objRoot1.RegistrationId = common.myInt(Session["RegistrationId"]);
            objRoot1.EncounterId = common.myInt(Session["EncounterId"]);
            objRoot1.DiagnosisId = common.myInt(hdnDiagnosisId.Value);
            objRoot1.IsChronic = chkChronics.Checked;

            string inputJson1 = (new JavaScriptSerializer()).Serialize(objRoot1);
            string sValue1 = client1.UploadString(ServiceURL1, inputJson1);
            sValue1 = JsonConvert.DeserializeObject<string>(sValue1);
            ds = JsonConvert.DeserializeObject<DataSet>(sValue1);

            if (ds.Tables[0].Rows.Count > 0)
            {
                if (btnAddtogrid.Text == "Add")
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        if (hdnDiagnosisId.Value.ToString().Trim() == ds.Tables[0].Rows[i]["icdid"].ToString().Trim())
                        {
                            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                            if (chkChronics.Checked == true)
                            {
                                lblMessage.Text = "This  (" + ddlDiagnosiss.Text.Trim() + ")  already exists in Chronics Diagnosis!";
                            }
                            else
                            {
                                lblMessage.Text = "This  (" + ddlDiagnosiss.Text.Trim() + ")  already exists in Today's Diagnosis!";
                            }
                            hdnIsUnSavedData.Value = "0";
                            return;
                        }
                    }
                }
            }

            //foreach (RadComboBoxItem item in ddlPatientAlert.Items)
            //{
            //    if (item.Checked)
            //    {
            //        coll.Add(common.myInt(item.Value));//AlertId SMALLINT

            //        strXMLAleart.Append(common.setXmlTable(ref coll));
            //    }
            //}

            string doctorid = null;
            if (common.myStr(Session["DoctorID"]) != "")
            {
                doctorid = common.myStr(Session["DoctorID"]);
            }

            string strsave = "";
            //strsave = objDiag.EMRSavePatientDiagnosis(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["FacilityId"]),
            //                            common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"]), doctorid,
            //                            common.myInt(ViewState["PageId"]), objXML.ToString(), strXMLAleart.ToString(), common.myInt(Session["UserId"]),
            //                            chkPullDiagnosis.Checked, false, 0);


            client1 = new WebClient();
            client1.Headers["Content-type"] = "application/json";
            client1.Encoding = Encoding.UTF8;
            ServiceURL1 = WebAPIAddress.ToString() + "api/EMRAPI/SavePatientDiagnosis";
            APIRootClass.SavePatientDiagnosis objRoot2 = new global::APIRootClass.SavePatientDiagnosis();
            objRoot2.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
            objRoot2.FacilityId = common.myInt(Session["FacilityId"]);
            objRoot2.RegistrationId = common.myInt(Session["RegistrationId"]);
            objRoot2.EncounterId = common.myInt(Session["EncounterId"]);
            objRoot2.DoctorId = doctorid;
            objRoot2.PageId = common.myInt(ViewState["PageId"]);
            objRoot2.DiagnosisXML = objXML.ToString();
            objRoot2.PatientAlertXML = strXMLAleart.ToString();
            objRoot2.UserId = common.myInt(Session["UserId"]);
            objRoot2.IsPullDiagnosis = false;
            objRoot2.IsShowNote = false;
            objRoot2.MRDCode = 0;

            inputJson1 = (new JavaScriptSerializer()).Serialize(objRoot2);
            sValue1 = client1.UploadString(ServiceURL1, inputJson1);
            strsave = JsonConvert.DeserializeObject<string>(sValue1);



            ///Tagging Static Template with Template Field
            if (Request.QueryString["POPUP"] != null && Request.QueryString["POPUP"].ToString() == "StaticTemplate")
            {
                //BaseC.clsEMR emr = new BaseC.clsEMR(sConString);
                //Hashtable hshOut = emr.TaggingStaticTemplateWithTemplateField(common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"]),
                //    common.myInt(Request.QueryString["SectionId"].ToString()), common.myInt(Request.QueryString["TemplateFieldId"].ToString()),
                //    Request.QueryString["StaticTemplateId"] != null ? common.myInt(Request.QueryString["StaticTemplateId"]) : 133, common.myInt(Session["UserId"]));

                client1 = new WebClient();
                client1.Headers["Content-type"] = "application/json";
                client1.Encoding = Encoding.UTF8;
                ServiceURL1 = WebAPIAddress.ToString() + "api/EMRAPI/TaggingStaticTemplateWithTemplateField";
                APIRootClass.TaggingStaticTemplateWithTemplateField objRoot3 = new global::APIRootClass.TaggingStaticTemplateWithTemplateField();
                objRoot3.RegistrationId = common.myInt(Session["RegistrationId"]);
                objRoot3.EncounterId = common.myInt(Session["EncounterId"]);
                objRoot3.SectionId = common.myInt(Request.QueryString["SectionId"]);
                objRoot3.FieldId = common.myInt(Request.QueryString["TemplateFieldId"]);
                objRoot3.TemplateId = Request.QueryString["StaticTemplateId"] != null ? common.myInt(Request.QueryString["StaticTemplateId"]) : 133;
                objRoot3.UserId = common.myInt(Session["UserId"]);

                inputJson1 = (new JavaScriptSerializer()).Serialize(objRoot3);
                sValue1 = client1.UploadString(ServiceURL1, inputJson1);
                strsave = JsonConvert.DeserializeObject<string>(sValue1);
            }
            ///end

            if (strsave.Contains("Data Saved!"))
            {
                //if (common.myStr(Request.QueryString["IsEMRPopUp"]).Equals("1"))
                //{
                //    ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "returnToParent();", true);
                //}

                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                lblMessage.Text = strsave;
            }
            else
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblMessage.Text = strsave;
            }
            txtid.Text = "";
            //ClearDiagnosisDetailsControls();
            hdnIsUnSavedData.Value = "0";
            btnAddtogrid.Text = "Add";
            //txtstatusIds.Text = "";
            //for (int i = 0; i < ddlDiagnosisStatus.Items.Count; i++)
            //{
            //    CheckBox checkbox = (CheckBox)ddlDiagnosisStatus.Items[i].FindControl("chk1");
            //    checkbox.Checked = false;
            //}
            //ddlDiagnosisStatus.SelectedItem.Text = "";
            //BindPatientAlert();
            // RetrievePatientDiagnosis();


            txtIcdCodes.Text = "";
            ddlDiagnosiss.Text = "";
            this.ddlDiagnosiss.Enabled = true;
            ddlDiagnosiss.Text = string.Empty;
            chkPrimarys.Checked = false;
            chkChronics.Checked = false;
            // statusDis = true;

            #region In each encounter, log once when a diagnosis is saved

            //if (Session["MUDMeasure"] != null && Convert.ToBoolean(Session["MUDMeasure"]) == true)
            //{
            //    //objDiag.EMRMUDLogSaveDiagnosis(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"]), common.myInt(Session["DoctorID"]), common.myInt(Session["UserID"]));
            //}
            #endregion
        }

        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            // objException.HandleException(Ex);
        }
    }
    protected void gvDiagnosisDetails_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        DataSet objDs = new DataSet();
        DataTable dT = CreateTable();
        try
        {
            if (e.CommandName == "DiagnosisCookie")
            {
                GridViewRow gvr = gvDiagnosisDetails.Rows[common.myInt(e.CommandArgument) - 1];
                Literal ltrlProblemXML = (Literal)gvr.FindControl("lblDiagnosisXML");
                HttpCookie htC = new HttpCookie("DiagnosisCookie");
                htC.Value = ltrlProblemXML.Text;
                htC.Expires = DateTime.Now.AddHours(3);
                Response.Cookies.Add(htC);

                TextBox txtIcdCode = (TextBox)gvr.FindControl("txtIcdCode");
                TextBox txtDiagnosisName = (TextBox)gvr.FindControl("txtDiagnosisName");
                Button btnProblemDetails = (Button)gvr.FindControl("btnProblemDetails");
                Literal ltrlXML = (Literal)gvr.FindControl("lblDiagnosisXML");
                string scriptString = "<script language='JavaScript'>pos=window.open('/EMR/Assessment/Diagnosis.aspx?RowIndex=" + gvr.RowIndex.ToString() + "&PN=" + txtDiagnosisName.Text + "&XCtrl=" + ltrlXML.Text + "&PId=" + gvr.Cells[1].Text + "',\"mywindow\", \"menubar=0,resizable=0,width=600,height=300,status=0,toolbars=0\"); pos.moveTo(0,110);if (window.focus) {pos.focus()};</script>";
                if (!Page.ClientScript.IsClientScriptBlockRegistered(scriptString))
                {
                    Page.ClientScript.RegisterClientScriptBlock(this.GetType(), "script", scriptString);
                }
            }
            if (e.CommandName == "Remove")
            {

                DataRow dr;
                if (gvDiagnosisDetails.Rows.Count > 0)
                {
                    //if grid have rows then store it into datatable
                    foreach (GridViewRow gvr in gvDiagnosisDetails.Rows)
                    {
                        if (gvr.RowType == DataControlRowType.DataRow)
                        {
                            if (e.CommandArgument.ToString() != HttpUtility.HtmlDecode(gvr.Cells[0].Text.ToString().Trim()))
                            {
                                dr = dT.NewRow();
                                String sDiagnosisId = gvr.Cells[0].Text.ToString().Trim();
                                TextBox txtIcdCode = (TextBox)gvr.FindControl("txtIcdCode");
                                TextBox txtDiagnosisName = (TextBox)gvr.FindControl("txtDiagnosisName");
                                TextBox txtOnsetDate = (TextBox)gvr.FindControl("txtOnsetDate");
                                DropDownList ddlSide = (DropDownList)gvr.FindControl("ddlSide");
                                CheckBox chkPrimary = (CheckBox)gvr.FindControl("chkPrimary");
                                CheckBox chkChronic = (CheckBox)gvr.FindControl("chkChronic");

                                DropDownList ddlStatus = (DropDownList)gvr.FindControl("StatusId");
                                DropDownList ddlType = (DropDownList)gvr.FindControl("TypeId");
                                CheckBox chkResolved = (CheckBox)gvr.FindControl("IsResolved");

                                DropDownList ddlProvider = (DropDownList)gvr.FindControl("DoctorId");
                                DropDownList ddlLocation = (DropDownList)gvr.FindControl("FacilityId");
                                TextBox txtComments = (TextBox)gvr.FindControl("txtComments");
                                Label lblId = (Label)gvr.FindControl("lblId");

                                dr["ICDID"] = gvr.Cells[1].Text;
                                dr["IcdCode"] = txtIcdCode.Text;
                                dr["ICDDescription"] = txtDiagnosisName.Text;
                                dr["OnsetDate"] = txtOnsetDate.Text;
                                dr["OnsetDateWithoutFormat"] = txtOnsetDate.Text;

                                dr["LocationId"] = ddlSide.SelectedValue;
                                dr["PrimaryDiagnosis"] = chkPrimary.Checked;
                                dr["IsChronic"] = chkChronic.Checked;

                                dr["ConditionIds"] = ""; //ddlStatus.SelectedValue;
                                dr["TypeId"] = ddlType.SelectedValue;
                                dr["IsResolved"] = chkResolved.Checked;

                                dr["DoctorId"] = ddlProvider.SelectedValue;
                                dr["FacilityId"] = ddlLocation.SelectedValue;
                                dr["Remarks"] = txtComments.Text;

                                //yogesh
                                dr["ProvisionalFinalDiagnosis"] = "";
                                dr["IsFinalDiagnosis"] = "";
                                // dr["IsResolved"] = "";


                                dr["Id"] = lblId.Text;



                                dT.Rows.Add(dr);
                            }
                        }
                    }

                }
                gvDiagnosisDetails.DataSource = dT;
                gvDiagnosisDetails.DataBind();
                if (gvDiagnosisDetails.Rows.Count == 0)
                {
                    BindPatientProvisionalDiagnosis();
                }
            }
            if (e.CommandName == "Search")
            {
                foreach (GridViewRow gvr in gvDiagnosisDetails.Rows)
                {
                    if (gvr.RowType == DataControlRowType.DataRow)
                    {
                        //string txtIcdcode = ((TextBox)(gvDiagnosisDetails.Rows[Convert.ToInt32(e.CommandArgument.ToString())].Cells[2].FindControl("txtIcdCode"))).Text;
                        string txtIcdcode = ((TextBox)(gvr.Cells[2].FindControl("txtIcdCode"))).Text;

                        //DataSet objDs = objDiag.selectDiscription(txtIcdcode);

                        WebClient client = new WebClient();
                        client.Headers["Content-type"] = "application/json";
                        client.Encoding = Encoding.UTF8;
                        string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/GetDiagnosisDescription";
                        APIRootClass.GetDiagnosisDescription objRoot = new global::APIRootClass.GetDiagnosisDescription();
                        objRoot.IcdCode = txtIcdcode;

                        string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                        string sValue = client.UploadString(ServiceURL, inputJson);
                        sValue = JsonConvert.DeserializeObject<string>(sValue);
                        objDs = JsonConvert.DeserializeObject<DataSet>(sValue);

                        //string cmdstr = "SELECT [Description] FROM ICD9SubDisease WHERE [ICDCode]='" + txtIcdcode + "'";
                        //DataSet objDs = (DataSet)objDl.FillDataSet(CommandType.Text, cmdstr);

                        //TextBox txtDesc = (TextBox)(gvDiagnosisDetails.Rows[Convert.ToInt32(e.CommandArgument.ToString())].Cells[2].FindControl("txtDiagnosisName"));
                        TextBox txtDesc = (TextBox)(gvr.Cells[2].FindControl("txtDiagnosisName"));
                        if (objDs.Tables[0].Rows.Count > 0)
                        {
                            //DataTable tbl = objDs.Tables[0];
                            txtDesc.Text = objDs.Tables[0].Rows[0][0].ToString();
                        }
                        else
                        {
                            // BindBlankGrid();
                        }
                    }
                }
            }

            if (e.CommandName == "Del")
            {
                UserAuthorisations ua1 = new UserAuthorisations(string.Empty);
                ViewState["IsAllowCancel"] = ua1.CheckPermissionsForEMRModule("C", Request.Url.AbsolutePath, common.myInt(Session["EncounterId"]));
                if (!common.myBool(ViewState["IsAllowCancel"]))
                {
                    Alert.ShowAjaxMsg("Not authorized to cancel !", this.Page);
                    return;
                }

                //if (rblShowNote.SelectedIndex == -1)
                //{
                //    Alert.ShowAjaxMsg("Would you like to show update data in Notes. Please Select Show in Note Option Yes or No ? ", this.Page);
                //    return;
                //}

                GridViewRow row = (GridViewRow)(((ImageButton)e.CommandSource).NamingContainer);
                Label lblId = (Label)gvDiagnosisDetails.Rows[row.RowIndex].FindControl("lblId");

                if (!string.IsNullOrEmpty(lblId.Text))
                {
                    try
                    {
                        //dvConfirmDeletion.Visible = false;


                        int hdnlblId = common.myInt(lblId.Text);

                        //After Yes Button Press ::selected row is deleting
                        if (hdnlblId != 0)
                        {
                            // Hashtable hshInput = new Hashtable();
                            //// DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
                            // hshInput.Add("@intEncodedBy", common.myInt(Session["UserID"]));
                            // hshInput.Add("@intDiagnosisId", common.myInt(hdnlblId.Value.Trim()));
                            // hshInput.Add("@intLoginFacilityId", Session["FacilityID"]);
                            // hshInput.Add("@intPageId", common.myInt(ViewState["PageId"]));
                            // hshInput.Add("@inyHospitalLocationID", common.myInt(Session["HospitalLocationId"]));
                            // hshInput.Add("@intRegistrationId", common.myInt(Session["RegistrationID"]));
                            // hshInput.Add("@intEncounterId", common.myInt(Session["encounterid"]));
                            // dl.ExecuteNonQuery(CommandType.StoredProcedure, "UspEMRDeletePatientDiagnosis", hshInput);


                            WebClient client = new WebClient();
                            client.Headers["Content-type"] = "application/json";
                            client.Encoding = Encoding.UTF8;
                            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/DeletePatientDiagnosis";
                            APIRootClass.DeletePatientDiagnosis objRoot = new global::APIRootClass.DeletePatientDiagnosis();

                            objRoot.UserId = common.myInt(Session["UserID"]);
                            objRoot.DiagnosisId = common.myInt(hdnlblId);
                            objRoot.FacilityId = common.myInt(Session["FacilityID"]);
                            objRoot.PageId = common.myInt(ViewState["PageId"]);
                            objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
                            objRoot.RegistrationId = common.myInt(Session["RegistrationID"]);
                            objRoot.EncounterId = common.myInt(Session["encounterid"]);

                            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                            string sValue = client.UploadString(ServiceURL, inputJson);
                            sValue = JsonConvert.DeserializeObject<string>(sValue);



                            //string sQuery = "";
                            //sQuery += " UPDATE EMRPatientFormDetails SET ShowNote = " + rblShowNote.SelectedItem.Value + "  ";
                            //sQuery += " FROM EMRPatientForms epf    ";
                            //sQuery += " INNER JOIN EMRPatientFormDetails epfd ON epf.PatientFormId = epfd.PatientFormId ";
                            //sQuery += " AND epfd.PageId = " + ViewState["PageId"] + "  WHERE epf.EncounterId = " + Convert.ToInt32(Session["encounterid"]) + " ";
                            //sQuery += " AND epf.RegistrationId = " + Convert.ToInt32(Session["RegistrationID"]) + "    ";
                            //sQuery += " AND epf.Active = 1 ";

                            //dl.ExecuteNonQuery(CommandType.Text, sQuery);

                        }
                        btnFinalDiagnosisClose_OnClick(null, null);
                        RetrievePatientDiagnosis();
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "BindPatientDiagnosis();", true);
                    }
                    catch (Exception Ex)
                    {
                        lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                        lblMessage.Text = "Error: " + Ex.Message;
                        //objException.HandleException(Ex);
                    }
                }


            }


        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            // objException.HandleException(Ex);
        }
        finally
        {
            objDs.Dispose();
            dT.Dispose();
        }
    }
    protected void btnDeletion_OnClick(object sender, EventArgs e)
    {
        try
        {
            //dvConfirmDeletion.Visible = false;

            Label lblId = (Label)gvDiagnosisDetails.FindControl("lblId");
            int hdnlblId = common.myInt(lblId.Text);

            //After Yes Button Press ::selected row is deleting
            if (hdnlblId != 0)
            {
                // Hashtable hshInput = new Hashtable();
                //// DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
                // hshInput.Add("@intEncodedBy", common.myInt(Session["UserID"]));
                // hshInput.Add("@intDiagnosisId", common.myInt(hdnlblId.Value.Trim()));
                // hshInput.Add("@intLoginFacilityId", Session["FacilityID"]);
                // hshInput.Add("@intPageId", common.myInt(ViewState["PageId"]));
                // hshInput.Add("@inyHospitalLocationID", common.myInt(Session["HospitalLocationId"]));
                // hshInput.Add("@intRegistrationId", common.myInt(Session["RegistrationID"]));
                // hshInput.Add("@intEncounterId", common.myInt(Session["encounterid"]));
                // dl.ExecuteNonQuery(CommandType.StoredProcedure, "UspEMRDeletePatientDiagnosis", hshInput);


                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/DeletePatientDiagnosis";
                APIRootClass.DeletePatientDiagnosis objRoot = new global::APIRootClass.DeletePatientDiagnosis();

                objRoot.UserId = common.myInt(Session["UserID"]);
                objRoot.DiagnosisId = common.myInt(hdnlblId);
                objRoot.FacilityId = common.myInt(Session["FacilityID"]);
                objRoot.PageId = common.myInt(ViewState["PageId"]);
                objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
                objRoot.RegistrationId = common.myInt(Session["RegistrationID"]);
                objRoot.EncounterId = common.myInt(Session["encounterid"]);

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);



                //string sQuery = "";
                //sQuery += " UPDATE EMRPatientFormDetails SET ShowNote = " + rblShowNote.SelectedItem.Value + "  ";
                //sQuery += " FROM EMRPatientForms epf    ";
                //sQuery += " INNER JOIN EMRPatientFormDetails epfd ON epf.PatientFormId = epfd.PatientFormId ";
                //sQuery += " AND epfd.PageId = " + ViewState["PageId"] + "  WHERE epf.EncounterId = " + Convert.ToInt32(Session["encounterid"]) + " ";
                //sQuery += " AND epf.RegistrationId = " + Convert.ToInt32(Session["RegistrationID"]) + "    ";
                //sQuery += " AND epf.Active = 1 ";

                //dl.ExecuteNonQuery(CommandType.Text, sQuery);

            }
            btnFinalDiagnosisClose_OnClick(null, null);

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            //objException.HandleException(Ex);
        }

        //End Here
    }
    protected void gvDiagnosisDetails_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (!common.myBool(ViewState["IsAllowEdit"]))
            {
                Alert.ShowAjaxMsg("Not authorized to edit !", this.Page);
                return;
            }

            this.ddlDiagnosiss.Text = "";
            this.ddlDiagnosiss.SelectedValue = "";

            //if (gvChronicDiagnosis.SelectedIndex != -1)
            //    gvChronicDiagnosis.SelectedIndex = -1;

            ViewState["chkDiagnosisTF"] = "";
            ViewState["chkChronicTF"] = "";

            int RowIndex = 0;
            RowIndex = common.myInt(gvDiagnosisDetails.SelectedRow.RowIndex);
            ViewState["RowIndex"] = RowIndex;



            Label lblIcdId = (Label)gvDiagnosisDetails.SelectedRow.FindControl("lblIcdId");

            txtIcdId.Text = lblIcdId.Text;

            Label lblId = (Label)gvDiagnosisDetails.SelectedRow.FindControl("lblId");

            txtid.Text = lblId.Text;

            if (common.myInt(lblIcdId.Text).Equals(0))
            {
                return;
            }

            this.ddlDiagnosiss.Enabled = false;
            //ddlCategory.Enabled = false;
            //ddlSubCategory.Enabled = false;

            Label lblICDCode = (Label)gvDiagnosisDetails.SelectedRow.FindControl("lblICDCode");
            Label lblDescription = (Label)gvDiagnosisDetails.SelectedRow.FindControl("lblDescription");
            Label lblSide = (Label)gvDiagnosisDetails.SelectedRow.FindControl("lblSide");
            Label lblPrimary = (Label)gvDiagnosisDetails.SelectedRow.FindControl("lblPrimary");
            Label lblChronic = (Label)gvDiagnosisDetails.SelectedRow.FindControl("lblChronic");

            HiddenField hdnIsQuery = (HiddenField)gvDiagnosisDetails.SelectedRow.FindControl("hdnIsQuery");


            Label lblddlStatus = (Label)gvDiagnosisDetails.SelectedRow.FindControl("lblddlStatus");
            Label lblddlType = (Label)gvDiagnosisDetails.SelectedRow.FindControl("lblddlType");
            Label lblResolved = (Label)gvDiagnosisDetails.SelectedRow.FindControl("lblResolved");

            Label lblddlProvider = (Label)gvDiagnosisDetails.SelectedRow.FindControl("lblddlProvider");
            Label lblOnsetDate = (Label)gvDiagnosisDetails.SelectedRow.FindControl("lblOnsetDate");
            Label lblddlLocation = (Label)gvDiagnosisDetails.SelectedRow.FindControl("lblddlLocation");
            Label lblComments = (Label)gvDiagnosisDetails.SelectedRow.FindControl("lblComments");
            HiddenField HdnOnsetDate = (HiddenField)gvDiagnosisDetails.SelectedRow.FindControl("HdnOnsetDate");
            HiddenField hdnIsFinalDiagnosis = (HiddenField)gvDiagnosisDetails.SelectedRow.FindControl("hdnIsFinalDiagnosis");

            hdnDiagnosisId.Value = lblIcdId.Text;
            txtIcdCodes.Text = lblICDCode.Text.Trim();
            hdnIsUnSavedData.Value = "1";
            ddlDiagnosiss.Text = lblDescription.Text.Trim();
            //ddlSides.SelectedValue = lblSide.Text;
            if (lblPrimary.Text == "Y")
            {
                chkPrimarys.Checked = true;
            }
            else
            {
                chkPrimarys.Checked = false;
            }

            if (lblResolved.Text == "True")
            {
                chkResolve.Checked = true;
            }
            else
            {
                chkResolve.Checked = false;
            }

            if (lblChronic.Text == "Y")
            {
                chkChronics.Checked = true;
                ViewState["chkDiagnosisTF"] = true;
            }
            else
            {
                chkChronics.Checked = false;
                ViewState["chkDiagnosisTF"] = false;
            }
            chkQuery.Checked = common.myBool(hdnIsQuery.Value);
            //ddlDiagnosisStatus.SelectedValue = lblddlStatus.Text;

            chkIsFinalDiagnosis.Checked = common.myBool(hdnIsFinalDiagnosis.Value);

            string strQualityIds = "";
            string conditionText = "";
            if (lblddlStatus.Text != "0" || lblddlStatus.Text != "")
            {
                // txtstatusIds.Text = lblddlStatus.Text;
                // ddlDiagnosisStatus.Text = "";
                //checking Quality checkbox
                strQualityIds = lblddlStatus.Text;
                string strQuantityID = "";

                int i, j;
                string[] arInfo = new string[4];
                char[] splitter = { ',' };
                arInfo = strQualityIds.Split(splitter);
                //for (i = 0; i < ddlDiagnosisStatus.Items.Count; i++)
                //{
                //    strQuantityID = ddlDiagnosisStatus.Items[i].Value.ToString().Trim();

                //    for (j = 0; j < arInfo.Length; j++)
                //    {
                //        CheckBox checkbox = (CheckBox)ddlDiagnosisStatus.Items[i].FindControl("chk1");
                //        if (arInfo[j].Trim() == strQuantityID.Trim())
                //        {

                //            //ddlDiagnosisStatus.Text = ddlDiagnosisStatus.Text + ddlDiagnosisStatus.Items[i].Text.ToString() + ",";

                //            conditionText = conditionText + ddlDiagnosisStatus.Items[i].Text.ToString() + ",";

                //            checkbox.Checked = true;

                //            //ScriptManager.RegisterClientScriptBlock(Page, GetType(), "Javascript", "javascript: onCheckBoxClick('" + ddlDiagnosisStatus + "');", true);


                //        }
                //    }
                //}
            }

            if (conditionText.Length > 0)
            {
                conditionText = conditionText.Substring(0, conditionText.Length - 1);
            }
            //ddlDiagnosisStatus.SelectedItem.Text = conditionText;
            //ddlDiagnosisType.SelectedValue = lblddlType.Text;

            //ddlProviders.SelectedValue = lblddlProvider.Text;
            //if (Convert.ToString(lblOnsetDate.Text).Trim() != "")
            //    rdpOnsetDate.SelectedDate = Convert.ToDateTime(HdnOnsetDate.Value);
            //else
            //{
            //    rdpOnsetDate.Clear();
            //}
            //ddlFacility.SelectedValue = lblddlLocation.Text;
            //txtcomments.Text = lblComments.Text.Trim();
            if (ddlDiagnosiss.Text.Trim() != "")
            {
                btnAddtogrid.Text = "Update";
            }

            //rdpOnsetDate.Clear(); ;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            //objException.HandleException(Ex);
        }
    }
    protected void gvDiagnosisDetails_RowDataBound(object sender, GridViewRowEventArgs e)
    {

        try
        {

            if (e.Row.RowType != DataControlRowType.Pager)
            {
                //yogesh
                e.Row.Cells[0].Visible = false;
                e.Row.Cells[1].Visible = true;
                e.Row.Cells[2].Visible = true;
                e.Row.Cells[3].Visible = false;
                e.Row.Cells[4].Visible = true;
                e.Row.Cells[5].Visible = true;
                e.Row.Cells[6].Visible = false;
                e.Row.Cells[7].Visible = false;
                e.Row.Cells[8].Visible = true;
                e.Row.Cells[9].Visible = false;
                e.Row.Cells[10].Visible = false;
                e.Row.Cells[11].Visible = false;
                e.Row.Cells[12].Visible = false;
                e.Row.Cells[13].Visible = true;
                e.Row.Cells[14].Visible = true;
                e.Row.Cells[15].Visible = true;
                e.Row.Cells[16].Visible = true;
                e.Row.Cells[17].Visible = false;
            }
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                Label lblPrimary = (Label)e.Row.FindControl("lblPrimary");
                Label lblChronic = (Label)e.Row.FindControl("lblChronic");
                Label ProvisionalFinalDiagnosis = (Label)e.Row.FindControl("lblProvisionalyo");
                Label IsFinalDiagnosis = (Label)e.Row.FindControl("lblFinalyo");
                Label lblResolved = (Label)e.Row.FindControl("lblResolved");

                if (lblPrimary.Text == "True")
                {
                    lblPrimary.Text = "Y";
                }
                else
                {
                    lblPrimary.Text = "N";
                }
                if (lblChronic.Text == "True")
                {
                    lblChronic.Text = "Y";
                }
                else
                {
                    lblChronic.Text = "N";
                }
                //yogesh 27/09/2022
                if(ProvisionalFinalDiagnosis.Text == "True")
                {
                    ProvisionalFinalDiagnosis.Text = "Y";
                }
                else
                {
                    ProvisionalFinalDiagnosis.Text = "N";
                }
                if (IsFinalDiagnosis.Text == "True")
                {
                    IsFinalDiagnosis.Text = "Y";
                }
                else
                {
                    IsFinalDiagnosis.Text = "N";
                }
                if (lblResolved.Text == "True")
                {
                    lblResolved.Text = "Y";
                }
                else
                {
                    lblResolved.Text = "N";
                }


                HiddenField hdnEncodedById = (HiddenField)e.Row.FindControl("hdnEncodedById");
                ImageButton ibtnDelete = (ImageButton)e.Row.FindControl("ibtnDelete");
                LinkButton lnkEdit = (LinkButton)e.Row.Cells[15].Controls[0]; //yogesh

                if (common.myInt(hdnEncodedById.Value) > 0)
                {
                    if (!common.myInt(hdnEncodedById.Value).Equals(common.myInt(Session["UserId"])))
                    {
                        ibtnDelete.Visible = false;
                        lnkEdit.Visible = false;
                    }
                }

                Label lblIcdId = (Label)e.Row.FindControl("lblIcdId");
                if (common.myInt(lblIcdId.Text).Equals(0))
                {
                    lblPrimary.Visible = false;
                    ibtnDelete.Visible = false;
                    lnkEdit.Visible = false;
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            //objException.HandleException(Ex);
        }
    }
    protected void RetrievePatientDiagnosis()
    {
        DataSet ds = new DataSet();
        DataView dvStTemplate = new DataView();
        DataView dvDiagnosisDetail = new DataView();
        DataTable dtChronicDiagnosisDetail = new DataTable();
        DataTable dtDiagnosisDetail = new DataTable();
        try
        {
            //objDiag = new BaseC.DiagnosisDA(sConString);


            if (Session["encounterid"] != null)
            {
                //ds = objDiag.GetPatientDiagnosis(common.myInt(Session["HospitalLocationId"]), 0, common.myInt(Session["RegistrationId"]),
                // common.myInt(Session["encounterid"]), 0, 0, 0, "", "", "", "%%", false, 0, "", false, 0);

                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/GetPatientDiagnosis";
                APIRootClass.GetPatientDiagnosis objRoot = new global::APIRootClass.GetPatientDiagnosis();
                objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
                objRoot.FacilityId = 0;
                objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
                objRoot.EncounterId = common.myInt(Session["encounterid"]);
                objRoot.DoctorId = 0;
                objRoot.DiagnosisGroupId = 0;
                objRoot.DiagnosisSubGroupId = 0;
                objRoot.DateRange = "";
                objRoot.FromDate = "";
                objRoot.ToDate = "";
                objRoot.SearchKeyword = "%%";
                objRoot.IsDistinct = false;
                objRoot.StatusId = 0;
                objRoot.VisitType = "";
                objRoot.IsChronic = false;
                objRoot.DiagnosisId = 0;


                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                ds = JsonConvert.DeserializeObject<DataSet>(sValue);

                if (ds.Tables[0].Rows.Count > 0)
                {


                    if (Request.QueryString["POPUP"] != null && Request.QueryString["POPUP"] == "StaticTemplate")
                    {
                        dvStTemplate = new DataView(ds.Tables[0]);
                        dvStTemplate.RowFilter = "ISNULL(TemplateFieldId,0)<>0";
                    }
                    else
                    {
                        dvStTemplate = new DataView(ds.Tables[0]);
                    }

                    ViewState["Record"] = 1;
                    dvDiagnosisDetail = new DataView(dvStTemplate.ToTable());

                    //dvDiagnosisDetail.RowFilter = "ISNULL(IsChronic,0)=1 and EncounterID=" + common.myInt(Session["encounterid"]);
                    //dtChronicDiagnosisDetail = dvDiagnosisDetail.ToTable();
                    //if (dtChronicDiagnosisDetail.Rows.Count > 0)
                    //{
                    //    //gvChronicDiagnosis.DataSource = dtChronicDiagnosisDetail;
                    //    //gvChronicDiagnosis.DataBind();
                    //}
                    //else
                    //{
                    //    //BindBlankChronicDiagnosisGrid();
                    //}

                    // dvDiagnosisDetail.RowFilter = "ISNULL(IsChronic,0) <> 1 and EncounterID=" + common.myInt(Session["encounterid"]);
                    dtDiagnosisDetail = dvDiagnosisDetail.ToTable();
                    if (dtDiagnosisDetail.Rows.Count > 0)
                    {
                        txtICDCode.Text = dtDiagnosisDetail.Rows[0]["ICDCode"].ToString();
                        gvDiagnosisDetails.DataSource = dtDiagnosisDetail;
                        gvDiagnosisDetails.DataBind();
                        // chkPullDiagnosis.Checked = Convert.ToString(dtDiagnosisDetail.Rows[0]["PullForwardDiagnosis"]) == "" ? false : (Boolean)dtDiagnosisDetail.Rows[0]["PullForwardDiagnosis"];
                        //Cache.Insert("DignosisDetails", dtDiagnosisDetail, null, DateTime.Now.AddMinutes(30), System.Web.Caching.Cache.NoSlidingExpiration);
                        gvDiagnosisDetails.Columns[4].Visible = true;
                        divDiagnosis.Visible = true;
                        GridViewDiagnosis.DataSource = dtDiagnosisDetail;
                        GridViewDiagnosis.DataBind();
                    }
                    else
                    {
                        //BindBlankDiagnosisDetailGrid();
                        //chkPullDiagnosis.Checked = false;
                    }
                    // if (dtChronicDiagnosisDetail.Rows.Count > 0 || dtDiagnosisDetail.Rows.Count > 0)

                    //    chkPregnant.Checked = (Boolean)ds.Tables[0].Rows[0]["IsPregnant"];
                    //chkBreastFeeding.Checked = (Boolean)ds.Tables[0].Rows[0]["IsBreastFeeding"];

                    //if (!IsPostBack)
                    //    AuditCA.AuditCommonAccess(Convert.ToInt16(Session["HospitalLocationID"]), Convert.ToInt32(Session["FacilityID"]), Convert.ToInt32(Session["RegistrationID"]), Convert.ToInt32(Session["encounterid"]), Convert.ToInt32(ViewState["PageId"]), 0, Convert.ToInt32(Session["UserID"]), 0, "ACCESSED", Convert.ToString(Session["IPAddress"]));

                }
                else
                {
                    ViewState["Record"] = 0;
                    //BindBlankChronicDiagnosisGrid();
                    BindBlankDiagnosisDetailGrid();
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            // objException.HandleException(Ex);
        }
        finally
        {
            ds.Dispose();
            dvStTemplate.Dispose();
            dvDiagnosisDetail.Dispose();
            dtChronicDiagnosisDetail.Dispose();
            dtDiagnosisDetail.Dispose();
        }
    }
    private void BindBlankDiagnosisDetailGrid()

    {
        DataTable dT = CreateTable();
        try
        {

            for (int i = 0; i < 1; i++)
            {
                DataRow dr = dT.NewRow();
                dr["ICDID"] = 0;
                dr["ICDCode"] = "";
                dr["ICDDescription"] = "";
                dr["OnsetDate"] = "";
                dr["LocationId"] = "0";
                dr["PrimaryDiagnosis"] = "";
                dr["IsChronic"] = "0";
                dr["IsQuery"] = "0";
                dr["ConditionIds"] = "0";
                dr["TypeId"] = "0";
                dr["IsResolved"] = "0";
                dr["DoctorId"] = "0";
                dr["FacilityId"] = "0";
                dr["Remarks"] = "";

                //yogesh
                dr["ProvisionalFinalDiagnosis"] = "";
                dr["IsFinalDiagnosis"] = "";
                //  dr["IsResolved"] = "";


                dr["Id"] = "";




                dT.Rows.Add(dr);
            }
            gvDiagnosisDetails.DataSource = dT;
            gvDiagnosisDetails.DataBind();
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            //objException.HandleException(Ex);
        }
        finally
        {
            dT.Dispose();
        }
    }

    //protected void Button1_Click(object sender, EventArgs e)
    //{
    //    string time = "Data Saved";
    //    //string script = " Message('" + time + "');";
    //    ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "Message('" + time + "');", true);
    //    //ClientScript.RegisterStartupScript(this.GetType(), "Message", script, true);
    //    //ScriptManager.RegisterStartupScript(this, this.GetType(), "name", "Message('" + time + "');", true);
    //}

    // add Order and Procedure.

    // Add Order and Procedures
    protected void cmbServiceName_OnItemsRequested(object sender, RadComboBoxItemsRequestedEventArgs e)
    {
        try
        {
            if (e.Text.Length > 2)
            {

                DataTable data = BindSearchCombo("%" + e.Text);

                // BindCategoryTree();
                int itemOffset = e.NumberOfItems;
                if (itemOffset == 0)
                {
                    this.cmbServiceName.Items.Clear();
                }
                int endOffset = Math.Min(itemOffset + 50, data.Rows.Count);
                e.EndOfItems = endOffset == data.Rows.Count;

                for (int i = itemOffset; i < endOffset; i++)
                {
                    //RadCmbPatientSearch.Items.Add(new RadComboBoxItem(data.Rows[i]["CompanyName"].ToString(), data.Rows[i]["CompanyName"].ToString()));
                    RadComboBoxItem item = new RadComboBoxItem();
                    if (common.myStr(data.Rows[i]["LongDescription"]).Equals(""))
                        item.Text = (string)data.Rows[i]["ServiceName"];
                    else
                        item.Text = (string)data.Rows[i]["LongDescription"];
                    item.Value = data.Rows[i]["ServiceID"].ToString();
                    item.Attributes["CPTCode"] = data.Rows[i]["CPTCode"].ToString();
                    item.Attributes["LongDescription"] = data.Rows[i]["LongDescription"].ToString();
                    item.Attributes["ServiceType"] = data.Rows[i]["ServiceType"].ToString();
                    //item.Attributes["IsToothNoMandatory"] = data.Rows[i]["IsToothNoMandatory"].ToString();
                    this.cmbServiceName.Items.Add(item);
                    item.DataBind();
                }
                e.Message = GetStatusMessage(endOffset, data.Rows.Count);

                // visible(hdnServiceId.Value);
            }
        }
        catch (Exception Ex)
        {
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void cmbServiceName_OnSelectedIndexChanged(object sender, RadComboBoxSelectedIndexChangedEventArgs e)
    {
        try
        {
            //visible(hdnServiceType.Value);
            if (cmbServiceName.SelectedValue != "")
            {
                // hdnServiceId.Value = cmbServiceName.SelectedValue;
                //    AddOrder("NEW", Convert.ToInt32(cmbServiceName.SelectedValue), 0);
                if (common.myBool(hdnIsToothNoMandatory.Value))
                {
                    // spnToothNo.Visible = true;
                    ddlGlobalToothNo.Visible = true;
                    GetGlobalToothNo();
                }
                else
                {
                    //spnToothNo.Visible = false;
                    ddlGlobalToothNo.Visible = false;
                }
            }
        }
        catch (Exception Ex)
        {
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected DataTable BindSearchCombo(String etext)
    {
        DataTable dt = new DataTable();
        DataView DV = new DataView();
        try
        {
            //BaseC.EMROrders order = new BaseC.EMROrders(sConString);


            //if (ViewState["ServiceData"] == null)
            //{
            //dt = order.GetSearchServices(common.myInt(Session["HospitalLocationId"]), common.myInt(ddlDepartment.SelectedValue),
            //                         ddlSubDepartment.SelectedValue == "" ? "0" : ddlSubDepartment.SelectedValue,
            //         common.myStr(etext, true), common.myInt(Session["FacilityId"]));

            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;
            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/GetSearchServices";
            APIRootClass.GetSearchServices objRoot = new global::APIRootClass.GetSearchServices();
            objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
            objRoot.SubDepartmentId = ddlSubDepartment.SelectedValue == "" ? "0" : ddlSubDepartment.SelectedValue;
            objRoot.DepartmentId = common.myInt(ddlDepartment.SelectedValue);
            objRoot.FacilityId = common.myInt(Session["FacilityId"]);
            objRoot.ServiceName = common.myStr(etext, true);
            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);
            dt = JsonConvert.DeserializeObject<DataTable>(sValue);


            //if (rdoOrder.SelectedValue == "OS")
            //{
            //    dt.Rows.Clear();
            //    dt.Rows.Add(dt.NewRow());
            //    dt.AcceptChanges();
            //}

            DV = dt.DefaultView;
            //if (common.myStr(Request.QueryString["For"]) == "SDReq"
            //    && common.myInt(Request.QueryString["RequestId"]) > 0)
            //{
            //    ViewState["ServiceData"] = DV.ToTable();
            //}
            //else
            //{

            //    DV.RowFilter = "SendRequestToDepartment=0";

            //    ViewState["ServiceData"] = DV.ToTable();
            //}


            //if (ViewState["Edit"] != null)
            //{
            //    cmbServiceName.Items.Clear();
            //    cmbServiceName.Text = "";

            //    cmbServiceName.DataSource = null;
            //    cmbServiceName.DataBind();

            //    cmbServiceName.DataSource = (DataTable)ViewState["ServiceData"];
            //    cmbServiceName.DataTextField = "ServiceName";
            //    cmbServiceName.DataValueField = "ServiceId";
            //    cmbServiceName.DataBind();
            //    cmbServiceName.SelectedValue = hdnServiceId.Value;
            //    ViewState["Edit"] = null;

            //    return DV.ToTable();

            //}


        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            dt.Dispose();
        }
        return DV.ToTable();
    }
    protected void rdoOrder_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            //cmbServiceName.ClearSelection();
            //cmbServiceName.Text = string.Empty;
            //cmbServiceName.SelectedIndex = -1;
            //ddlDepartment.Items.Clear();
            BindCategoryTypeDDL(rdoOrder.SelectedValue);

            //if (!rdoOrder.SelectedValue.Equals("X"))
            //{
            //    btnAddRequest.Visible = false;
            //    btnRequestList.Visible = false;
            //}
            //else
            //{
            //    btnAddRequest.Visible = true;
            //    btnRequestList.Visible = true;
            //}

            ////ClearForm();
            //btnUpdate.Text = "Add";
        }
        catch (Exception Ex)
        {
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    private void BindCategoryTypeDDL(string Type)
    {
        DataSet ds = new DataSet();
        try
        {
            ddlDepartment.Items.Clear();

            //BaseC.clsEMRBilling objEmrBilling = new BaseC.clsEMRBilling(sConString);

            //ds = objEmrBilling.uspGetDepartmentByType(Type);

            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;
            string ServiceURL = WebAPIAddress.ToString() + "api/BillingAPI/GetDepartmentByType";
            APIRootClass.GetDepartmentByType objRoot = new global::APIRootClass.GetDepartmentByType();
            objRoot.DepartmentType = Type;
            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);
            ds = JsonConvert.DeserializeObject<DataSet>(sValue);

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlDepartment.DataSource = ds.Tables[0];
                ddlDepartment.DataTextField = "DepartmentName";
                ddlDepartment.DataValueField = "DepartmentId";
                ddlDepartment.DataBind();
            }
            if (Type == "O")
            {
                ddlDepartment.Items.Insert(0, new RadComboBoxItem("All", "0"));
                ddlDepartment.SelectedIndex = 0;
                // ddlDepartment.SelectedValue = Session["LoginDepartmentId"] != null ? Session["LoginDepartmentId"].ToString() : "";
            }
            ddlDepartment_OnSelectedIndexChanged(null, null);

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            ds.Dispose();
        }
    }
    protected void ddlDepartment_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        DataView dv = new DataView();
        DataSet ds = new DataSet();
        DataView dvSub = new DataView();
        try
        {
            ddlSubDepartment.Items.Clear();
            if (common.myStr(Request.QueryString["For"]) == "SDReq")//this comming from sub departrment page 
            {
                if (ViewState["SubDepartment"] != null)
                {
                    //BaseC.EMROrders objEMROrders = new EMROrders(sConString);
                    dv = new DataView((DataTable)ViewState["SubDepartment"]);
                    dv.RowFilter = "DepartmentId=" + common.myInt(Request.QueryString["DId"]);
                    if (dv.ToTable().Rows.Count > 0)
                    {
                        ddlSubDepartment.DataSource = dv.ToTable();
                        ddlSubDepartment.DataTextField = "SubName";
                        ddlSubDepartment.DataValueField = "SubDeptId";
                        ddlSubDepartment.DataBind();

                        if (common.myStr(Request.QueryString["For"]) != "SDReq")//this comming from sub departrment page 
                        {
                            ddlSubDepartment.Items.Insert(0, new RadComboBoxItem("All"));
                            ddlSubDepartment.Items[0].Value = "0";
                        }
                    }
                    if (common.myStr(Request.QueryString["For"]) == "SDReq")//this comming from sub departrment page 
                    {
                        ddlSubDepartment.SelectedValue = dv.ToTable().Rows[0]["SubDeptId"].ToString();
                        ddlDepartment.SelectedValue = dv.ToTable().Rows[0]["DepartmentId"].ToString();
                        ddlDepartment.Enabled = false;
                    }
                }
            }
            else
            {

                //BaseC.RestFulAPI objCommon = new BaseC.RestFulAPI(sConString);

                //BaseC.EMRMasters objE = new EMRMasters(sConString);

                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;
                APIRootClass.GetHospitalSubDepartment objRoot = new global::APIRootClass.GetHospitalSubDepartment();
                objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
                objRoot.DepartmentId = common.myInt(ddlDepartment.SelectedValue);
                objRoot.SubDepartmentId = 0;

                if (rdoOrder.SelectedValue == "O")
                {
                    //ds = objE.GetHospitalSubDepartment(common.myInt(Session["HospitalLocationId"]), common.myInt(ddlDepartment.SelectedValue), "O", 0);
                    ////ds = objCommon.GetHospitalSubDepartment(common.myInt(Session["HospitalLocationId"]), common.myInt(ddlDepartment.SelectedValue), "O", 0);
                    objRoot.DepartmentType = "O";
                }
                else
                {
                    //ds = objE.GetHospitalSubDepartment(common.myInt(Session["HospitalLocationId"]), common.myInt(ddlDepartment.SelectedValue), string.Empty, 0);
                    ////ds = objCommon.GetHospitalSubDepartment(common.myInt(Session["HospitalLocationId"]), common.myInt(ddlDepartment.SelectedValue), "", 0);
                    objRoot.DepartmentType = string.Empty;
                }
                string ServiceURL = WebAPIAddress.ToString() + "api/Common/GetHospitalSubDepartment";
                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                ds = JsonConvert.DeserializeObject<DataSet>(sValue);

                if (ds.Tables[0].Rows.Count > 0)
                {
                    dvSub = ds.Tables[0].DefaultView;
                    if (common.myStr(Request.QueryString["For"]) != "SDReq")
                    {
                        dvSub.RowFilter = "SendRequestToDepartment=0";
                    }

                    ddlSubDepartment.DataSource = dvSub.ToTable();
                    ddlSubDepartment.DataTextField = "SubName";
                    ddlSubDepartment.DataValueField = "SubDeptId";
                    ddlSubDepartment.DataBind();

                    ddlSubDepartment.Items.Insert(0, new RadComboBoxItem("All"));
                    ddlSubDepartment.Items[0].Value = "0";
                }
                //objCommon.Close();
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            ds.Dispose();
            dv.Dispose();
            dvSub.Dispose();
        }
    }
    protected void ddlSubDepartment_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            cmbServiceName.Items.Clear();
            cmbServiceName.Text = "";

            cmbServiceName.DataSource = null;
            cmbServiceName.DataBind();
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnSave_Click(object sender, EventArgs e)
    {
        PatientandClinicianValidateion();
        //if (common.myBool(ViewState["IsInsuranceCompany"]) == true)
        //{
        //    PnlApproval.Visible = true;
        //}
        //else
        //{
        SaveData();


        //}
    }
    protected string PatientandClinicianValidateion()
    {
        System.Text.StringBuilder strb = new StringBuilder();
        string ValidationFail = string.Empty;
        //DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
        DataSet ds = new DataSet();
        try
        {
            //ds = dl.FillDataSet(CommandType.Text, "Exec uspValidateErxPatientXML " + common.myStr(Session["RegistrationId"]) + "," + common.myInt(Session["DoctorID"]));
            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;
            APIRootClass.ValidateErxPatientXML objRoot = new global::APIRootClass.ValidateErxPatientXML();
            objRoot.DoctorId = common.myInt(Session["DoctorID"]);
            objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);

            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/ValidateErxPatientXML";
            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);
            ds = JsonConvert.DeserializeObject<DataSet>(sValue);

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ViewState["FCeed"] = ds.Tables[0];
                ViewState["IsInsuranceCompany"] = ds.Tables[0].Rows[0]["IsInsuranceCompany"];
                //    for (int i = 0; i < ds.Tables[0].Columns.Count; i++)
                //    {

                //        if (common.myStr(ds.Tables[0].Rows[0][i]).Contains("NV"))
                //        {
                //            ValidationFail = "Failed";
                //            strb.Append("<b>" + common.myStr(ds.Tables[0].Columns[i].Caption) + "</b> : Invalid <br/>");
                //        }
                //        else
                //        {
                //            strb.Append("<b>" + common.myStr(ds.Tables[0].Columns[i].Caption) + "</b> : " + ds.Tables[0].Rows[0][i] + "<br/>");
                //        }
                //    }
            }
            //dvInfo.InnerHtml = strb.ToString();

            //if (common.myBool(ViewState["IsInsuranceCompany"]) == false)
            //{
            //    ValidationFail = string.Empty;
            //}
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            ds.Dispose();
            //dl = null;
        }

        return ValidationFail;
    }

    protected void SaveData()
    {
        DataSet ds = new DataSet();
        DataTable dt = new DataTable();
        DataTable dtSave = new DataTable();
        try
        {
            if (!isSave())
            {
                return;
            }

            //if (ddlAdvisingDoctor.SelectedIndex == 0 && (common.myStr(Request.QueryString["From"]).ToUpper().Equals("WARD")
            //    || common.myStr(Session["OPIP"]).ToUpper().Equals("I")))
            //{
            //    Alert.ShowAjaxMsg("Please select Advising Doctor", Page);
            //    return;
            //}

            //BaseC.EMROrders order = new BaseC.EMROrders(sConString);
            string doctorid = "0";

            if (Request.QueryString["For"] != null && Request.QueryString["DoctorId"] != null)
            {
                doctorid = common.myStr(Request.QueryString["DoctorId"]);
            }

            if (common.myStr(Request.QueryString["From"]).ToUpper().Equals("WARD")
                || common.myStr(Session["OPIP"]).ToUpper().Equals("I"))
            {
                //BaseC.clsEMRBilling objBill = new BaseC.clsEMRBilling(sConString);

                //doctorid = objBill.GetPatientConsultingDoctor(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["FacilityId"]),
                //                    common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"])).ToString();

                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/GetPatientConsultingDoctor";
                APIRootClass.GetPatientConsultingDoctor objRoot = new global::APIRootClass.GetPatientConsultingDoctor();
                objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
                objRoot.FacilityId = common.myInt(Session["FacilityId"]);
                objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
                objRoot.EncounterId = common.myInt(Session["EncounterId"]);
                //string strtriageID = string.Empty;
                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                doctorid = JsonConvert.DeserializeObject<string>(sValue);
            }

            if (common.myInt(doctorid).Equals(0))
            {
                doctorid = common.myInt(Session["EmployeeId"]).ToString();
            }

            //if (common.myStr(Request.QueryString["From"]).ToUpper().Equals("WARD")
            //     || common.myStr(Session["OPIP"]).ToUpper().Equals("I"))
            //{
            //    if (ddlAdvisingDoctor.SelectedIndex > 0)
            //    {
            //        doctorid = common.myInt(ddlAdvisingDoctor.SelectedValue).ToString();
            //    }
            //}

            StringBuilder strXML = new StringBuilder();
            ArrayList coll = new ArrayList();

            dt.Columns.Add("ServiceID");
            dt.Columns.Add("ServiceName");
            //DataRow dr = dt.NewRow(); 
            foreach (GridViewRow row in gvPatientServiceDetail.Rows)
            {
                DataRow dr = dt.NewRow();
                HiddenField hdnExcludedServices = (HiddenField)row.FindControl("hdnExcludedServices");
                HiddenField hdnPackageId = (HiddenField)row.FindControl("hdnPackageId");
                HiddenField hdnServiceID = (HiddenField)row.FindControl("hdnServiceID");
                HiddenField hdnStat = (HiddenField)row.FindControl("hdnStat");
                Label lblRemarks = (Label)row.FindControl("lblRemarks");
                TextBox txtUnit = (TextBox)row.FindControl("txtUnit");
                Label serviceNAme = (row.FindControl("lblServiceName") as Label);
                HiddenField hdnRequestToDepartment = (HiddenField)row.FindControl("hdnRequestToDepartment");
                HiddenField hdnToothNo = (HiddenField)row.FindControl("hdnToothNo");
                Label lblTestDate = (Label)row.FindControl("lblTestDate");
                dr["ServiceID"] = common.myInt(hdnServiceID.Value).ToString();
                dr["ServiceName"] = serviceNAme.Text;
                dt.Rows.Add(dr);
                if (hdnRequestToDepartment.Value != "1")
                {
                    coll.Add(common.myInt(hdnServiceID.Value));//ServiceId INT,--1
                    coll.Add(DBNull.Value);//VisitDate SMALLDATETIME,--2
                    coll.Add(common.myInt(txtUnit.Text));//Units SMALLINT,--3
                    coll.Add(common.myInt(doctorid));//DoctorId INT,--4
                    coll.Add(DBNull.Value);//ServiceAmount MONEY,--5
                    coll.Add(DBNull.Value);//DoctorAmount MONEY,--6
                    coll.Add(DBNull.Value);//ServiceDiscountAmount MONEY,--7
                    coll.Add(DBNull.Value);//DoctorDiscountAmount MONEY,--8
                    coll.Add(DBNull.Value);//AmountPayableByPatient MONEY,--9
                    coll.Add(DBNull.Value);//AmountPayableByPayer MONEY,--10
                    coll.Add(DBNull.Value);//ServiceDiscountPer MONEY,--11
                    coll.Add(DBNull.Value);//DoctorDiscountPer MONEY,--12
                    coll.Add(0);//PackageId INT,--13
                    coll.Add(0);//OrderId INT,--14
                    coll.Add(DBNull.Value);//UnderPackage BIT,--15
                    coll.Add(common.myStr(txtICDCode.Text).Trim());//ICDID VARCHAR(100),--16
                    coll.Add(DBNull.Value);//ResourceID INT,--17
                    coll.Add(DBNull.Value);//SurgeryAmount MONEY,--18
                    coll.Add(DBNull.Value);//ProviderPercent MONEY,--19
                    coll.Add(DBNull.Value);//SeQNo INT,--20
                    coll.Add(common.myStr(lblRemarks.Text).Trim());//Serviceremarks VARCHAR(150),--21
                    coll.Add(DBNull.Value);//DetailId INT, --22
                    coll.Add(0);//--23
                    coll.Add(0);//--24
                    coll.Add(DBNull.Value);//CoPayAmt MONEY,--25
                    coll.Add(DBNull.Value);//DeductableAmount MONEY,--26
                    coll.Add(DBNull.Value);//ApprovalCode VARCHAR(50),--27
                    coll.Add(common.myInt(Session["FacilityId"]));//FacilityId SMALLINT,--28
                    coll.Add(hdnStat.Value);//Stat BIT,--29
                    coll.Add(hdnExcludedServices.Value);//IsExcluded BIT, --30
                    coll.Add(DBNull.Value);//CopayPerc MONEY,--31
                    coll.Add(0);//CopayOnNet BIT, --32
                    if (!string.IsNullOrEmpty(lblTestDate.Text))
                    {
                        coll.Add(lblTestDate.Text);//TestDateTime SMALLDATETIME, --33
                    }
                    else
                    {
                        coll.Add(DBNull.Value);//TestDateTime SMALLDATETIME, --33
                    }
                    coll.Add(hdnToothNo.Value);//Tooth No string, --34
                    strXML.Append(common.setXmlTable(ref coll));
                }
            }

            coll = new ArrayList();
            StringBuilder strXMLAleart = new StringBuilder();
            Session["Preauth"] = dt;
            if (strXML.ToString() != "")
            {

                //ds = order.GetEncounterCompany(common.myInt(Session["EncounterId"]));
                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/GetEncounterCompany";
                APIRootClass.GetEncounterCompany objRoot = new global::APIRootClass.GetEncounterCompany();
                objRoot.EncounterId = common.myInt(Session["EncounterId"]);
                //string strtriageID = string.Empty;
                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                ds = JsonConvert.DeserializeObject<DataSet>(sValue);

                string sChargeCalculationRequired = "Y";
                string stype = "P" + ds.Tables[0].Rows[0]["opip"].ToString().Trim();
                string opip = ds.Tables[0].Rows[0]["opip"].ToString().Trim();

                int CompanyId = 0, InsuranceId = 0, CardId = 0;
                if (ds.Tables[0].Rows[0]["CompanyCode"].ToString().Trim() != "")
                {
                    CompanyId = common.myInt(ds.Tables[0].Rows[0]["CompanyCode"].ToString().Trim());
                }
                if (ds.Tables[0].Rows[0]["InsuranceCode"].ToString().Trim() != "")
                {
                    InsuranceId = common.myInt(ds.Tables[0].Rows[0]["InsuranceCode"].ToString().Trim());
                }
                if (ds.Tables[0].Rows[0]["CardId"].ToString().Trim() != "")
                {
                    CardId = common.myInt(ds.Tables[0].Rows[0]["CardId"].ToString().Trim());
                }
                int RequestId = common.myInt(Request.QueryString["RequestId"]);
                //Hashtable hshOut = new Hashtable();
                if (opip == "E")
                {
                    opip = "O";
                }
                int isERRequest = 1;
                //if (Session["DuplicateCheck"].Equals(0))
                //{
                //Session["DuplicateCheck"] = 1;

                string dtime = DateTime.Now.ToString("yyyy/MM/dd HH:mm");


                // DateTime dtime = Convert.ToDateTime(stime);


                // return;
                client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;
                ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SaveServiceOrderEMR";
                APIRootClass.SaveServiceOrderEMR objRoot1 = new global::APIRootClass.SaveServiceOrderEMR();
                objRoot1.HospitalLocationId = common.myInt(Session["HospitalLocationID"]);
                objRoot1.FacilityId = common.myInt(Session["FacilityId"]);
                objRoot1.RegistrationId = common.myInt(Session["RegistrationId"]);
                objRoot1.EncounterId = common.myInt(Session["EncounterId"]);
                objRoot1.xmlServiceList = strXML.ToString();
                objRoot1.XMLPatientAlert = strXMLAleart.ToString();
                if (Request.QueryString["Op"] != null)
                {
                    objRoot1.Remark = "PreOpOrders!" + common.myStr("");
                }
                else
                {
                    objRoot1.Remark = common.myStr("");
                }
                objRoot1.UserId = common.myInt(Session["UserID"]);
                objRoot1.DoctorId = common.myInt(doctorid);
                objRoot1.CompanyId = CompanyId;
                objRoot1.OrderType = stype;
                objRoot1.PayerType = "E";
                objRoot1.PatientOPIP = opip;
                objRoot1.InsuranceId = InsuranceId;
                objRoot1.CardId = CardId;
                objRoot1.OrderDate = dtime;
                objRoot1.ChargeCalculationRequired = sChargeCalculationRequired;
                objRoot1.IsAllergyReviewed = false;
                objRoot1.IsERorEMRServices = isERRequest;
                objRoot1.RequestId = RequestId;
                objRoot1.xmlTemplateDetails = common.myStr(ViewState["vsTemplateDataDetails"]);
                //string strtriageID = string.Empty;
                inputJson = (new JavaScriptSerializer()).Serialize(objRoot1);
                sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                dtSave = JsonConvert.DeserializeObject<DataTable>(sValue);


                //if (Request.QueryString["Op"] != null)
                //{
                //    //DateTime dtime = common.myDate(DateTime.Now.ToString("yyyy-MM-dd HH:mm"));
                //    hshOut = order.saveOrders(common.myInt(Session["HospitalLocationID"]), common.myInt(Session["FacilityId"]),
                //                        common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"]), strXML.ToString(),
                //                        strXMLAleart.ToString(), "PreOpOrders!"+common.myStr(txtInstruction.Text), common.myInt(Session["UserID"]),
                //                        common.myInt(doctorid), CompanyId, stype, common.myStr("E"), common.myStr(opip), InsuranceId,
                //                        CardId, dtime, sChargeCalculationRequired, chkAllergyReviewed.Checked, isERRequest,
                //                        RequestId, common.myStr(ViewState["vsTemplateDataDetails"]));
                //}
                //else
                //{
                //    //DateTime dtime = common.myDate(DateTime.Now.ToString("yyyy-MM-dd HH:mm"));
                //    hshOut = order.saveOrders(common.myInt(Session["HospitalLocationID"]), common.myInt(Session["FacilityId"]),
                //                        common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"]), strXML.ToString(),
                //                        strXMLAleart.ToString(), common.myStr(txtInstruction.Text), common.myInt(Session["UserID"]),
                //                        common.myInt(doctorid), CompanyId, stype, common.myStr("E"), common.myStr(opip), InsuranceId,
                //                        CardId, dtime, sChargeCalculationRequired, chkAllergyReviewed.Checked, isERRequest,
                //                        RequestId, common.myStr(ViewState["vsTemplateDataDetails"]));
                //}
                //if (hshOut["chvErrorStatus"].ToString().Length == 0)
                if (common.myLen(dtSave.Rows[0]["chvErrorStatus"]).Equals(0))
                {
                    lblMessage.ForeColor = System.Drawing.Color.Green;
                    //ViewState["OrderId"] = hshOut["intOrderId"];
                    //lblMessage.Text = "Order No:" + hshOut["intOrderNo"] + " Saved Successfully";
                    ViewState["OrderId"] = dtSave.Rows[0]["intOrderId"];
                    lblMessage.Text = "Order No:" + dtSave.Rows[0]["intOrderNo"] + " Saved Successfully";
                    lblMessage.Font.Bold = true;

                    Session["TemplateDataDetails"] = null;
                    BindBlnkGrid();
                    if (common.myStr(ViewState["PreAuthReq"]) == "Y")
                    {

                        RadWindowForNew.NavigateUrl = "~/EMR/Newpreauth.aspx?CompanyId=" + CompanyId.ToString() + "&InsuranceId=" + InsuranceId.ToString() + "&CardId=" + CardId.ToString();
                        RadWindowForNew.Height = 600;
                        RadWindowForNew.Width = 900;
                        RadWindowForNew.Top = 40;
                        RadWindowForNew.Left = 100;
                        RadWindowForNew.Title = "Pre-Auth";
                        RadWindowForNew.OnClientClose = "OnClientClose";
                        RadWindowForNew.Modal = true;
                        RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code    
                        RadWindowForNew.VisibleStatusbar = false;
                        RadWindowForNew.InitialBehaviors = WindowBehaviors.Maximize;

                    }
                    if (common.myStr(Request.QueryString["IsEMRPopUp"]).Equals("1"))
                    {
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "returnToParent();", true);
                    }

                    ViewState["RadiologyFormRequest"] = "";
                }
                else
                {
                    lblMessage.ForeColor = System.Drawing.Color.Red;
                    lblMessage.Text = dtSave.Rows[0]["chvErrorStatus"].ToString();
                    ViewState["RadiologyFormRequest"] = dtSave.Rows[0]["chvErrorStatus"].ToString();

                }
                //}
                hdnIsUnSavedData.Value = "0";
                //bindBlankSelectedServices();
                ViewState["GridData"] = "";
                //BindPatientAlert();
            }
            else
            {
                Alert.ShowAjaxMsg("No Service selected", Page);
                return;
            }

            //  ClearForm();

            //if (btnUpdate.Text == "Update")
            //{
            //    btnUpdate.Text = "Save";
            //}
            ScriptManager.RegisterStartupScript(Page, GetType(), "scrip1", "nSat=0;", true);
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            ds.Dispose();
            dt.Dispose();
            dtSave.Dispose();
        }
    }
    //protected void SaveData1()
    //{
    //    DataSet ds = new DataSet();
    //    DataTable dt = new DataTable();
    //    DataTable dtSave = new DataTable();
    //    try
    //    {
    //        if (!isSave())
    //        {
    //            return;
    //        }

    //        //if (ddlAdvisingDoctor.SelectedIndex == 0 && (common.myStr(Request.QueryString["From"]).ToUpper().Equals("WARD")
    //        //    || common.myStr(Session["OPIP"]).ToUpper().Equals("I")))
    //        //{
    //        //    Alert.ShowAjaxMsg("Please select Advising Doctor", Page);
    //        //    return;
    //        //}

    //        //BaseC.EMROrders order = new BaseC.EMROrders(sConString);
    //        string doctorid = "0";

    //        if (Request.QueryString["For"] != null && Request.QueryString["DoctorId"] != null)
    //        {
    //            doctorid = common.myStr(Request.QueryString["DoctorId"]);
    //        }

    //        //if (common.myStr(Request.QueryString["From"]).ToUpper().Equals("WARD")
    //        //    || common.myStr(Session["OPIP"]).ToUpper().Equals("I"))
    //        //{
    //        //    //BaseC.clsEMRBilling objBill = new BaseC.clsEMRBilling(sConString);

    //        //    //doctorid = objBill.GetPatientConsultingDoctor(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["FacilityId"]),
    //        //    //                    common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"])).ToString();

    //        //    WebClient client = new WebClient();
    //        //    client.Headers["Content-type"] = "application/json";
    //        //    client.Encoding = Encoding.UTF8;
    //        //    string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/GetPatientConsultingDoctor";
    //        //    APIRootClass.GetPatientConsultingDoctor objRoot = new global::APIRootClass.GetPatientConsultingDoctor();
    //        //    objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
    //        //    objRoot.FacilityId = common.myInt(Session["FacilityId"]);
    //        //    objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
    //        //    objRoot.EncounterId = common.myInt(Session["EncounterId"]);
    //        //    //string strtriageID = string.Empty;
    //        //    string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
    //        //    string sValue = client.UploadString(ServiceURL, inputJson);
    //        //    sValue = JsonConvert.DeserializeObject<string>(sValue);
    //        //    doctorid = JsonConvert.DeserializeObject<string>(sValue);
    //        //}

    //        if (common.myInt(doctorid).Equals(0))
    //        {
    //            doctorid = common.myInt(Session["EmployeeId"]).ToString();
    //        }

    //        //if (common.myStr(Request.QueryString["From"]).ToUpper().Equals("WARD")
    //        //     || common.myStr(Session["OPIP"]).ToUpper().Equals("I"))
    //        //{
    //        //    if (ddlAdvisingDoctor.SelectedIndex > 0)
    //        //    {
    //        //        doctorid = common.myInt(ddlAdvisingDoctor.SelectedValue).ToString();
    //        //    }
    //        //}

    //        StringBuilder strToothIds = new StringBuilder();
    //        if (ddlGlobalToothNo.Visible)
    //        {
    //            if (ddlGlobalToothNo.CheckedItems.Count > 0)
    //            {
    //                for (int i = 0; i < ddlGlobalToothNo.CheckedItems.Count; i++)
    //                {
    //                    strToothIds.Append(ddlGlobalToothNo.CheckedItems[i].Value.ToString() + ",");
    //                }
    //            }
    //            else
    //            {
    //                Alert.ShowAjaxMsg("Please Select Tooth No", Page);
    //                return;
    //            }
    //        }
    //        hdnToothNo.Value = common.myStr(strToothIds.ToString());

    //        StringBuilder strXML = new StringBuilder();
    //        ArrayList coll = new ArrayList();

    //        dt.Columns.Add("ServiceID");
    //        dt.Columns.Add("ServiceName");
    //        //DataRow dr = dt.NewRow(); 
    //        //foreach (GridViewRow row in gvPatientServiceDetail.Rows)
    //        //{
    //        //    DataRow dr = dt.NewRow();
    //        //    HiddenField hdnExcludedServices = (HiddenField)row.FindControl("hdnExcludedServices");
    //        //    HiddenField hdnPackageId = (HiddenField)row.FindControl("hdnPackageId");
    //        //    HiddenField hdnServiceID = (HiddenField)row.FindControl("hdnServiceID");
    //        //    HiddenField hdnStat = (HiddenField)row.FindControl("hdnStat");
    //        //    Label lblRemarks = (Label)row.FindControl("lblRemarks");
    //        //    TextBox txtUnit = (TextBox)row.FindControl("txtUnit");
    //        //    Label serviceNAme = (row.FindControl("lblServiceName") as Label);
    //        //    HiddenField hdnRequestToDepartment = (HiddenField)row.FindControl("hdnRequestToDepartment");
    //        //    HiddenField hdnToothNo = (HiddenField)row.FindControl("hdnToothNo");
    //        //    Label lblTestDate = (Label)row.FindControl("lblTestDate");
    //        //    dr["ServiceID"] = common.myInt(hdnServiceID.Value).ToString();
    //        //    dr["ServiceName"] = serviceNAme.Text;
    //        //    dt.Rows.Add(dr);
    //        //if (hdnRequestToDepartment.Value != "1")
    //        //{
    //        //    coll.Add(common.myInt(hdnServiceID.Value));//ServiceId INT,--1
    //        //    coll.Add(DBNull.Value);//VisitDate SMALLDATETIME,--2
    //        //    coll.Add(common.myInt(txtUnit.Text));//Units SMALLINT,--3
    //        //    coll.Add(common.myInt(doctorid));//DoctorId INT,--4
    //        //    coll.Add(DBNull.Value);//ServiceAmount MONEY,--5
    //        //    coll.Add(DBNull.Value);//DoctorAmount MONEY,--6
    //        //    coll.Add(DBNull.Value);//ServiceDiscountAmount MONEY,--7
    //        //    coll.Add(DBNull.Value);//DoctorDiscountAmount MONEY,--8
    //        //    coll.Add(DBNull.Value);//AmountPayableByPatient MONEY,--9
    //        //    coll.Add(DBNull.Value);//AmountPayableByPayer MONEY,--10
    //        //    coll.Add(DBNull.Value);//ServiceDiscountPer MONEY,--11
    //        //    coll.Add(DBNull.Value);//DoctorDiscountPer MONEY,--12
    //        //    coll.Add(0);//PackageId INT,--13
    //        //    coll.Add(0);//OrderId INT,--14
    //        //    coll.Add(DBNull.Value);//UnderPackage BIT,--15
    //        //    coll.Add(common.myStr(hdnICDCode.Value).Trim());//ICDID VARCHAR(100),--16
    //        //    coll.Add(DBNull.Value);//ResourceID INT,--17
    //        //    coll.Add(DBNull.Value);//SurgeryAmount MONEY,--18
    //        //    coll.Add(DBNull.Value);//ProviderPercent MONEY,--19
    //        //    coll.Add(DBNull.Value);//SeQNo INT,--20
    //        //    coll.Add(common.myStr(lblRemarks.Text).Trim());//Serviceremarks VARCHAR(150),--21
    //        //    coll.Add(DBNull.Value);//DetailId INT, --22
    //        //    coll.Add(0);//--23
    //        //    coll.Add(0);//--24
    //        //    coll.Add(DBNull.Value);//CoPayAmt MONEY,--25
    //        //    coll.Add(DBNull.Value);//DeductableAmount MONEY,--26
    //        //    coll.Add(DBNull.Value);//ApprovalCode VARCHAR(50),--27
    //        //    coll.Add(common.myInt(Session["FacilityId"]));//FacilityId SMALLINT,--28
    //        //    coll.Add(hdnStat.Value);//Stat BIT,--29
    //        //    coll.Add(hdnExcludedServices.Value);//IsExcluded BIT, --30
    //        //    coll.Add(0);//CopayPerc MONEY,--31
    //        //    coll.Add(0);//CopayOnNet BIT, --32
    //        //    if (!string.IsNullOrEmpty(lblTestDate.Text))
    //        //    {
    //        //        coll.Add(lblTestDate.Text);//TestDateTime SMALLDATETIME, --33
    //        //    }
    //        //    else
    //        //    {
    //        //        coll.Add(DBNull.Value);//TestDateTime SMALLDATETIME, --33
    //        //    }
    //        //    coll.Add(hdnToothNo.Value);//Tooth No string, --34
    //        //    strXML.Append(common.setXmlTable(ref coll));
    //        //}
    //        //}
    //        //if (hdnRequestToDepartment.Value != "1")
    //        //{
    //        coll.Add(common.myInt(cmbServiceName.SelectedValue));//ServiceId INT,--1
    //        coll.Add(DBNull.Value);//VisitDate SMALLDATETIME,--2
    //        coll.Add(common.myInt(1));//Units SMALLINT,--3
    //        coll.Add(common.myInt(doctorid));//DoctorId INT,--4
    //        coll.Add(DBNull.Value);//ServiceAmount MONEY,--5
    //        coll.Add(DBNull.Value);//DoctorAmount MONEY,--6
    //        coll.Add(DBNull.Value);//ServiceDiscountAmount MONEY,--7
    //        coll.Add(DBNull.Value);//DoctorDiscountAmount MONEY,--8
    //        coll.Add(DBNull.Value);//AmountPayableByPatient MONEY,--9
    //        coll.Add(DBNull.Value);//AmountPayableByPayer MONEY,--10
    //        coll.Add(DBNull.Value);//ServiceDiscountPer MONEY,--11
    //        coll.Add(DBNull.Value);//DoctorDiscountPer MONEY,--12
    //        coll.Add(0);//PackageId INT,--13
    //        coll.Add(0);//OrderId INT,--14
    //        coll.Add(DBNull.Value);//UnderPackage BIT,--15
    //        coll.Add(common.myStr(txtICDCode.Text).Trim());//ICDID VARCHAR(100),--16
    //        coll.Add(DBNull.Value);//ResourceID INT,--17
    //        coll.Add(DBNull.Value);//SurgeryAmount MONEY,--18
    //        coll.Add(DBNull.Value);//ProviderPercent MONEY,--19
    //        coll.Add(DBNull.Value);//SeQNo INT,--20
    //        coll.Add(common.myStr("").Trim());//Serviceremarks VARCHAR(150),--21
    //        coll.Add(DBNull.Value);//DetailId INT, --22
    //        coll.Add(0);//--23
    //        coll.Add(0);//--24
    //        coll.Add(DBNull.Value);//CoPayAmt MONEY,--25
    //        coll.Add(DBNull.Value);//DeductableAmount MONEY,--26
    //        coll.Add(DBNull.Value);//ApprovalCode VARCHAR(50),--27
    //        coll.Add(common.myInt(Session["FacilityId"]));//FacilityId SMALLINT,--28
    //        coll.Add(chkStat.Checked);//Stat BIT,--29
    //        coll.Add(false);//IsExcluded BIT, --30
    //        coll.Add(0);//CopayPerc MONEY,--31
    //        coll.Add(0);//CopayOnNet BIT, --32
    //                    //if (!string.IsNullOrEmpty(lblTestDate.Text))
    //                    //{
    //                    //    coll.Add(lblTestDate.Text);//TestDateTime SMALLDATETIME, --33
    //                    //}
    //                    //else
    //                    //{
    //                    //    coll.Add(DBNull.Value);//TestDateTime SMALLDATETIME, --33
    //                    //}
    //        coll.Add(coll.Add(""));//TestDateTime SMALLDATETIME, --33.Text);//TestDateTime SMALLDATETIME, --33
    //        coll.Add(hdnToothNo.Value);//Tooth No string, --34
    //        strXML.Append(common.setXmlTable(ref coll));
    //        // }

    //        coll = new ArrayList();
    //        StringBuilder strXMLAleart = new StringBuilder();
    //        Session["Preauth"] = dt;
    //        if (strXML.ToString() != "")
    //        {

    //            //ds = order.GetEncounterCompany(common.myInt(Session["EncounterId"]));
    //            WebClient client = new WebClient();
    //            client.Headers["Content-type"] = "application/json";
    //            client.Encoding = Encoding.UTF8;
    //            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/GetEncounterCompany";
    //            APIRootClass.GetEncounterCompany objRoot = new global::APIRootClass.GetEncounterCompany();
    //            objRoot.EncounterId = common.myInt(Session["EncounterId"]);
    //            //string strtriageID = string.Empty;
    //            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
    //            string sValue = client.UploadString(ServiceURL, inputJson);
    //            sValue = JsonConvert.DeserializeObject<string>(sValue);
    //            ds = JsonConvert.DeserializeObject<DataSet>(sValue);

    //            string sChargeCalculationRequired = "Y";
    //            string stype = "P" + ds.Tables[0].Rows[0]["opip"].ToString().Trim();
    //            string opip = ds.Tables[0].Rows[0]["opip"].ToString().Trim();

    //            int CompanyId = 0, InsuranceId = 0, CardId = 0;
    //            if (ds.Tables[0].Rows[0]["CompanyCode"].ToString().Trim() != "")
    //            {
    //                CompanyId = common.myInt(ds.Tables[0].Rows[0]["CompanyCode"].ToString().Trim());
    //            }
    //            if (ds.Tables[0].Rows[0]["InsuranceCode"].ToString().Trim() != "")
    //            {
    //                InsuranceId = common.myInt(ds.Tables[0].Rows[0]["InsuranceCode"].ToString().Trim());
    //            }
    //            if (ds.Tables[0].Rows[0]["CardId"].ToString().Trim() != "")
    //            {
    //                CardId = common.myInt(ds.Tables[0].Rows[0]["CardId"].ToString().Trim());
    //            }
    //            int RequestId = common.myInt(Request.QueryString["RequestId"]);
    //            //Hashtable hshOut = new Hashtable();
    //            if (opip == "E")
    //            {
    //                opip = "O";
    //            }
    //            int isERRequest = 1;
    //            //if (Session["DuplicateCheck"].Equals(0))
    //            //{
    //            //Session["DuplicateCheck"] = 1;

    //            DateTime dtime = Convert.ToDateTime(DateTime.Now.ToString("yyyy/MM/dd HH:mm"));


    //            //return;
    //            client = new WebClient();
    //            client.Headers["Content-type"] = "application/json";
    //            client.Encoding = Encoding.UTF8;
    //            ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SaveServiceOrderEMR";
    //            APIRootClass.SaveServiceOrderEMR objRoot1 = new global::APIRootClass.SaveServiceOrderEMR();
    //            objRoot1.HospitalLocationId = common.myInt(Session["HospitalLocationID"]);
    //            objRoot1.FacilityId = common.myInt(Session["FacilityId"]);
    //            objRoot1.RegistrationId = common.myInt(Session["RegistrationId"]);
    //            objRoot1.EncounterId = common.myInt(Session["EncounterId"]);
    //            objRoot1.xmlServiceList = strXML.ToString();
    //            objRoot1.XMLPatientAlert = strXMLAleart.ToString();
    //            if (Request.QueryString["Op"] != null)
    //            {
    //                objRoot1.Remark = "PreOpOrders!" + common.myStr("");
    //            }
    //            else
    //            {
    //                objRoot1.Remark = common.myStr("");
    //            }
    //            objRoot1.UserId = common.myInt(Session["UserID"]);
    //            objRoot1.DoctorId = common.myInt(doctorid);
    //            objRoot1.CompanyId = CompanyId;
    //            objRoot1.OrderType = stype;
    //            objRoot1.PayerType = "E";
    //            objRoot1.PatientOPIP = opip;
    //            objRoot1.InsuranceId = InsuranceId;
    //            objRoot1.CardId = CardId;
    //            objRoot1.OrderDate = dtime;
    //            objRoot1.ChargeCalculationRequired = sChargeCalculationRequired;
    //            objRoot1.IsAllergyReviewed = false;
    //            objRoot1.IsERorEMRServices = isERRequest;
    //            objRoot1.RequestId = RequestId;
    //            objRoot1.xmlTemplateDetails = common.myStr(ViewState["vsTemplateDataDetails"]);
    //            //string strtriageID = string.Empty;
    //            inputJson = (new JavaScriptSerializer()).Serialize(objRoot1);
    //            sValue = client.UploadString(ServiceURL, inputJson);
    //            sValue = JsonConvert.DeserializeObject<string>(sValue);
    //            dtSave = JsonConvert.DeserializeObject<DataTable>(sValue);


    //            //if (Request.QueryString["Op"] != null)
    //            //{
    //            //    //DateTime dtime = common.myDate(DateTime.Now.ToString("yyyy-MM-dd HH:mm"));
    //            //    hshOut = order.saveOrders(common.myInt(Session["HospitalLocationID"]), common.myInt(Session["FacilityId"]),
    //            //                        common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"]), strXML.ToString(),
    //            //                        strXMLAleart.ToString(), "PreOpOrders!"+common.myStr(txtInstruction.Text), common.myInt(Session["UserID"]),
    //            //                        common.myInt(doctorid), CompanyId, stype, common.myStr("E"), common.myStr(opip), InsuranceId,
    //            //                        CardId, dtime, sChargeCalculationRequired, chkAllergyReviewed.Checked, isERRequest,
    //            //                        RequestId, common.myStr(ViewState["vsTemplateDataDetails"]));
    //            //}
    //            //else
    //            //{
    //            //    //DateTime dtime = common.myDate(DateTime.Now.ToString("yyyy-MM-dd HH:mm"));
    //            //    hshOut = order.saveOrders(common.myInt(Session["HospitalLocationID"]), common.myInt(Session["FacilityId"]),
    //            //                        common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"]), strXML.ToString(),
    //            //                        strXMLAleart.ToString(), common.myStr(txtInstruction.Text), common.myInt(Session["UserID"]),
    //            //                        common.myInt(doctorid), CompanyId, stype, common.myStr("E"), common.myStr(opip), InsuranceId,
    //            //                        CardId, dtime, sChargeCalculationRequired, chkAllergyReviewed.Checked, isERRequest,
    //            //                        RequestId, common.myStr(ViewState["vsTemplateDataDetails"]));
    //            //}
    //            //if (hshOut["chvErrorStatus"].ToString().Length == 0)
    //            if (common.myLen(dtSave.Rows[0]["chvErrorStatus"]).Equals(0))
    //            {
    //                lblMessage.ForeColor = System.Drawing.Color.Green;
    //                //ViewState["OrderId"] = hshOut["intOrderId"];
    //                //lblMessage.Text = "Order No:" + hshOut["intOrderNo"] + " Saved Successfully";
    //                ViewState["OrderId"] = dtSave.Rows[0]["intOrderId"];
    //                lblMessage.Text = "Order No:" + dtSave.Rows[0]["intOrderNo"] + " Saved Successfully";
    //                lblMessage.Font.Bold = true;

    //                Session["TemplateDataDetails"] = null;

    //                cmbServiceName.Text = "";
    //                cmbServiceName.ClearSelection();
    //                ddlGlobalToothNo.Text = "";
    //                ddlGlobalToothNo.ClearSelection();
    //                ddlGlobalToothNo.Items.Clear();
    //                ddlGlobalToothNo.Visible = false;
    //                //BindBlnkGrid();
    //                //if (common.myStr(ViewState["PreAuthReq"]) == "Y")
    //                //{

    //                //    RadWindow2.NavigateUrl = "~/EMR/Newpreauth.aspx?CompanyId=" + CompanyId.ToString() + "&InsuranceId=" + InsuranceId.ToString() + "&CardId=" + CardId.ToString();
    //                //    RadWindow2.Height = 600;
    //                //    RadWindow2.Width = 900;
    //                //    RadWindow2.Top = 40;
    //                //    RadWindow2.Left = 100;
    //                //    RadWindow2.Title = "Pre-Auth";
    //                //    RadWindow2.OnClientClose = "OnClientClose";
    //                //    RadWindow2.Modal = true;
    //                //    RadWindow2.VisibleOnPageLoad = true; // Set this property to True for showing window from code    
    //                //    RadWindow2.VisibleStatusbar = false;
    //                //    RadWindow2.InitialBehaviors = WindowBehaviors.Maximize;

    //                //}
    //                //if (common.myStr(Request.QueryString["IsEMRPopUp"]).Equals("1"))
    //                //{
    //                //    ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "returnToParent();", true);
    //                //}
    //            }
    //            else
    //            {
    //                lblMessage.ForeColor = System.Drawing.Color.Red;
    //                lblMessage.Text = dtSave.Rows[0]["chvErrorStatus"].ToString();
    //                //Alert.ShowAjaxMsg(dtSave.Rows[0]["chvErrorStatus"].ToString(), Page);
    //                StringBuilder strXML1 = new StringBuilder();
    //                if (common.myInt(cmbServiceName.SelectedValue) > 0)
    //                {

    //                    if (strXML1.ToString() != "")
    //                    {
    //                        strXML1.Append(",");
    //                    }
    //                    strXML1.Append(common.myInt(cmbServiceName.SelectedValue));

    //                }
    //                if (strXML.ToString().Length > 0)
    //                {
    //                    RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?Source=ProcedureOrder&TemplateRequiredServices=" + common.myStr(strXML1.ToString() + "&RegNo=" + common.myStr(Session["RegistrationNo"])) + "&TagType=S";
    //                    RadWindowForNew.Height = 625;
    //                    RadWindowForNew.Width = 1060;
    //                    RadWindowForNew.Top = 10;
    //                    RadWindowForNew.Left = 10;
    //                    //RadWindow1.OnClientClose = "addRequestFormOnClientClose";
    //                    RadWindowForNew.Modal = true;
    //                    RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code    
    //                    RadWindowForNew.VisibleStatusbar = false;
    //                    RadWindowForNew.InitialBehaviors = WindowBehaviors.Maximize;
    //                }
    //            }
    //            //}
    //            hdnIsUnSavedData.Value = "0";
    //            //bindBlankSelectedServices();
    //            ViewState["GridData"] = "";
    //            //BindPatientAlert();
    //        }
    //        else
    //        {
    //            Alert.ShowAjaxMsg("No Service selected", Page);
    //            return;
    //        }

    //        // ClearForm();

    //        //if (btnUpdate.Text == "Update")
    //        //{
    //        //    btnUpdate.Text = "Save";
    //        //}
    //        bindOrdersAndProcedures();
    //        ScriptManager.RegisterStartupScript(Page, GetType(), "scrip1", "nSat=0;", true);
    //    }
    //    catch (Exception Ex)
    //    {
    //        lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
    //        lblMessage.Text = "Error: " + Ex.Message;
    //        clsExceptionLog objException = new clsExceptionLog();
    //        objException.HandleException(Ex);
    //        objException = null;
    //    }
    //    finally
    //    {
    //        ds.Dispose();
    //        dt.Dispose();
    //        dtSave.Dispose();
    //    }
    //}

    private bool isSave()
    {
        bool isSaved = false;
        HiddenField hdnIsTemplateRequired = new HiddenField();
        HiddenField hdnServiceID = new HiddenField();
        StringBuilder strbRequiredServices = new StringBuilder();
        StringBuilder strXML = new StringBuilder();
        StringBuilder strTemplateDataDetailsXML = new StringBuilder();

        DataSet dsTemplateDataDetails = new DataSet();
        try
        {


            ViewState["vsTemplateDataDetails"] = "";


            if (Session["TemplateDataDetails"] != null)
            {
                dsTemplateDataDetails = (DataSet)Session["TemplateDataDetails"];
            }

            for (int i = 0; i < gvPatientServiceDetail.Rows.Count; i++)
            {
                hdnIsTemplateRequired = (HiddenField)gvPatientServiceDetail.Rows[i].FindControl("hdnIsTemplateRequired");
                hdnServiceID = (HiddenField)gvPatientServiceDetail.Rows[i].FindControl("hdnServiceID");

                if (hdnIsTemplateRequired.Value.Equals("2"))
                {
                    if (dsTemplateDataDetails.Tables.Count > 0)
                    {
                        if (dsTemplateDataDetails.Tables[0].Rows.Count > 0)
                        {
                            if (common.myInt(hdnServiceID.Value) > 0)
                            {
                                dsTemplateDataDetails.Tables[0].DefaultView.RowFilter = "";
                                dsTemplateDataDetails.Tables[0].DefaultView.RowFilter = "ServiceId=" + common.myInt(hdnServiceID.Value);

                                if (dsTemplateDataDetails.Tables[0].DefaultView.Count == 0)
                                {
                                    strbRequiredServices.Append(((Label)gvPatientServiceDetail.Rows[i].FindControl("lblServiceName")).Text.Trim() + ", ");
                                }
                            }
                        }
                        else
                        {
                            strbRequiredServices.Append(((Label)gvPatientServiceDetail.Rows[i].FindControl("lblServiceName")).Text.Trim() + ", ");
                        }
                    }
                    else
                    {
                        strbRequiredServices.Append(((Label)gvPatientServiceDetail.Rows[i].FindControl("lblServiceName")).Text.Trim() + ", ");
                    }
                }
            }

            if (strbRequiredServices.ToString().Trim().Length > 0)
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblMessage.Text = "Investigation Specification Required for: " + strbRequiredServices;

                isSaved = false;
            }
            else
            {
                //  litRequiredInvestigationSpecification.Text = string.Empty;
                isSaved = true;
            }

            if (dsTemplateDataDetails.Tables.Count > 0)
            {
                if (dsTemplateDataDetails.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow DR in dsTemplateDataDetails.Tables[0].Rows)
                    {
                        strTemplateDataDetailsXML.Append(DR["xmlTemplateDetails"]);
                    }
                }
            }
            ViewState["vsTemplateDataDetails"] = strTemplateDataDetailsXML;

            if (common.myStr(Request.QueryString["For"]) == "SDReq"
                && common.myInt(Request.QueryString["RequestId"]) > 0)
            {
                lblMessage.Text = "";
                isSaved = true;
            }
        }
        catch (Exception Ex)
        {
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            dsTemplateDataDetails.Dispose();
        }

        return isSaved;
    }
    //private bool isSave1()
    //{
    //    bool isSaved = false;
    //    HiddenField hdnIsTemplateRequired = new HiddenField();
    //    HiddenField hdnServiceID = new HiddenField();
    //    StringBuilder strbRequiredServices = new StringBuilder();
    //    StringBuilder strXML = new StringBuilder();
    //    StringBuilder strTemplateDataDetailsXML = new StringBuilder();

    //    DataSet dsTemplateDataDetails = new DataSet();
    //    try
    //    {


    //        ViewState["vsTemplateDataDetails"] = "";


    //        if (Session["TemplateDataDetails"] != null)
    //        {
    //            dsTemplateDataDetails = (DataSet)Session["TemplateDataDetails"];
    //        }

    //        //for (int i = 0; i < gvPatientServiceDetail.Rows.Count; i++)
    //        //{
    //        //    hdnIsTemplateRequired = (HiddenField)gvPatientServiceDetail.Rows[i].FindControl("hdnIsTemplateRequired");
    //        //    hdnServiceID = (HiddenField)gvPatientServiceDetail.Rows[i].FindControl("hdnServiceID");

    //        //    if (hdnIsTemplateRequired.Value.Equals("2"))
    //        //    {
    //        //        if (dsTemplateDataDetails.Tables.Count > 0)
    //        //        {
    //        //            if (dsTemplateDataDetails.Tables[0].Rows.Count > 0)
    //        //            {
    //        //                if (common.myInt(hdnServiceID.Value) > 0)
    //        //                {
    //        //                    dsTemplateDataDetails.Tables[0].DefaultView.RowFilter = "";
    //        //                    dsTemplateDataDetails.Tables[0].DefaultView.RowFilter = "ServiceId=" + common.myInt(hdnServiceID.Value);

    //        //                    if (dsTemplateDataDetails.Tables[0].DefaultView.Count == 0)
    //        //                    {
    //        //                        strbRequiredServices.Append(((Label)gvPatientServiceDetail.Rows[i].FindControl("lblServiceName")).Text.Trim() + ", ");
    //        //                    }
    //        //                }
    //        //            }
    //        //            else
    //        //            {
    //        //                strbRequiredServices.Append(((Label)gvPatientServiceDetail.Rows[i].FindControl("lblServiceName")).Text.Trim() + ", ");
    //        //            }
    //        //        }
    //        //        else
    //        //        {
    //        //            strbRequiredServices.Append(((Label)gvPatientServiceDetail.Rows[i].FindControl("lblServiceName")).Text.Trim() + ", ");
    //        //        }
    //        //    }
    //        //}

    //        dsTemplateDataDetails.Tables[0].DefaultView.RowFilter = "";
    //        dsTemplateDataDetails.Tables[0].DefaultView.RowFilter = "ServiceId=" + common.myInt(cmbServiceName.SelectedValue);


    //        if (strbRequiredServices.ToString().Trim().Length > 0)
    //        {
    //            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
    //            lblMessage.Text = "Investigation Specification Required for: " + strbRequiredServices;

    //            isSaved = false;
    //        }
    //        else
    //        {
    //            // litRequiredInvestigationSpecification.Text = string.Empty;
    //            isSaved = true;
    //        }

    //        if (dsTemplateDataDetails.Tables.Count > 0)
    //        {
    //            if (dsTemplateDataDetails.Tables[0].Rows.Count > 0)
    //            {
    //                foreach (DataRow DR in dsTemplateDataDetails.Tables[0].Rows)
    //                {
    //                    strTemplateDataDetailsXML.Append(DR["xmlTemplateDetails"]);
    //                }
    //            }
    //        }
    //        ViewState["vsTemplateDataDetails"] = strTemplateDataDetailsXML;

    //        if (common.myStr(Request.QueryString["For"]) == "SDReq"
    //            && common.myInt(Request.QueryString["RequestId"]) > 0)
    //        {
    //            lblMessage.Text = "";
    //            isSaved = true;
    //        }
    //    }
    //    catch (Exception Ex)
    //    {
    //        clsExceptionLog objException = new clsExceptionLog();
    //        objException.HandleException(Ex);
    //        objException = null;
    //    }
    //    finally
    //    {
    //        dsTemplateDataDetails.Dispose();
    //    }

    //    return isSaved;
    //}
    private void setTemplateTableInSection()
    {
        DataSet ds = new DataSet();
        DataTable tbl = new DataTable();
        try
        {
            DataColumn col;

            col = new DataColumn("RegistrationId");
            tbl.Columns.Add(col);

            col = new DataColumn("EncounterId");
            tbl.Columns.Add(col);

            col = new DataColumn("xmlTemplateDetails");
            tbl.Columns.Add(col);

            col = new DataColumn("SectionId");
            tbl.Columns.Add(col);

            col = new DataColumn("ServiceId");
            tbl.Columns.Add(col);

            col = new DataColumn("TemplateId");
            tbl.Columns.Add(col);

            ds.Tables.Add(tbl);
            Session["TemplateDataDetails"] = ds;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            //ds.Dispose();
            //tbl.Dispose();
        }
    }
    private void GetGlobalToothNo()
    {
        //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);
        DataSet ds = new DataSet();
        try
        {
            if (common.myStr(ViewState["dsGlobalToothNo"]).Equals(""))
            {
                //ds = objEMR.GetGlobalToothNo();

                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/GetGlobalToothNo";
                string inputJson = (new JavaScriptSerializer()).Serialize(null);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                ds = JsonConvert.DeserializeObject<DataSet>(sValue);

                ViewState["dsGlobalToothNo"] = ds;
            }
            else
                ds = ViewState["dsGlobalToothNo"] as DataSet;

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlGlobalToothNo.DataSource = ds.Tables[0];
                ddlGlobalToothNo.DataTextField = "ToothNo";
                ddlGlobalToothNo.DataValueField = "ToothId";
                ddlGlobalToothNo.DataBind();
            }
        }
        catch (Exception Ex)
        {
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            ds.Dispose();
            //objEMR = null;
        }
    }

    //order List
    protected DataTable CreateTableOrdersAndProcedure()
    {
        DataTable Dt = new DataTable();
        DataColumn dc = new DataColumn("ID", typeof(int));
        dc.DefaultValue = 0;
        Dt.Columns.Add(dc);

        Dt.Columns.Add("AlertRequired", typeof(bool));
        Dt.Columns.Add("AlertMessage", typeof(string));
        Dt.Columns.Add("ServiceName", typeof(string));
        Dt.Columns.Add("ServiceId", typeof(int));
        Dt.Columns.Add("ICDID", typeof(string));
        Dt.Columns.Add("DoctorId", typeof(string));
        Dt.Columns.Add("FacilityId", typeof(string));
        Dt.Columns.Add("ServiceType", typeof(string));
        Dt.Columns.Add("Remarks", typeof(string));
        Dt.Columns.Add("Stat", typeof(bool));
        Dt.Columns.Add("LabStatus", typeof(string));
        Dt.Columns.Add("OrderId", typeof(int));
        Dt.Columns.Add("EncodedBy", typeof(int));
        Dt.Columns.Add("IsExcluded", typeof(bool));
        Dt.Columns.Add("CompanyId", typeof(int));
        Dt.Columns.Add("PlanTypeId", typeof(int));
        Dt.Columns.Add("PackageId", typeof(int));
        Dt.Columns.Add("RequestToDepartment", typeof(bool));
        Dt.Columns.Add("OrgCharges", typeof(double));
        Dt.Columns.Add("Charges", typeof(double));
        Dt.Columns.Add("result", typeof(int));
        Dt.Columns.Add("CPTCode", typeof(string));
        Dt.Columns.Add("Units", typeof(int));
        Dt.Columns.Add("TestDate", typeof(DateTime));
        Dt.Columns.Add("ToothNo", typeof(string));

        return Dt;
    }
    protected void gvPatientServiceDetail_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.Header)
            {


                //if (common.myStr(Request.QueryString["For"]) == "SDReq"
                //    && common.myInt(Request.QueryString["RequestId"]) > 0)
                //{
                //    e.Row.Cells[15].Visible = false;
                //}
            }
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                HiddenField hdnExcludedServices = (HiddenField)e.Row.FindControl("hdnExcludedServices");


                if (hdnExcludedServices.Value != "")
                {
                    if (common.myBool(hdnExcludedServices.Value))
                    {
                        e.Row.BackColor = System.Drawing.Color.Pink;
                    }
                    else
                    {
                        e.Row.BackColor = System.Drawing.Color.White;
                    }
                }
                HiddenField hdnServiceID = (HiddenField)e.Row.FindControl("hdnServiceID");
                Label lblServiceName = (Label)e.Row.FindControl("lblServiceName");
                HiddenField hdnIsTemplateRequired = (HiddenField)e.Row.FindControl("hdnIsTemplateRequired");
                HiddenField hdnresult = (HiddenField)e.Row.FindControl("hdnresult");
                HiddenField hdnAlertRequired = (HiddenField)e.Row.FindControl("hdnAlertRequired");
                HiddenField hdnAlertMessage = (HiddenField)e.Row.FindControl("hdnAlertMessage");
                HiddenField hdnStat = (HiddenField)e.Row.FindControl("hdnStat");
                TextBox txtUnit = (TextBox)e.Row.FindControl("txtUnit");
                if (common.myBool(hdnStat.Value) == true)
                {
                    //added by bhakti
                    e.Row.Cells[1].BackColor = System.Drawing.Color.Red;
                }

                if (common.myBool(hdnAlertRequired.Value) == true)
                {
                    //lblAlertMessage.Text = hdnAlertMessage.Value;
                    //lblAlertMessage.ForeColor = System.Drawing.Color.Red; today
                }


                Label lblCharges = (Label)e.Row.FindControl("lblCharges");
                hdnIsTemplateRequired.Value = "0";
                //BaseC.EMROrders order = new BaseC.EMROrders(sConString);

                LinkButton lnkAddInvestigationSpecification = (LinkButton)e.Row.FindControl("lnkAddInvestigationSpecification");
                lnkAddInvestigationSpecification.Visible = false;

                int result = common.myInt(hdnresult.Value);

                if (result.Equals(2))
                {
                    lblServiceName.ForeColor = System.Drawing.Color.Red;
                    lblServiceName.Style["font-bold"] = "true";
                    hdnIsTemplateRequired.Value = "2";
                    lnkAddInvestigationSpecification.Visible = true;
                }
                else if (result.Equals(1))
                {
                    lblServiceName.ForeColor = System.Drawing.Color.Blue; //Color.FromName("#5D0000");
                    hdnIsTemplateRequired.Value = "1";
                    lnkAddInvestigationSpecification.Visible = true;
                }

                HiddenField hdnGDServiceType = (HiddenField)e.Row.FindControl("hdnGDServiceType");

                if (common.myStr(hdnGDServiceType.Value).Equals("I") || common.myStr(hdnGDServiceType.Value).Equals("IS"))
                {
                    txtUnit.Text = "1";
                    txtUnit.Enabled = false;
                }
                else
                {
                    txtUnit.Enabled = true;
                }

                txtUnit.Attributes.Add("onchange", "javascript:CalculateFromUnit();");
            }
        }
        catch (Exception Ex)
        {
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    protected void gvPatientServiceDetail_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            if (e.RowIndex >= 0)
            {
                HiddenField hdnServiceID = (HiddenField)gvPatientServiceDetail.Rows[e.RowIndex].FindControl("hdnServiceID");
                hdnUpdateServiceId.Value = hdnServiceID.Value;
                //hdnOrderId.Value = gvPatientServiceDetail.Rows[e.RowIndex].Cells[10].Text;
                //hdnUpdateOrderDtlId.Value = ((HiddenField)gvPatientServiceDetail.Rows[e.RowIndex].FindControl("hdnOrderDtlId")).Value;
                //hdnDepartmentRequest.Value = ((HiddenField)gvPatientServiceDetail.Rows[e.RowIndex].FindControl("hdnRequestToDepartment")).Value;
                if (hdnUpdateServiceId.Value != "&nbsp;")
                {
                    DataTable Newdata = new DataTable();
                    try
                    {
                        if (ViewState["GridData"] != null // Make ViewState Nullable Check 24.11.2015
                                        && (!string.IsNullOrEmpty(hdnUpdateServiceId.Value) || !hdnUpdateServiceId.Value.Equals("0")))
                        {
                            Newdata = (DataTable)ViewState["GridData"];
                            if (Newdata.Rows.Count > 0)
                            {
                                Newdata.DefaultView.RowFilter = "ServiceId NOT IN (" + hdnUpdateServiceId.Value + ")";
                                gvPatientServiceDetail.DataSource = Newdata.DefaultView.ToTable();
                                gvPatientServiceDetail.DataBind();
                            }
                            object sumObject;
                            sumObject = Newdata.DefaultView.ToTable().Compute("Sum(Charges)", "");
                            // lblTotCharges.Text = common.myStr(sumObject);
                            ViewState["GridData"] = Newdata.DefaultView.ToTable();
                            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                        }


                        //  divDelete.Visible = false;
                        //Added by Rakesh start
                        //if (Request.QueryString["For"] == null)
                        //{
                        //    ShowHideAddInvestigationSpecification();
                        //}
                        //Added by Rakesh end 
                    }
                    catch (Exception Ex)
                    {
                        clsExceptionLog objException = new clsExceptionLog();
                        objException.HandleException(Ex);
                        objException = null;
                    }
                    finally
                    {
                        Newdata.Dispose();
                    }
                }
                else
                {
                    Alert.ShowAjaxMsg("Please select Service", Page);
                    return;
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }


    protected void btnUpdate_Click(object sender, EventArgs e)
    {
        try
        {

            gvPatientServiceDetail.Visible = true;
            AddOrder("M", common.myInt(cmbServiceName.SelectedValue), 0);
            Button2.Text = "Add";

            //  RadDateTimePicker1.SelectedDate = null;
            cmbServiceName.Text = "";
            cmbServiceName.Items.Clear();
            cmbServiceName.ClearSelection();
        }
        catch (Exception Ex)
        {
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    public void AddOrder(string from, int serviceId, int OrderSetId)
    {
        DataSet ds = new DataSet();
        DataTable Newdata = new DataTable();
        try
        {
            if (CheckPassdupservice(serviceId) == true && common.myInt(ViewState["Confirmed"]) == 0)
            {
                //dvConfirmPrintingOptions.Visible = true; today
                //txtindication.Focus();
                return;
            }
            //Yes, This is required as per insurance demand
            if (txtICDCode.Text == "")
            {
                //if (!common.myStr(Session["OPIP"]).ToUpper().Equals("I"))
                //{
                //    Alert.ShowAjaxMsg("Diagnosis not Available", Page);
                //    return;
                //}
            }
            //if (RadDateTimePicker1.SelectedDate != null)
            //{
            //    if (DateTime.Compare(Convert.ToDateTime(RadDateTimePicker1.SelectedDate), DateTime.Now.Date) < 0)
            //    {
            //        Alert.ShowAjaxMsg("please select correct investigation date", Page);
            //        return;
            //    }
            //}
            //EMROrders order = new EMROrders(sConString);

            string doctorid = "0";
            if (Request.QueryString["For"] != null && Request.QueryString["DoctorId"] != null)
            {
                doctorid = common.myStr(Request.QueryString["DoctorId"]);
            }
            else
            {
                doctorid = Session["EmployeeId"].ToString();
            }

            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;
            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/GetServiceDescriptionForOrderpage";
            APIRootClass.GetServiceDescriptionForOrderpage objRoot = new global::APIRootClass.GetServiceDescriptionForOrderpage();
            objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
            objRoot.EncounterId = common.myInt(Session["EncounterId"]);
            objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
            objRoot.FacilityId = common.myInt(Session["FacilityId"]);
            objRoot.ServiceId = serviceId;
            objRoot.OrderSetId = OrderSetId;
            objRoot.CompanyId = common.myInt(ViewState["CompanyCode"]);
            objRoot.SponsorId = common.myInt(ViewState["InsuranceCode"]);
            objRoot.CardId = common.myInt(ViewState["CardId"]);
            objRoot.Option = 1;
            objRoot.TemplateId = 0;

            //string strtriageID = string.Empty;


            if (from == "AIOrderList")
            {
                if (Session["AIOrderList"] != null)
                {
                    //clsReport clsReport = new clsReport(sConString);
                    //ds = clsReport.GetServiceDetail(common.myInt(Session["HospitallocationId"]), common.myInt(Session["FacilityId"]),
                    //                       common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"]), serviceId, OrderSetId,
                    //                       common.myInt(ViewState["CompanyCode"]), common.myInt(ViewState["InsuranceCode"]), common.myInt(ViewState["CardId"]), 1, 0, common.myStr(Session["AIOrderList"]));
                    objRoot.xmlServiceIds = common.myStr(Session["AIOrderList"]);
                }
            }
            else
            {
                //ds = order.GetServiceDescriptionForOrderpage(common.myInt(Session["HospitallocationId"]), common.myInt(Session["FacilityId"]),
                //                        common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"]), serviceId, OrderSetId,
                //                        common.myInt(ViewState["CompanyCode"]), common.myInt(ViewState["InsuranceCode"]), common.myInt(ViewState["CardId"]), 1, 0);
                objRoot.xmlServiceIds = string.Empty;
            }

            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);
            ds = JsonConvert.DeserializeObject<DataSet>(sValue);

            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    if (common.myStr(ViewState["GridData"]).Equals(""))
                    {
                        try
                        {
                            Newdata = (DataTable)ViewState["GridData"];
                            if (Newdata == null)
                            {
                                Newdata = CreateTableOrdersAndProcedure();
                            }
                        }
                        catch (Exception Ex)
                        {
                            clsExceptionLog objException = new clsExceptionLog();
                            objException.HandleException(Ex);
                            objException = null;
                        }
                        finally
                        {
                            if (Newdata.Rows.Count == 0 || Newdata == null)
                            {
                                Newdata = CreateTableOrdersAndProcedure();
                            }
                        }
                    }
                    else
                    {
                        Newdata = (DataTable)ViewState["GridData"];
                    }

                    foreach (DataRow data in ds.Tables[0].Rows)
                    {
                        Newdata.DefaultView.RowFilter = "serviceId=" + data["ServiceId"].ToString();
                        if (Newdata.DefaultView.Count == 0)
                        {

                            hdnServiceType.Value = data["ServiceType"].ToString();
                            hdnID.Value = cmbServiceName.SelectedValue;
                            hdnServiceId.Value = data["ServiceId"].ToString();
                            //txtCPTCode.Text = data["RefServiceCode"].ToString();
                            hdnIsUnSavedData.Value = "1";
                            hdnAlertRequired.Value = data["AlertRequired"].ToString();
                            hdnAlertMessage.Value = data["AlertMessage"].ToString();

                            DataRow Dr = null;
                            Dr = Newdata.NewRow();
                            Dr["AlertRequired"] = data["AlertRequired"].ToString();
                            Dr["AlertMessage"] = data["AlertMessage"].ToString();
                            Dr["ServiceName"] = data["ServiceName"].ToString();
                            Dr["ServiceID"] = hdnServiceId.Value;
                            Dr["ICDID"] = txtICDCode.Text;
                            Dr["DoctorId"] = doctorid;
                            Dr["FacilityId"] = common.myStr(Session["FacilityId"]);
                            Dr["ServiceType"] = hdnServiceType.Value == "" ? "12" : hdnServiceType.Value;
                            Dr["Remarks"] = "";
                            Dr["Stat"] = chkStat.Checked;
                            Dr["LabStatus"] = "Not Billed";
                            Dr["OrderId"] = 0;
                            Dr["EncodedBy"] = 0;
                            Dr["IsExcluded"] = Convert.ToBoolean(data["IsExcluded"]);
                            Dr["PlanTypeId"] = 0;
                            Dr["PackageId"] = 0;
                            Dr["CompanyId"] = 0;
                            Dr["ID"] = 0;
                            Dr["CPTCode"] = data["RefServiceCode"].ToString();
                            Dr["RequestToDepartment"] = false;
                            Dr["Charges"] = data["charges"].ToString();
                            Dr["result"] = data["result"].ToString();
                            Dr["Units"] = 1;
                            Dr["OrgCharges"] = data["charges"].ToString();
                            //if (RadDateTimePicker1.SelectedDate != null)
                            //    Dr["TestDate"] = common.myStr(RadDateTimePicker1.SelectedDate);
                            //else
                            Dr["TestDate"] = DBNull.Value;

                            StringBuilder strToothIds = new StringBuilder();
                            if (ddlGlobalToothNo.Visible)
                            {
                                if (ddlGlobalToothNo.CheckedItems.Count > 0)
                                {
                                    for (int i = 0; i < ddlGlobalToothNo.CheckedItems.Count; i++)
                                    {
                                        strToothIds.Append(ddlGlobalToothNo.CheckedItems[i].Value.ToString() + ",");
                                    }
                                }
                                else
                                {
                                    Alert.ShowAjaxMsg("Please Select Tooth No", Page);
                                    return;
                                }
                            }

                            Dr["ToothNo"] = common.myStr(strToothIds.ToString());

                            Newdata.Rows.Add(Dr);
                        }


                    }

                    GetGlobalToothNo();
                    Newdata.DefaultView.RowFilter = "";
                    //dvmain.RowFilter = "ServiceType Not in ( 'CL','VS','VF','R','RT','RF' )";
                    //ViewState["Service"] = dvmain.ToTable(); //sa
                    gvPatientServiceDetail.DataSource = Newdata;
                    gvPatientServiceDetail.DataBind();



                    //txtInstruction.Text = String.Empty;
                    // Declare an object variable. 
                    ViewState["Confirmed"] = 0;
                    object sumObject;
                    sumObject = Newdata.Compute("Sum(Charges)", "");
                    //lblTotCharges.Text = common.myStr(sumObject);
                    ViewState["GridData"] = Newdata;
                    if (common.myBool(ViewState["IsInsuranceCompany"]))
                    {
                        if (common.myInt(sumObject) > common.myInt(ViewState["CCreditLimit"]))
                        {
                            //Alert.ShowAjaxMsg("Patient Credit Limit Excessed", Page);
                        }
                    }
                }
            }
        }
        catch (Exception Ex)
        {
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            ds.Dispose();
        }
    }
    bool CheckPassdupservice(int serviceID)
    {
        DataSet datas = new DataSet();
        try
        {
            bool returnx = false;
            ////    Hashtable hshServiceDetail = new Hashtable();
            ////    hshServiceDetail = BaseBill.getSingleServiceAmount(common.myInt(Session["HospitalLocationID"]),
            ////        common.myInt(Session["FacilityId"]),
            ////        common.myInt(common.myInt(ViewState["CompanyCode"])),
            ////        common.myInt(common.myInt(ViewState["InsuranceCode"])),
            ////        common.myInt(common.myInt(ViewState["CardId"])),
            ////        common.myStr(Session["OPIP"]),
            ////        common.myInt(serviceID),
            ////        common.myInt(common.myInt(Session["RegistrationId"])),
            ////        common.myInt(common.myInt(Session["EncounterId"])), 0, 0, 0);
            //DataSet datas = new DataSet();
            //Hashtable hshInput = new Hashtable();
            //DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
            //hshInput.Add("@HospitalLocationId", common.myInt(Session["HospitalLocationId"]));
            //hshInput.Add("@FacilityId", common.myInt(Session["FacilityId"]));
            //hshInput.Add("@ServiceId", common.myInt(serviceID));
            //hshInput.Add("@EncounterId", common.myInt(Session["EncounterId"]));
            //hshInput.Add("@RegistrationId", common.myInt(Session["RegistrationId"]));
            //datas = dl.FillDataSet(CommandType.Text, "Select SD.ServiceId, I.ServiceName, Dbo.GetDoctorNameFromUID(S.EncodedBy) EnteredBy, dbo.GetDateFormatUTC(s.OrderDate,'DT', F.TimeZoneOffSetMinutes) OrderDate FROM ServiceOrderMain S with(nolock) INNER JOIN ServiceOrderDetail SD with(nolock) ON S.Id = SD.OrderId INNER JOIN ItemOfService I with(nolock) ON SD.ServiceId = I.ServiceId INNER JOIN FacilityMaster F with(nolock) ON S.FacilityId = F.FacilityID WHERE ISNULL(S.EncounterId,'') =  @EncounterId AND S.RegistrationId = @RegistrationId AND S.HospitalLocationId = @HospitalLocationId AND S.FacilityId = @FacilityId AND SD.ServiceId = @ServiceId And S.ACTIVE = 1 AND SD.ACTIVE = 1 ", hshInput);

            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;
            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/CheckDuplicateServiceOrder";
            APIRootClass.CheckDuplicateServiceOrder objPatientProblem = new global::APIRootClass.CheckDuplicateServiceOrder();
            objPatientProblem.RegistrationId = common.myInt(Session["RegistrationId"]);
            objPatientProblem.EncounterId = common.myInt(Session["EncounterId"]);
            objPatientProblem.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
            objPatientProblem.FacilityId = common.myInt(Session["FacilityId"]);
            objPatientProblem.ServiceId = serviceID;
            //string strtriageID = string.Empty;
            string inputJson = (new JavaScriptSerializer()).Serialize(objPatientProblem);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);
            datas = JsonConvert.DeserializeObject<DataSet>(sValue);

            if (datas.Tables.Count > 0)
            {
                if (datas.Tables[0].Rows.Count > 0)
                {
                    //lblServiceName.Text = common.myStr(datas.Tables[0].Rows[0]["ServiceName"]);
                    //lblEnteredBy.Text = common.myStr(datas.Tables[0].Rows[0]["EnteredBy"]);
                    //lblEnteredOn.Text = common.myStr(datas.Tables[0].Rows[0]["OrderDate"]); today
                    ViewState["DuplicateService"] = "1";
                    returnx = true;
                }
                else
                {

                    ViewState["DuplicateService"] = "0";
                    returnx = false;
                }
            }
            return returnx;
        }
        catch (Exception Ex)
        {
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
            return false;
        }
        finally
        {
            datas.Dispose();
        }
    }

    protected void lnkAddInvestigationSpecification_OnClick(object sender, EventArgs e)
    {
        DataSet ds = new DataSet();
        try
        {
            LinkButton lnkServiceName = sender as LinkButton;
            int serviceId = common.myInt(lnkServiceName.CommandArgument);

            if (serviceId == 0)
            {
                return;
            }

            if (gvPatientServiceDetail.Rows.Count > 0)
            {
                StringBuilder strXML = new StringBuilder();
                HiddenField hdnIsTemplateRequired = new HiddenField();
                hdnIsTemplateRequired.Value = string.Empty;
                HiddenField hdnServiceID = new HiddenField();
                hdnServiceID.Value = string.Empty;

                HiddenField hdnUpdateOrderDtlId = new HiddenField();

                foreach (GridViewRow row in gvPatientServiceDetail.Rows)
                {
                    hdnIsTemplateRequired = (HiddenField)row.FindControl("hdnIsTemplateRequired");
                    hdnServiceID = (HiddenField)row.FindControl("hdnServiceID");

                    //hdnUpdateOrderDtlId.Value = ((HiddenField)row.FindControl("hdnOrderDtlId")).Value;

                    if (common.myInt(hdnServiceID.Value) > 0)
                    {
                        if (hdnIsTemplateRequired.Value.Equals("1") || hdnIsTemplateRequired.Value.Equals("2"))
                        {
                            if (strXML.ToString() != "")
                            {
                                strXML.Append(",");
                            }
                            strXML.Append(common.myInt(hdnServiceID.Value));
                        }
                    }
                }
                if (strXML.ToString().Length > 0)
                {
                    RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?Source=ProcedureOrder&TemplateRequiredServices=" + common.myStr(strXML.ToString() + "&RegNo=" + common.myStr(Session["RegistrationNo"])) + "&TagType=S";
                    RadWindowForNew.Height = 500;
                    RadWindowForNew.Width = 650;
                    //RadWindowForNew.Top = 10;
                    //RadWindowForNew.Left = 10;
                    // RadWindowForNew.OnClientClose = "OnClientClose";
                    RadWindowForNew.Title = "Request Form";
                    RadWindowForNew.Modal = true;
                    RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code    
                    RadWindowForNew.VisibleStatusbar = false;
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            ds.Dispose();
        }
    }

    protected void lnkServiceName_OnClick(object sender, EventArgs e)
    {
        DataSet ds = new DataSet();
        try
        {
            LinkButton lnkServiceName = sender as LinkButton;
            string sServiceId = lnkServiceName.CommandArgument;
            //BaseC.clsPharmacy bC = new BaseC.clsPharmacy(sConString);

            if (sServiceId == "0" || sServiceId == "")
                return;

            //ds = bC.GetPatientDetails(common.myInt(Session["HospitalLocationID"]), common.myInt(Session["RegistrationID"]),
            //    "", "", "");


            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;
            string ServiceURL = WebAPIAddress.ToString() + "api/BillingAPI/SearchPatient";
            APIRootClass.SearchPatient objRoot = new global::APIRootClass.SearchPatient();
            objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
            objRoot.RegistrationId = common.myInt(Session["RegistrationID"]);
            objRoot.RegistrationNo = "";
            objRoot.EncounterNo = "";
            objRoot.PatienType = "";
            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);
            ds = JsonConvert.DeserializeObject<DataSet>(sValue);


            if (ds.Tables[0].Rows.Count > 0)
            {
                RadWindowForNew.NavigateUrl = "~/EMR/Orders/ServiceProfile.aspx?ServiceID=" + sServiceId
                    + "&Age=" + common.myStr(ds.Tables[0].Rows[0]["Age"]) + "&Gender=" + common.myStr(ds.Tables[0].Rows[0]["PatientGender"])
                    + "&AgeType=" + common.myStr(ds.Tables[0].Rows[0]["AgeType"]);
                RadWindowForNew.Height = 500;
                RadWindowForNew.Width = 650;
                //RadWindowForNew.Top = 10;
                //RadWindowForNew.Left = 10;
                RadWindowForNew.VisibleOnPageLoad = true;
                RadWindowForNew.Modal = true;
                RadWindowForNew.VisibleStatusbar = false;
            }
        }
        catch (Exception Ex)
        {
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            ds.Dispose();
        }
    }
    private void BindICDPanel()
    {
        DataSet dsTemp = new DataSet();
        DataTable dt = new DataTable();
        try
        {
            if (ViewState["ICDCodes"] != null)
            {
                if (txtICDCode.Text.ToString().Trim().Length == 0)
                {
                    if (hdnExitOrNot.Value == "0")
                    {
                        hdnICDCode.Value = Convert.ToString(ViewState["ICDCod"]);
                        txtICDCode.Text = Convert.ToString(ViewState["ICDCod"]);
                    }
                }

                dt.Columns.Add("ID");
                dt.Columns.Add("ICDCodes");
                dt.Columns.Add("Description");
                dt.Columns["ID"].AutoIncrement = true;
                dt.Columns["ID"].AutoIncrementSeed = 1;
                dt.Columns["ID"].AutoIncrementStep = 1;

                char[] chArray = { ',' };
                string[] serviceIdXml = ViewState["ICDCodes"].ToString().Split(chArray);
                //DAL.DAL objSave = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
                foreach (string item in serviceIdXml)
                {
                    DataRow drdt = dt.NewRow();
                    //order = new BaseC.EMROrders(sConString);
                    //dsTemp = order.GetICDCode(item.ToString());

                    WebClient client = new WebClient();
                    client.Headers["Content-type"] = "application/json";
                    client.Encoding = Encoding.UTF8;
                    string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/GetDiscriptionandICDID";
                    APIRootClass.GetDiscriptionandICDID objRoot = new global::APIRootClass.GetDiscriptionandICDID();
                    objRoot.IcdCode = item.ToString();


                    string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                    string sValue = client.UploadString(ServiceURL, inputJson);
                    sValue = JsonConvert.DeserializeObject<string>(sValue);
                    dsTemp = JsonConvert.DeserializeObject<DataSet>(sValue);

                    if (dsTemp.Tables.Count > 0)
                    {
                        if (dsTemp.Tables[0].Rows.Count > 0)
                        {
                            drdt["ICDCodes"] = item.ToString();
                            drdt["Description"] = dsTemp.Tables[0].Rows[0]["Description"].ToString();
                            dt.Rows.Add(drdt);
                        }
                    }
                }
                if (dt.Rows.Count > 0)
                {
                    txtICDCode.Text = dt.Rows[0]["ICDCodes"].ToString();
                }
            }
            else
            {
                txtICDCode.ReadOnly = true;
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            dsTemp.Dispose();
            dt.Dispose();
        }


    }
    private void BindBlnkGrid()
    {
        DataTable dT = new DataTable();
        try
        {
            dT = CreateTableOrdersAndProcedure();
            DataRow dr;
            dr = dT.NewRow();
            dr[1] = DBNull.Value;
            dr[2] = DBNull.Value;
            dr[3] = DBNull.Value;
            dr[4] = DBNull.Value;
            dr[5] = DBNull.Value;
            dr[6] = DBNull.Value;
            dr[7] = DBNull.Value;
            dr[8] = DBNull.Value;
            dr[9] = DBNull.Value;
            dr[10] = DBNull.Value;
            dr[11] = DBNull.Value;
            dr[12] = DBNull.Value;
            dr[13] = DBNull.Value;
            dr[14] = DBNull.Value;
            dr[15] = DBNull.Value;
            dr[16] = DBNull.Value;
            dT.Rows.Add(dr);
            gvPatientServiceDetail.DataSource = dT;
            gvPatientServiceDetail.DataBind();

            gvPatientServiceDetail.Visible = false;

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            dT.Dispose();
        }
    }
    protected void btnOnScreen_Click(object sender, EventArgs e)
    {
        if (onscreen.Visible == true)
        {
            onscreen.Visible = false;
            //  viewscreen.Visible = true;
            btnOnScreen.Text = "ON";
            //Session["OnScreen"] = "Off";
            // hdnOnScreen.Value = "Off";
            btnOnScreen.BackColor = System.Drawing.Color.Orange;
        }
        else
        {
            // viewscreen.Visible = false;
            onscreen.Visible = true;
            btnOnScreen.Text = "OFF";
            btnOnScreen.Text = "OFF";
            btnOnScreen.BackColor = System.Drawing.Color.Gray;
        }

    }
    protected void lnkCloseVital_Click(object sender, EventArgs e)
    {
        VitalValue.Visible = false;
    }
    protected void txtLDist_TextChanged(object sender, EventArgs e)
    {

    }
    protected void GetOphthalmologyVitals()
    {
        DataSet ds;
        DataTable dt;
        DataView dvReyes;
        DataView dvLeyes;
        try
        {

            DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
            Hashtable hshIn = new Hashtable();
            hshIn.Add("@Encounterid", common.myInt(Session["EncounterId"]));
            hshIn.Add("@Registrationid", common.myInt(Session["RegistrationID"]));
            hshIn.Add("@Facilityid", common.myInt(Session["Facilityid"]));
            ds = dl.FillDataSet(CommandType.StoredProcedure, "USP_Opthal_getPatientVital", hshIn);

            dt = ds.Tables[0];
            dvReyes = new DataView(dt.Copy());
            dvLeyes = new DataView(dt.Copy());
            dvReyes.RowFilter = "VP='RE'";
            dvLeyes.RowFilter = "VP='LE'";
            if (dvReyes.Count > 0)
            {
                hdnReye.Value = common.myStr(dvReyes.ToTable().Rows[0]["Id"]);
                txtRDist.Text = common.myStr(dvReyes.ToTable().Rows[0]["Dist"]);
                txtRNear.Text = common.myStr(dvReyes.ToTable().Rows[0]["Near"]);
                txtRWOD.Text = common.myStr(dvReyes.ToTable().Rows[0]["W_OD"]);
                txtRWON.Text = common.myStr(dvReyes.ToTable().Rows[0]["W_ON"]);
                txtRPIN.Text = common.myStr(dvReyes.ToTable().Rows[0]["PIN"]);
                txtRIOP.Text = common.myStr(dvReyes.ToTable().Rows[0]["IOP"]);
            }
            if (dvLeyes.Count > 0)
            {
                hdnLeye.Value = common.myStr(dvLeyes.ToTable().Rows[0]["Id"]);
                txtLDist.Text = common.myStr(dvLeyes.ToTable().Rows[0]["Dist"]);
                txtLNear.Text = common.myStr(dvLeyes.ToTable().Rows[0]["Near"]);
                txtLWOD.Text = common.myStr(dvLeyes.ToTable().Rows[0]["W_OD"]);
                txtLWON.Text = common.myStr(dvLeyes.ToTable().Rows[0]["W_ON"]);
                txtLPIN.Text = common.myStr(dvLeyes.ToTable().Rows[0]["PIN"]);
                txtLIOP.Text = common.myStr(dvLeyes.ToTable().Rows[0]["IOP"]);
            }

            dt = ds.Tables[1];
            DataView dvRE = new DataView(dt.Copy());
            dvRE.RowFilter = "Header='AR'";

            if (dvRE.Count > 0)
            {
                GridViewAutoRefractometer.DataSource = dvRE;
                GridViewAutoRefractometer.DataBind();
            }
            else
            {
                GridViewAutoRefractometer.DataSource = null;
                GridViewAutoRefractometer.DataBind();
            }

            DataView dvGE = new DataView(dt.Copy());
            dvGE.RowFilter = "Header NOT IN('AR')";

            if (dvGE.Count > 0)
            {
                GridViewGlass.DataSource = dvGE;
                GridViewGlass.DataBind();
            }
            else
            {
                GridViewGlass.DataSource = null;
                GridViewGlass.DataBind();
            }




        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            ds = null;
        }


    }
    protected void ImgAddVitalValue_Click(object sender, ImageClickEventArgs e)
    {
        VitalValue.Visible = true;

        DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
        DataSet ds = dl.FillDataSet(CommandType.StoredProcedure, "UspgetVitalMaster");

        GridVitalValue.DataSource = ds;
        GridVitalValue.DataBind();
    }

    protected void GridVitalValue_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName.Equals("Vision_D"))
        {
            GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
            string lnk = common.myStr(((LinkButton)row.FindControl("lnk")).Text);
            if (txtRDist.Text == "") { txtRDist.Text = lnk; }
            else if (txtRDist.Text != "" && txtLDist.Text == "") { txtLDist.Text = lnk; }
            else if (txtRWOD.Text == "") { txtRWOD.Text = lnk; } else { txtLWOD.Text = lnk; }
            return;
            //string s =  Session["UserName"].ToString();
        }
        if (e.CommandName.Equals("Vision_DP"))
        {
            GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
            string lnk1 = common.myStr(((LinkButton)row.FindControl("lnk1")).Text);
            if (txtRDist.Text == "") { txtRDist.Text = lnk1; }
            else if (txtRDist.Text != "" && txtLDist.Text == "") { txtLDist.Text = lnk1; }
            else if (txtRWOD.Text == "") { txtRWOD.Text = lnk1; } else { txtLWOD.Text = lnk1; }
            return;
        }
        if (e.CommandName.Equals("Vision_N"))
        {
            GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
            string lnk2 = common.myStr(((LinkButton)row.FindControl("lnk2")).Text);

            //  if (txtRNear.Text == "") { txtRNear.Text = lnk2; } else { txtLNear.Text = lnk2; }

            if (txtRNear.Text == "") { txtRNear.Text = lnk2; }
            else if (txtRNear.Text != "" && txtLNear.Text == "") { txtLNear.Text = lnk2; }
            else if (txtRWON.Text == "") { txtRWON.Text = lnk2; } else { txtLWON.Text = lnk2; }
            return;
        }
        if (e.CommandName.Equals("Vision_NP"))
        {
            GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
            string lnk3 = common.myStr(((LinkButton)row.FindControl("lnk3")).Text);
            //  if (txtLNear.Text != "") { txtLNear.Text = lnk3; } else { txtRNear.Text = lnk3; }

            if (txtRNear.Text == "") { txtRNear.Text = lnk3; }
            else if (txtRNear.Text != "" && txtLNear.Text == "") { txtLNear.Text = lnk3; }
            else if (txtRWON.Text == "") { txtRWON.Text = lnk3; } else { txtLWON.Text = lnk3; }
            return;
        }
    }

    protected void ImgSaveVital_Click(object sender, ImageClickEventArgs e)
    {
        StringBuilder strXMLChecklist = new StringBuilder();
        ArrayList colChecklist = new ArrayList();
        Hashtable hshIn = new Hashtable();
        Hashtable hshOut = new Hashtable();
        // Right Eyes
        colChecklist.Add(common.myStr("RE")); //1
        colChecklist.Add(common.myStr(txtRDist.Text));//2
        colChecklist.Add(common.myStr(txtRNear.Text));//3
        colChecklist.Add(common.myStr(txtRWOD.Text));//4
        colChecklist.Add(common.myStr(txtRWON.Text));//5
        colChecklist.Add(common.myStr(txtRPIN.Text));//6
        colChecklist.Add(common.myStr(txtRIOP.Text));//7
        if (common.myInt(hdnReye.Value) == 0) { colChecklist.Add(common.myInt(0)); } else { colChecklist.Add(common.myInt(hdnReye.Value)); };//8

        strXMLChecklist.Append(common.setXmlTable(ref colChecklist));
        // Left Eyes
        colChecklist.Add(common.myStr("LE")); //1
        colChecklist.Add(common.myStr(txtLDist.Text));//2
        colChecklist.Add(common.myStr(txtLNear.Text));//3
        colChecklist.Add(common.myStr(txtLWOD.Text));//4
        colChecklist.Add(common.myStr(txtLWON.Text));//5
        colChecklist.Add(common.myStr(txtLPIN.Text));//6
        colChecklist.Add(common.myStr(txtLIOP.Text));//7    
        if (common.myInt(hdnLeye.Value) == 0) { colChecklist.Add(common.myInt(0)); } else { colChecklist.Add(common.myInt(hdnLeye.Value)); };//8
        strXMLChecklist.Append(common.setXmlTable(ref colChecklist));


        DAL.DAL dL = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
        hshIn.Add("@Encounterid", common.myInt(Session["EncounterId"]));
        hshIn.Add("@Registrationid", common.myInt(Session["RegistrationID"]));
        hshIn.Add("@Facilityid", common.myInt(Session["Facilityid"]));
        hshIn.Add("@Encodedby", common.myStr(Session["UserId"]));
        hshIn.Add("@Vital", common.myStr(strXMLChecklist));
        hshOut.Add("@chvErrorStatus", SqlDbType.VarChar);
        hshOut = dL.getOutputParametersValues(CommandType.StoredProcedure, "USP_Opthal_Save_Vital", hshIn, hshOut);
        Alert.ShowAjaxMsg(hshOut["@chvErrorStatus"].ToString(), Page);
    }

    protected void TemplateSetting()
    {
        trOpticals.Visible = false;
        trChiefComplaints.Visible = false;
        trAllergies.Visible = false;
        trVitals.Visible = false;
        trHistory.Visible = false;
        trExamination.Visible = false;
        trPlanOfCare.Visible = false;
        trOtherNotes.Visible = false;
        trProvisionalDiagnosis.Visible = false;
        trOrdersAndProcedures.Visible = false;
        trPrescriptions.Visible = false;
        divDiagnosisDetails.Visible = false;
        trPACTemplates.Visible = false;
        trOTRequest.Visible = false;
        trFollowup.Visible = false;
        trRemarks.Visible = false;
        /* New Templates*/
        trImmunisationHistory.Visible = false;
        trPastHistory.Visible = false;
        trPreviousTreatment.Visible = false;
        trNutritionalStatus.Visible = false;
        trCostAnalysis.Visible = false;
        trNonDrugOrder.Visible = false;
        trPatientFamilyEducationCounseling.Visible = false;
        trReferralsReplyToReferrals.Visible = false;
        trAnaesthesiaCriticalCareNotes.Visible = false;
        trMultidisciplinaryEvaluationPlanOfCare.Visible = false;
        trFreeText.Visible = false;  //Ritika(12-09-2022)FreeText
        //trTreatment.Visible = false;
        //trRemark.Visible = false;
        //trLabResult.Visible = false;
        Hashtable hshIn = new Hashtable();
        DAL.DAL dL = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
        hshIn.Add("@Facilityid", common.myInt(Session["Facilityid"]));
        hshIn.Add("@UserId", common.myStr(Session["UserId"]));
        DataSet ds1 = dL.FillDataSet(CommandType.StoredProcedure, "USP_EmrTemplate_Setting", hshIn);
        if (common.myBool(ds1.Tables[0].Rows[0]["ExpandAll"]) == true)
        {
            DataSet dsSpec = new DataSet();
            DataSet ds = new DataSet();
            try
            {


                if (common.myInt(Session["FacilityId"]) > 0)
                {
                    string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/getSingleScreenUserTemplates";
                    APIRootClass.getSingleScreenUserTemplates objRoot = new global::APIRootClass.getSingleScreenUserTemplates();
                    objRoot.SpecialisationId = 0;
                    objRoot.FacilityId = common.myInt(Session["FacilityId"]);
                    objRoot.DoctorId = common.myInt(Session["EmployeeId"]);


                    WebClient client = new WebClient();
                    client.Headers["Content-type"] = "application/json";
                    client.Encoding = Encoding.UTF8;

                    string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                    string sValue = client.UploadString(ServiceURL, inputJson);
                    sValue = JsonConvert.DeserializeObject<string>(sValue);
                    ds = JsonConvert.DeserializeObject<DataSet>(sValue);

                    //ds = objI.getSingleScreenUserTemplates(0, common.myInt(Session["FacilityId"]), common.myInt(Session["EmployeeId"]));
                    ViewState["dsgetSingleScreenUserTemplates"] = ds;
                    if (ds != null && ds.Tables.Count > 0)
                    {
                        if (ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
                        {
                            for (int rowIdx = 0; rowIdx < ds.Tables[0].Rows.Count; rowIdx++)
                            {
                                DataRow DR = ds.Tables[0].Rows[rowIdx];
                                switch (common.myStr(DR["TemplateCode"]).Trim())
                                {
                                    //case "TG"://Treatment Given
                                    //    trTreatment.Visible = true;
                                    //    spnTreatmentGivenStar.Visible = common.myBool(DR["IsMandatory"]);
                                    //    if (common.myBool(DR["IsCollapse"]))
                                    //    {
                                    //        pnlTreatmentGiven.Visible = false;
                                    //        imgTreatmentGiven.ImageUrl = "~/Images/plus-icon.svg";
                                    //    }
                                    //    break;
                                    //case "IN"://Remarks
                                    //    trRemark.Visible = true;
                                    //    spnInstructionsStar.Visible = common.myBool(DR["IsMandatory"]);
                                    //    if (common.myBool(DR["IsCollapse"]))
                                    //    {
                                    //        pnlInstructions.Visible = false;
                                    //        imgInstructions.ImageUrl = "~/Images/plus-icon.svg";
                                    //    }
                                    //    break;
                                    case "OVT"://Chief Complaints
                                        trOpticals.Visible = true;
                                        //spnChiefComplaintsStar.Visible = common.myBool(DR["IsMandatory"]);

                                        OpticalsPanel.Visible = true;
                                        ImageOPt1.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "COM"://Chief Complaints
                                        trChiefComplaints.Visible = true;
                                        spnChiefComplaintsStar.Visible = common.myBool(DR["IsMandatory"]);

                                        pnlChiefComplaints.Visible = true;
                                        imgbtnChiefComplaints.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "ALG"://Allergies
                                        trAllergies.Visible = true;
                                        spnAllergiesStar.Visible = common.myBool(DR["IsMandatory"]);

                                        Panel2.Visible = false;
                                        tblAllergiesDetail.Visible = false;
                                        ImageButton3.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "IMH"://Immunisation History
                                        trImmunisationHistory.Visible = false;
                                        //spnImmunisationHistory.Visible = common.myBool(DR["IsMandatory"]);
                                        break;


                                    case "VTL"://Vitals
                                        trVitals.Visible = true;
                                        spnVitalsStar.Visible = common.myBool(DR["IsMandatory"]);

                                        pnlVitals.Visible = true;
                                        imgVbtnVital.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "HIS"://History
                                        trHistory.Visible = true;
                                        spnHistoryStar.Visible = common.myBool(DR["IsMandatory"]);
                                        pnlHistory.Visible = true;
                                        imbtnHistory.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "PRT"://Previous Treatment
                                        trPreviousTreatment.Visible = true;
                                        spnPreviousTreatment.Visible = common.myBool(DR["IsMandatory"]);
                                        Panel3.Visible = true;
                                        Panel3.Visible = true;
                                        ImageButton2.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "EXM"://Examination
                                        trExamination.Visible = true;
                                        spnExaminationStar.Visible = common.myBool(DR["IsMandatory"]);

                                        Panel10.Visible = true;
                                        imgbtnTemplate.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "NTS"://Nutritional Status
                                        trNutritionalStatus.Visible = false;
                                        spnNutritionalStatus.Visible = common.myBool(DR["IsMandatory"]);
                                        Panel6.Visible = true;

                                        Panel6.Visible = true;
                                        imgbtnTemplate.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "POC"://Plan Of Care
                                        trPlanOfCare.Visible = true;
                                        spnPlanOfCareStar.Visible = common.myBool(DR["IsMandatory"]);

                                        Panel13.Visible = true;
                                        ImageButton4.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "COA"://Cost Analysis
                                        trCostAnalysis.Visible = false;
                                        spnCostAnalysis.Visible = common.myBool(DR["IsMandatory"]);
                                        Panel14.Visible = true;

                                        Panel14.Visible = true;
                                        ImageButton4.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "OTN"://Other Notes
                                        trOtherNotes.Visible = true;

                                        pnlOtherNotes.Visible = true;
                                        imgbtntherNotes.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "PDG"://Provisional Diagnosis
                                        trProvisionalDiagnosis.Visible = true;
                                        spnProvisionalDiagnosisStar.Visible = common.myBool(DR["IsMandatory"]);
                                        //pnlProvisionalDiagnosis.Visible = true;

                                        pnlProvisionalDiagnosis.Visible = true;
                                        imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "ORD"://Orders And Procedures
                                        trOrdersAndProcedures.Visible = true;

                                        pnlOrderProcedures.Visible = true;
                                        gvOrdersAndProcedures.Visible = true;
                                        imgbtnOrdersAndProcedures.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "PRS"://Prescriptions
                                        trPrescriptions.Visible = true;
                                        pnlPrescription.Visible = true;
                                        gvPrescriptions.Visible = true;
                                        imgbtnPrescription.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "NDO"://Non Drug Order
                                        trNonDrugOrder.Visible = true;
                                        Panel20.Visible = true;
                                        spnNonDrugOrder.Visible = common.myBool(DR["IsMandatory"]);

                                        Panel20.Visible = true;
                                        imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "ATM"://Attach Documents
                                               ////trAttachDocuments.Visible = true;
                                        break;
                                    case "PFE"://Patient and family education and counseling
                                        trPatientFamilyEducationCounseling.Visible = true;

                                        break;
                                    case "RRR"://Referrals and Reply to referrals
                                        trReferralsReplyToReferrals.Visible = true;
                                        break;
                                    case "ACN"://Anaesthesia and Critical care notes
                                        trAnaesthesiaCriticalCareNotes.Visible = true;
                                        break;
                                    case "MEP"://Multidisciplinary evaluation and plan of care
                                        trMultidisciplinaryEvaluationPlanOfCare.Visible = true;
                                        break;
                                    case "DGN"://Diagnosis
                                        divDiagnosisDetails.Visible = true;
                                        // pnlDiagnosis.Visible = true;
                                        pnlDiagnosis.Visible = true;
                                        ImageButton13.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "PH"://Past History
                                        trPastHistory.Visible = true;
                                        // Panel23.Visible = true;
                                        spnPastHistory.Visible = common.myBool(DR["IsMandatory"]);
                                        Panel23.Visible = true;
                                        imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/minus-icon.svg";
                                        ImageButton14.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "PCN"://PAC Notes
                                        trPACTemplates.Visible = true;
                                        //pnlPACTemplates.Visible = true;

                                        pnlPACTemplates.Visible = false;
                                        imgpnlPACTemplates.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "OTR"://OT Request
                                        trOTRequest.Visible = true;
                                        pnlOTRequest.Visible = true;
                                        imgExpndOTRequest.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "IN"://OT Request
                                        trRemarks.Visible = true;
                                        PanelRemarks.Visible = true;
                                        ImageButtonRemarks.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "UP"://OT Request
                                        trFollowup.Visible = true;
                                        PanelFollowup.Visible = true;
                                        ImageButtonFollowup.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "MDFT":  //Ritika(12-09-2022) FreeText
                                        trFreeText.Visible = true;
                                        PanelFreeText.Visible = true;
                                        ImageButtonFreeText.ImageUrl = "~/Images/minus-icon.svg";
                                        break;

                                }
                            }
                            if (ds.Tables.Count > 1)
                            {
                                DataView dv = ds.Tables[1].DefaultView;
                                dv.RowFilter = "GroupName = 'Anesthesia and critical care'";
                                if (dv.ToTable().Rows.Count > 0)
                                    hdnAnesthesiaAndCriticalCareGroupId.Value = dv.ToTable().Rows[0]["GroupId"].ToString();
                                dv = ds.Tables[1].DefaultView;
                                dv.RowFilter = "GroupName = 'PAC Notes'";
                                hdnPACNotesGroupId.Value = dv.ToTable().Rows[0]["GroupId"].ToString();
                            }
                        }
                        else
                        {
                            btnSave.Visible = false;
                        }
                    }
                }
            }
            catch (Exception Ex)
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblMessage.Text = "Error: " + Ex.Message;
                clsExceptionLog objException = new clsExceptionLog();
                objException.HandleException(Ex);
                objException = null;
            }

            ViewState["ExpandAllStatus"] = true;
            lbtnExpand.ImageUrl = "~/Images/minus-icon.svg";
            checkAll.Checked = true;
            checkCustomize.Checked = false;

        }
        else if (common.myBool(ds1.Tables[0].Rows[0]["Customize"]) == true)
        {
            setTabVisibility();
            lbtnExpand.ImageUrl = "~/Images/plus-icon.svg";
            checkAll.Checked = false;
            checkCustomize.Checked = true;
        }
        else
        {
            checkAll.Checked = false;
            checkCustomize.Checked = false;

            DataSet dsSpec = new DataSet();
            DataSet ds = new DataSet();
            try
            {


                if (common.myInt(Session["FacilityId"]) > 0)
                {
                    string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/getSingleScreenUserTemplates";
                    APIRootClass.getSingleScreenUserTemplates objRoot = new global::APIRootClass.getSingleScreenUserTemplates();
                    objRoot.SpecialisationId = common.myInt(Session["UserSpecialisationId"]);
                    objRoot.FacilityId = common.myInt(Session["FacilityId"]);
                    objRoot.DoctorId = common.myInt(Session["EmployeeId"]);
                    WebClient client = new WebClient();
                    client.Headers["Content-type"] = "application/json";
                    client.Encoding = Encoding.UTF8;
                    string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                    string sValue = client.UploadString(ServiceURL, inputJson);
                    sValue = JsonConvert.DeserializeObject<string>(sValue);
                    ds = JsonConvert.DeserializeObject<DataSet>(sValue);

                    //ds = objI.getSingleScreenUserTemplates(0, common.myInt(Session["FacilityId"]), common.myInt(Session["EmployeeId"]));
                    ViewState["dsgetSingleScreenUserTemplates"] = ds;
                    if (ds != null && ds.Tables.Count > 0)
                    {
                        if (ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
                        {
                            for (int rowIdx = 0; rowIdx < ds.Tables[0].Rows.Count; rowIdx++)
                            {
                                DataRow DR = ds.Tables[0].Rows[rowIdx];
                                switch (common.myStr(DR["TemplateCode"]))
                                {
                                    //case "TG"://Treatment Given
                                    //    trTreatment.Visible = true;
                                    //    spnTreatmentGivenStar.Visible = common.myBool(DR["IsMandatory"]);
                                    //    if (common.myBool(DR["IsCollapse"]))
                                    //    {
                                    //        pnlTreatmentGiven.Visible = false;
                                    //        imgTreatmentGiven.ImageUrl = "~/Images/plus-icon.svg";
                                    //    }
                                    //    break;
                                    //case "IN"://Remarks
                                    //    trRemark.Visible = true;
                                    //    spnInstructionsStar.Visible = common.myBool(DR["IsMandatory"]);
                                    //    if (common.myBool(DR["IsCollapse"]))
                                    //    {
                                    //        pnlInstructions.Visible = false;
                                    //        imgInstructions.ImageUrl = "~/Images/plus-icon.svg";
                                    //    }
                                    //    break;
                                    case "OVT"://Chief Complaints
                                        trOpticals.Visible = true;
                                        //spnChiefComplaintsStar.Visible = common.myBool(DR["IsMandatory"]);

                                        OpticalsPanel.Visible = false;
                                        ImageOPt1.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "COM"://Chief Complaints
                                        trChiefComplaints.Visible = true;
                                        spnChiefComplaintsStar.Visible = common.myBool(DR["IsMandatory"]);

                                        pnlChiefComplaints.Visible = false;
                                        imgbtnChiefComplaints.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "ALG"://Allergies
                                        trAllergies.Visible = true;
                                        spnAllergiesStar.Visible = common.myBool(DR["IsMandatory"]);

                                        Panel2.Visible = false;
                                        tblAllergiesDetail.Visible = false;
                                        ImageButton3.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "IMH"://Immunisation History
                                        trImmunisationHistory.Visible = false;
                                        //spnImmunisationHistory.Visible = common.myBool(DR["IsMandatory"]);
                                        break;


                                    case "VTL"://Vitals
                                        trVitals.Visible = true;
                                        spnVitalsStar.Visible = common.myBool(DR["IsMandatory"]);

                                        pnlVitals.Visible = true;
                                        imgVbtnVital.ImageUrl = "~/Images/minus-icon.svg";

                                        break;
                                    case "HIS"://History
                                        trHistory.Visible = true;
                                        spnHistoryStar.Visible = common.myBool(DR["IsMandatory"]);
                                        pnlHistory.Visible = false;
                                        imbtnHistory.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "PRT"://Previous Treatment
                                        trPreviousTreatment.Visible = true;
                                        spnPreviousTreatment.Visible = common.myBool(DR["IsMandatory"]);
                                        Panel3.Visible = false;
                                        ImageButton2.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "EXM"://Examination
                                        trExamination.Visible = true;
                                        spnExaminationStar.Visible = common.myBool(DR["IsMandatory"]);

                                        Panel10.Visible = false;
                                        imgbtnTemplate.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "NTS"://Nutritional Status
                                        trNutritionalStatus.Visible = false;
                                        spnNutritionalStatus.Visible = common.myBool(DR["IsMandatory"]);
                                        Panel6.Visible = false;
                                        imgbtnTemplate.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "POC"://Plan Of Care
                                        trPlanOfCare.Visible = true;
                                        spnPlanOfCareStar.Visible = common.myBool(DR["IsMandatory"]);

                                        Panel13.Visible = false;
                                        ImageButton4.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "COA"://Cost Analysis
                                        trCostAnalysis.Visible = false;
                                        spnCostAnalysis.Visible = common.myBool(DR["IsMandatory"]);
                                        Panel14.Visible = false;
                                        ImageButton4.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "OTN"://Other Notes
                                        trOtherNotes.Visible = true;

                                        pnlOtherNotes.Visible = false;
                                        imgbtntherNotes.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "PDG"://Provisional Diagnosis
                                        trProvisionalDiagnosis.Visible = true;
                                        spnProvisionalDiagnosisStar.Visible = common.myBool(DR["IsMandatory"]);
                                        //pnlProvisionalDiagnosis.Visible = true;

                                        pnlProvisionalDiagnosis.Visible = false;
                                        imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "ORD"://Orders And Procedures
                                        trOrdersAndProcedures.Visible = true;
                                        SpanOrdersAndProceduresStar.Visible = common.myBool(DR["IsMandatory"]);
                                        pnlOrderProcedures.Visible = false;
                                        //gvOrdersAndProcedures.Visible = false;
                                        imgbtnOrdersAndProcedures.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "PRS"://Prescriptions
                                        trPrescriptions.Visible = true;
                                        pnlPrescription.Visible = false;
                                        // gvPrescriptions.Visible = false;bhakti
                                        imgbtnPrescription.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "NDO"://Non Drug Order
                                        trNonDrugOrder.Visible = true;
                                        spnNonDrugOrder.Visible = common.myBool(DR["IsMandatory"]);

                                        Panel20.Visible = false;
                                        imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "ATM"://Attach Documents
                                               ////trAttachDocuments.Visible = true;
                                        break;
                                    case "PFE"://Patient and family education and counseling
                                        trPatientFamilyEducationCounseling.Visible = true;

                                        break;
                                    case "RRR"://Referrals and Reply to referrals
                                        trReferralsReplyToReferrals.Visible = true;
                                        break;
                                    case "ACN"://Anaesthesia and Critical care notes
                                        trAnaesthesiaCriticalCareNotes.Visible = true;
                                        break;
                                    case "MEP"://Multidisciplinary evaluation and plan of care
                                        trMultidisciplinaryEvaluationPlanOfCare.Visible = true;
                                        break;
                                    case "DGN"://Diagnosis
                                        divDiagnosisDetails.Visible = true;
                                        // pnlDiagnosis.Visible = true;

                                        pnlDiagnosis.Visible = false;
                                        ImageButton13.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "PH"://Past History
                                        trPastHistory.Visible = true;
                                        // Panel23.Visible = true;
                                        spnPastHistory.Visible = common.myBool(DR["IsMandatory"]);
                                        Panel23.Visible = false;
                                        imgbtnProvisionalDiagnosies.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    //case "LAB"://LAB
                                    //    trLabResult.Visible = true;
                                    //    break;
                                    case "PCN"://PAC Notes
                                        trPACTemplates.Visible = true;
                                        pnlPACTemplates.Visible = false;

                                        //  pnlPACTemplates.Visible = false;
                                        imgpnlPACTemplates.ImageUrl = "~/Images/plus-icon.svg";
                                        break;
                                    case "OTR"://OT Request
                                        trOTRequest.Visible = true;
                                        pnlOTRequest.Visible = false;
                                        imgExpndOTRequest.ImageUrl = "~/Images/plus-icon.svg";

                                        break;

                                    case "IN"://OT Request
                                        trRemarks.Visible = true;
                                        PanelRemarks.Visible = false;
                                        ImageButtonRemarks.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "UP"://OT Request
                                        trFollowup.Visible = true;
                                        PanelFollowup.Visible = false;
                                        ImageButtonFollowup.ImageUrl = "~/Images/plus-icon.svg";

                                        break;
                                    case "MDFT":  //Ritika(12-09-2022) FreeText
                                        trFreeText.Visible = true;
                                        PanelFreeText.Visible = true;
                                        ImageButtonFreeText.ImageUrl = "~/Images/minus-icon.svg";
                                        break;
                                }
                            }
                            if (ds.Tables.Count > 1)
                            {
                                DataView dv = ds.Tables[1].DefaultView;
                                dv.RowFilter = "GroupName = 'Anesthesia and critical care'";
                                if (dv.ToTable().Rows.Count > 0)
                                    hdnAnesthesiaAndCriticalCareGroupId.Value = dv.ToTable().Rows[0]["GroupId"].ToString();
                                dv = ds.Tables[1].DefaultView;
                                dv.RowFilter = "GroupName = 'PAC Notes'";
                                hdnPACNotesGroupId.Value = dv.ToTable().Rows[0]["GroupId"].ToString();
                            }
                        }
                        else
                        {
                            btnSave.Visible = false;
                        }
                    }
                }
            }
            catch (Exception Ex)
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblMessage.Text = "Error: " + Ex.Message;
                clsExceptionLog objException = new clsExceptionLog();
                objException.HandleException(Ex);
                objException = null;
            }
        }

    }
    protected void ImageBtnEyesVital_Click1(object sender, EventArgs e)
    {
        try
        {
            GetOphthalmologyVitals();
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    protected void GridVitalValue_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        //    DataTable dt = new DataTable();
        //    dt.Columns.AddRange(new DataColumn[4] { new DataColumn("Vision_D"), new DataColumn("Vision_DP"), new DataColumn("Vision_N"), new DataColumn("Vision_NP") });

        //    GridViewRow row = new GridViewRow(0, 0, DataControlRowType.Header, DataControlRowState.Normal);
        //    TableHeaderCell cell = new TableHeaderCell();
        //    cell.Text = "Customers";
        //    cell.ColumnSpan = 2;
        //    row.Controls.Add(cell);

        //    cell = new TableHeaderCell();
        //    cell.ColumnSpan = 2;
        //    cell.Text = "Employees";
        //    row.Controls.Add(cell);


        //    GridVitalValue.HeaderRow.Parent.Controls.AddAt(0, row);
    }

    protected void checkAll_CheckedChanged(object sender, EventArgs e)
    {
        Hashtable hshIn = new Hashtable();
        DAL.DAL dL = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
        hshIn.Add("@FacilityId", common.myInt(Session["FacilityId"]));
        hshIn.Add("@UserId", common.myInt(Session["UserId"]));
        if (checkAll.Checked == true)
        {
            hshIn.Add("@CheckAll", common.myInt(1));
            checkCustomize.Checked = false;
        }
        else
        {
            hshIn.Add("@CheckAll", common.myInt(0));
            lbtnExpand.ImageUrl = "~/Images/plus-icon.svg";
        }
        hshIn.Add("@Customize", common.myStr(0));
        // hshIn.Add("@Vital", common.myStr(strXMLChecklist));
        // hshOut.Add("@chvErrorStatus", SqlDbType.VarChar);
        int i = dL.ExecuteNonQuery(CommandType.StoredProcedure, "USP_UpdateEmrTemplate_Setting", hshIn);
        TemplateSetting();

    }

    protected void checkCustomize_CheckedChanged(object sender, EventArgs e)
    {

        Hashtable hshIn = new Hashtable();
        DAL.DAL dL = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
        hshIn.Add("@FacilityId", common.myInt(Session["FacilityId"]));
        hshIn.Add("@UserId", common.myInt(Session["UserId"]));
        if (checkCustomize.Checked == true)
        {

            hshIn.Add("@Customize", common.myStr(1));
            checkAll.Checked = false;
        }
        else
        {
            hshIn.Add("@Customize", common.myStr(0));

        }
        hshIn.Add("@CheckAll", common.myInt(0));
        // hshIn.Add("@Vital", common.myStr(strXMLChecklist));
        // hshOut.Add("@chvErrorStatus", SqlDbType.VarChar);
        int i = dL.ExecuteNonQuery(CommandType.StoredProcedure, "USP_UpdateEmrTemplate_Setting", hshIn);
        if (checkCustomize.Checked == true)
        {
            setTabVisibility();
        }
        else
        {
            TemplateSetting();
        }


    }

    // PAC
    protected void ibtnPACNotes_Click(object sender, ImageClickEventArgs e)
    {
        ClearMessageControl();
        autoSaveDataInTransit(true);
        string PACNotesGroupId = "";
        if (common.myInt(hdnPACNotesGroupId.Value) > 0)
            PACNotesGroupId = hdnPACNotesGroupId.Value;
        else
            PACNotesGroupId = "1608";
        RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=0&TemplateGroupId=" + PACNotesGroupId;
        RadWindowForNew.Width = 1200;
        RadWindowForNew.Height = 630;
        RadWindowForNew.Top = 10;
        RadWindowForNew.Left = 10;
        RadWindowForNew.OnClientClose = "addTemplatesOnClientClose_All";
        RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
        RadWindowForNew.Modal = true;
        RadWindowForNew.VisibleStatusbar = false;
        RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Maximize;
    }
    protected void btnPACDoneOk_Click(object sender, EventArgs e)
    {
        try
        {
            int FitForSurgery = common.myInt(rblFitForSurgery.SelectedValue);
            if (FitForSurgery != 1 && common.myStr(txtPACRemarks.Text).Equals(""))
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblMessage.Text = "Please provide PAC Remarks";
                return;
            }
            BaseC.RestFulAPI objcls = new BaseC.RestFulAPI(sConString);
            objcls.SavePACClearanceDetailsForOTRequest(common.myInt(Session["EncounterId"]), common.myInt(Session["UserId"]),
                FitForSurgery, txtPACRemarks.Text);
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
            lblMessage.Text = "PAC Updated Successfully...";
            btnPACDone.Visible = false;
            btnCancelPACDone.Visible = true;
            dvPAC.Visible = false;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
    protected void btnClosePAC_Click(object sender, EventArgs e)
    {
        dvPAC.Visible = false;
    }
    protected void btnPACDone_Click(object sender, EventArgs e)
    {
        dvPAC.Visible = true;
    }

    protected void btnCancelPACDone_Click(object sender, EventArgs e)
    {
        BaseC.RestFulAPI objcls = new BaseC.RestFulAPI(sConString);
        objcls.CancelPACClearanceDetailsForOTRequest(common.myInt(Session["EncounterId"]));
        lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
        lblMessage.Text = "PAC Cancelled Successfully...";
        btnPACDone.Visible = true;
        btnCancelPACDone.Visible = false;
    }
    protected void rblFitForSurgery_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (rblFitForSurgery.SelectedValue.Equals("1"))
            spnPACRemarks.Visible = false;
        else
            spnPACRemarks.Visible = true;
    }

    protected void gvbindEMROTRequest_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE"))
                {
                    ImageButton ibtnewDelete = (ImageButton)e.Row.FindControl("ibtnewDelete");
                    ibtnewDelete.Visible = false;
                }
            }
        }

        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            //objException.HandleException(Ex);
        }
        finally
        {
        }
    }
    protected void gvbindEMROTRequest_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            GridViewRow row = (GridViewRow)gvbindEMROTRequest.Rows[e.RowIndex];
            ImageButton ibtnewDelete = (ImageButton)row.FindControl("ibtnewDelete");
            HiddenField hdnhdnOTRequestID = (HiddenField)row.FindControl("hdnOTRequestID");
            if (ibtnewDelete.CommandName.ToUpper().Equals("DELETE"))
            {
                BaseC.RestFulAPI objprescription = new BaseC.RestFulAPI(sConString);
                string Message = objprescription.DeleteEMROTRequest(common.myInt(hdnhdnOTRequestID.Value), common.myInt(Session["UserId"]));

                if (common.myStr(Message).ToLower().Contains("deleted"))
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    lblMessage.Text = "Record deleted succesfully";
                    GetgvbindemrotRequest(common.myInt(Session["RegistrationNo"]));

                }
                else
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                    lblMessage.Text = Message;
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            //objException.HandleException(Ex);
        }
        finally
        {
        }
    }
    public void GetgvbindemrotRequest(int RegistrationNo)
    {
        BaseC.RestFulAPI objprescription = new BaseC.RestFulAPI(sConString);

        DataSet ds = new DataSet();
        ds = objprescription.GetEMROTRequest(RegistrationNo);
        if (ds.Tables[0].Rows.Count > 0)
        {
            gvbindEMROTRequest.DataSource = ds.Tables[0];
            gvbindEMROTRequest.DataBind();

            GridViewOTRequest.DataSource = ds.Tables[0];
            GridViewOTRequest.DataBind();
            divOtRequest.Visible = true;
        }
        else
        {
            DataRow dr = ds.Tables[0].NewRow();
            ds.Tables[0].Rows.Add(dr);
            gvbindEMROTRequest.DataSource = ds.Tables[0];
            gvbindEMROTRequest.DataBind();
        }
    }
    protected void imgAddOTRequest_Click(object sender, ImageClickEventArgs e)
    {

        //RadWindowForNew.NavigateUrl = "/OTScheduler/OtRequest.aspx";
        RadWindowForNew.NavigateUrl = "~/OTScheduler/OtRequest.aspx?MASTER=No&POPUP=POPUP";
        RadWindowForNew.Width = 1200;
        RadWindowForNew.Height = 630;
        RadWindowForNew.Top = 10;
        RadWindowForNew.Left = 10;
        RadWindowForNew.OnClientClose = "CopyLastPrescription";
        RadWindowForNew.VisibleOnPageLoad = true;
        RadWindowForNew.Modal = true;
        RadWindowForNew.VisibleStatusbar = false;
        RadWindowForNew.Behaviors = WindowBehaviors.Maximize | WindowBehaviors.Minimize | WindowBehaviors.Close | WindowBehaviors.Move | WindowBehaviors.Pin;
        RadWindowForNew.InitialBehaviors = WindowBehaviors.Maximize;
    }

    // Chif complaint
    protected void cmbProblemName_OnItemsRequested(object sender, RadComboBoxItemsRequestedEventArgs e)
    {
        DataTable data = new DataTable();
        try
        {
            switch (common.myStr("ALL"))
            {
                case "ALL":
                    if (e.Text.Trim().Length > 1)
                        data = PopulateAllProblem(e.Text);

                    break;

                    //case "FAV":
                    //    data = BindFavouriteProblems(e.Text, "");

                    //    break;
            }

            int itemOffset = e.NumberOfItems;
            if (itemOffset == 0)
            {
                this.cmbProblemName.Items.Clear();
            }
            int endOffset = Math.Min(itemOffset + 50, data.Rows.Count);
            e.EndOfItems = endOffset == data.Rows.Count;

            for (int i = itemOffset; i < endOffset; i++)
            {
                RadComboBoxItem item = new RadComboBoxItem();
                item.Text = common.myStr(data.Rows[i]["ProblemDescription"]);
                item.ToolTip = common.myStr(data.Rows[i]["ProblemDescription"]);
                item.Value = common.myStr(data.Rows[i]["ProblemId"]);

                item.Attributes["SNOMEDCode"] = common.myStr(data.Rows[i]["SNOMEDCode"]);

                this.cmbProblemName.Items.Add(item);
                item.DataBind();
            }
            e.Message = GetStatusMessage(endOffset, data.Rows.Count);
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            //   HandleException(Ex);
        }
        finally
        {
            data.Dispose();
        }
    }

    private DataTable PopulateAllProblem(string txt)
    {
        DataTable DT = new DataTable();

        try
        {
            if (common.myLen(Session["encounterid"]) > 0 && common.myLen(Session["RegistrationID"]) > 0)
            {
                //objbc2 = new BaseC.EMRProblems(sConString);

                //hshInput = new Hashtable();
                string strSearchCriteria = string.Empty;
                strSearchCriteria = "%" + txt + "%";

                WebClient client = new WebClient();
                client.Headers["Content-type"] = "application/json";
                client.Encoding = Encoding.UTF8;
                string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/PopulateAllProblem";
                APIRootClass.PopulateAllProblem objRoot = new global::APIRootClass.PopulateAllProblem();
                objRoot.strSearchCriteria = strSearchCriteria;
                objRoot.DoctorID = common.myInt(Session["DoctorID"]);
                objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);

                string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
                string sValue = client.UploadString(ServiceURL, inputJson);
                sValue = JsonConvert.DeserializeObject<string>(sValue);
                DT = (JsonConvert.DeserializeObject<DataSet>(sValue)).Tables[0];

                //DT = ((DataSet)objbc2.PopulateAllProblem(strSearchCriteria, common.myInt(Session["HospitalLocationId"]), common.myInt(Session["DoctorID"]))).Tables[0];
                if (DT.Rows.Count > 0)
                {
                    DT.Columns.Add("Id");
                    DT.Columns.Add("EncounterDate");
                    // btnRemovefromFavorites.Visible = false;
                    // btnAddToFavourite.Visible = true;
                }
                else
                {
                    DT = BindBlankGrid();
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            // HandleException(Ex);
        }

        return DT;
    }

    private DataTable BindBlankGrid()
    {
        DataTable dT = new DataTable();
        try
        {

            dT.Columns.Add("Id");
            dT.Columns.Add("ProblemId");
            dT.Columns.Add("ProblemDescription");
            dT.Columns.Add("SNOMEDCode");
            dT.Columns.Add("EncounterDate");
            for (int i = 0; i < 1; i++)
            {
                DataRow dr = dT.NewRow();
                dr["ProblemId"] = 0;
                switch (Convert.ToString(ViewState["BTN"]))
                {
                    case "ALL":
                        dr["ProblemDescription"] = "No Problem Found";
                        break;

                    case "FAV":
                        dr["ProblemDescription"] = "No Favorite Found";
                        break;

                    default:
                        dr["ProblemDescription"] = "No Data Found";
                        break;
                }
                dr["SNOMEDCode"] = "";
                dT.Rows.Add(dr);
            }


        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            // HandleException(Ex);
        }
        return dT;
    }

    protected void ddlDurationType_SelectedIndexChanged(object sender, EventArgs e)
    {

        if (ddlDurationType.SelectedValue == "O")
        {

            rdoDurationList.Visible = false;
        }
        else
        {

            rdoDurationList.Visible = true;
        }
    }


    protected void btnRefreshTemplate_Click(object sender, EventArgs e)
    {
        TemplateSetting();
    }

    protected void btnAddComplaint_Click(object sender, EventArgs e)
    {
        //DAL.DAL objDl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
        //objbc2 = new BaseC.EMRProblems(sConString);
        DataSet ds = new DataSet();
        //hshInput = new Hashtable();
        //Hashtable hshOutput = new Hashtable();
        ArrayList col = new ArrayList();
        StringBuilder objXML = new StringBuilder();
        //BaseC.ParseData Parse = new BaseC.ParseData();
        try
        {
            if (cmbProblemName.Text.Trim() == "")
            {
                hdnIsUnSavedData.Value = "0";
                return;
            }

            if (ddlDurationType.SelectedValue.Equals(""))
            {
                Alert.ShowAjaxMsg("Please! Select Duration Type...", this.Page);
                return;
            }

            //if (rblShowNote.SelectedIndex == -1)
            //{
            //    Alert.ShowAjaxMsg("Would you like to show update data in Notes. Please Select Show in Note Option Yes or No ? ", this.Page);
            //    return;
            //}

            //if (btnAddtogrid.Text.Equals("Update List"))
            //{
            //    if (chkChronics.Checked)
            //    {
            //        foreach (GridViewRow gv in gvChronicProblemDetails.Rows)
            //        {
            //            if (common.myInt(gv.Cells[1].Text) != common.myInt(txtedit.Text))
            //            {
            //                if (common.myStr(prblmID.Value) == common.myStr(((Label)gv.FindControl("lblProblemId")).Text))
            //                {
            //                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            //                    lblMessage.Text = "This  (" + cmbProblemName.Text.Trim() + ")  already exists in Chronics Problems!";
            //                    hdnIsUnSavedData.Value = "0";
            //                    return;
            //                }
            //            }
            //        }
            //    }
            //    else
            //    {
            //        foreach (GridViewRow gv in gvProblemDetails.Rows)
            //        {
            //            if (!common.myInt(gv.Cells[1].Text).Equals(common.myInt(txtedit.Text)))
            //            {
            //                if (common.myStr(prblmID.Value) == common.myStr(((Label)gv.FindControl("lblProblemId")).Text))
            //                {
            //                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            //                    lblMessage.Text = "This  (" + cmbProblemName.Text.Trim() + ")  already exists in Today's Problems!";
            //                    hdnIsUnSavedData.Value = "0";
            //                    return;
            //                }
            //            }
            //        }
            //    }
            //}

            // string TemplateId = Request.QueryString["POPUP"] != null && common.myStr(Request.QueryString["POPUP"]) == "StaticTemplate" ? common.myStr(Request.QueryString["TemplateFieldId"]) : null;
            // string Side = ddlSide.SelectedIndex == -1 ? null : ddlSide.SelectedValue;
            //string Condition = ddlCondition.SelectedIndex == -1 ? null : ddlCondition.SelectedValue;

            col.Add(txtedit.Text);//Id
            col.Add(common.ParseString(prblmID.Value));//ProblemId
            col.Add(common.ParseString(cmbProblemName.Text.Trim()));//Problem
            col.Add(rdoDurationList.SelectedValue);//DurationID
            if (common.myStr(ddlDurationType.SelectedValue) == "O")
                col.Add(common.ParseString(""));//Duration            
            else
                col.Add(string.Empty);//Duration

            col.Add(0);//ContextID
            col.Add(common.ParseString(""));//Context
            col.Add(0);//SeverityId
            col.Add("");//Severity
            col.Add(chkPrimarys.Checked);//IsPrimary
            col.Add(chkChronics.Checked);//IsChronic
            col.Add(common.myInt(Session["DoctorId"]));//DoctorId
            col.Add(common.myInt(Session["FacilityId"]));//FacilityId
            col.Add(common.ParseString(""));//SCTId
            col.Add(common.ParseString(""));//QualityIDs
            col.Add(0);//LocationID
            col.Add(common.ParseString(""));//Location
            col.Add(0);//OnsetID
            col.Add("");//AssociatedProblemId1
            col.Add("");//AssociatedProblem1
            col.Add("");//AssociatedProblemId2
            col.Add("");//AssociatedProblem2
            col.Add("");//AssociatedProblemId3
            col.Add("");//AssociatedProblem3
            col.Add("");//AssociatedProblemId4
            col.Add("");//AssociatedProblem4
            col.Add("");//AssociatedProblemId5
            col.Add("");//AssociatedProblem5
            col.Add(0);//Side
            col.Add(0);//ConditionId
            col.Add("");//Percentage
            if (common.myStr(ddlDurationType.SelectedValue) == "O")
            {
                col.Add(DBNull.Value);//DurationsgvProblemDetails
            }
            else
            {
                col.Add(common.ParseString(rdoDurationList.SelectedValue));//Durations
            }
            col.Add(ddlDurationType.SelectedValue);//DurationType
            col.Add(null);//TemplateFieldId
            col.Add(common.myInt(0));//ComplaintSearchId

            objXML.Append(common.setXmlTable(ref col));

            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;
            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/CheckDuplicateProblem";
            APIRootClass.CheckDuplicateProblem objRoot = new global::APIRootClass.CheckDuplicateProblem();
            objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
            objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
            objRoot.EncounterId = common.myInt(Session["EncounterId"]);
            objRoot.ProblemId = common.myInt(prblmID.Value);
            objRoot.IsChronic = chkChronics.Checked;

            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);
            ds = JsonConvert.DeserializeObject<DataSet>(sValue);

            //ds = objbc2.CheckDuplicateProblem(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"]), 
            //    common.myInt(prblmID.Value), common.myBool(chkChronics.Checked));


            if (ds.Tables[0].Rows.Count > 0)
            {
                if (btnAddtogrid.Text == "Add To List")
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        if (common.myStr(prblmID.Value).Equals(common.myStr(ds.Tables[0].Rows[i]["ProblemId"])))
                        {
                            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                            if (chkChronics.Checked == true)
                            {
                                lblMessage.Text = "This  (" + cmbProblemName.Text.Trim() + ")  already exists in Chronics's Problems!";
                                hdnIsUnSavedData.Value = "0";
                            }
                            else
                            {
                                lblMessage.Text = "This  (" + cmbProblemName.Text.Trim() + ")  already exists in Today's Problems!";
                                hdnIsUnSavedData.Value = "0";
                            }
                            return;
                        }
                    }
                }

            }
            if (common.myLen(objXML).Equals(0))
            {
                lblMessage.Text = "Nothing to Add";
                return;
            }

            client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;
            ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SavePatientProblems";
            APIRootClass.SavePatientProblems objRoot1 = new global::APIRootClass.SavePatientProblems();
            objRoot1.HospitalLocationID = common.myInt(Session["HospitalLocationId"]);
            objRoot1.FacilityId = common.myInt(Session["FacilityId"]);
            objRoot1.RegistrationId = common.myInt(Session["RegistrationId"]);
            objRoot1.EncounterId = common.myInt(Session["EncounterId"]);
            objRoot1.PageId = common.myInt(ViewState["PageId"]);
            objRoot1.xmlProblemDetails = objXML.ToString();
            objRoot1.UserId = common.myInt(Session["UserId"]);
            objRoot1.Remarks = common.myStr("");
            objRoot1.IsPregment = false;
            objRoot1.IsBreastFeed = false;
            objRoot1.IsShowNote = false;
            objRoot1.DoctorId = common.myInt(Session["DoctorId"]);

            inputJson = (new JavaScriptSerializer()).Serialize(objRoot1);
            sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);
            lblMessage.Text = JsonConvert.DeserializeObject<string>(sValue);

            //lblMessage.Text = objbc2.EMRSavePatientProblems(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["FacilityId"]),
            //                    common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"]), common.myInt(ViewState["PageId"]),
            //                    objXML.ToString(), common.myInt(Session["UserId"]), common.myStr(txtSentenceGallery.Text), false, false,
            //                    common.myBool(rblShowNote.SelectedItem.Value), common.myInt(Session["DoctorID"]));

            if (lblMessage.Text.Contains("Data Saved!"))
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                RetrievePatientProblemsDetail();
                //if (common.myStr(Request.QueryString["IsEMRPopUp"]).Equals("1"))
                //    ScriptManager.RegisterStartupScript(Page, GetType(), "scrip1", " var oWindow = null; if (window.radWindow) oWindow = window.radWindow; else if (window.frameElement.radWindow) oWindow = window.frameElement.radWindow; oWindow.close(); ", true);
            }
            else
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);

            //hdnIsUnSavedData.Value = "0";
            //btnNew.Visible = true;
            //txtQualityIds.Text = string.Empty;
            //ClearProblemDetailsControls();
            //RetrievePatientProblemsDetail();
            //gvChronicProblemDetails.SelectedIndex = -1;
            //gvProblemDetails.SelectedIndex = -1;

            //txtedit.Text = "";

            //rblBTN_SelectedIndexChanged(this, null);

            btnAddComplaint.Text = "Add To List";
            //ScriptManager.RegisterStartupScript(Page, GetType(), "scrip1", "nSat=0;", true);

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            //HandleException(Ex);
        }
        finally
        {
            objXML = null;
            col = null;
            //objDl = null;
            ds.Dispose();
            //hshInput = null;
            //hshOutput = null;
            //Parse = null;
        }
    }

    #region Print Rx
    protected void btnPrintReport_OnClick(object sender, EventArgs e)
    {
        try
        {


            BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);
            DataSet ds = objEMR.getReportFormatDetails(common.myInt(Session["DoctorId"]));
            if (ds != null)
            {
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        ViewState["reportid"] = common.myStr(ds.Tables[0].Rows[0]["reportid"]);
                        ViewState["reportname"] = common.myStr(ds.Tables[0].Rows[0]["reportname"]);
                        ViewState["headerid"] = common.myStr(ds.Tables[0].Rows[0]["headerid"]);
                    }
                    else
                    {
                        Alert.ShowAjaxMsg("Report Format not tagged", this.Page);
                        return;
                    }
                }
                else
                {
                    Alert.ShowAjaxMsg("Report Format not tagged", this.Page);
                    return;
                }
            }
            else
            {
                Alert.ShowAjaxMsg("Report Format not tagged", this.Page);
                return;
            }

            generateReport();
            //  getDoctorImage();
            if (common.myLen(hdnReportContent.ClientID) > 0 && common.myInt(ViewState["reportid"]) > 0)
            {
                Session["PrintReportWordProcessorWiseData"] = common.myStr(hdnReportContent.Value);

                RadWindowForNew.NavigateUrl = "~/Editor/PrintReportWordProcessorWise.aspx?ReportId=" + common.myInt(ViewState["reportid"]) +
                                           "&HeaderId=" + common.myInt(ViewState["headerid"]) +
                                           "&RegistrationId=" + common.myInt(ViewState["RegistrationId"]);
                RadWindowForNew.Width = 650;
                RadWindowForNew.Height = 500;
                RadWindowForNew.Top = 10;
                RadWindowForNew.Left = 10;
                RadWindowForNew.OnClientClose = string.Empty;
                RadWindowForNew.Modal = true;
                RadWindowForNew.OnClientClose = "OnClientDeleteDoctorImage";
                RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code    
                RadWindowForNew.VisibleStatusbar = false;
                RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
            }
            else
            {
                Alert.ShowAjaxMsg("Data not found!", this.Page);
                return;
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;

        }
    }
    protected void generateReport()
    {
        bool IsPrintDoctorSignature = false;
        DataSet ds = new DataSet();
        clsIVF objivf = new clsIVF(sConString);
        ViewState["SignDoctorHeight"] = "0";
        ViewState["SignDoctorWidth"] = "0";
        try
        {
            if (common.myStr(Session["OPIP"]) == "I" && common.myBool(Session["EnablePrintCaseSheet"]) == false
            && common.myStr(Request.QueryString["callby"]) != "mrd")
            {
                if (common.myStr(Request.QueryString["OPIP"]) == "I")
                {
                    Alert.ShowAjaxMsg("You are not Authorise to print IP Clinical Data", Page);
                    return;
                }
            }
            if (common.myStr(Request.QueryString["OPIP"]) == "I" && common.myBool(Session["EnablePrintCaseSheet"]) == false
                && common.myStr(Request.QueryString["callby"]) == "mrd")
            {
                Alert.ShowAjaxMsg("You are not Authorise to print IP Clinical Data", Page);
                return;
            }
            hdnReportContent.Value = "";
            // Kuldeep Kumar 
            int DoctorPriscriptionTemplateId = objivf.GetDoctorPrintRxId(common.myInt(Session["DoctorId"]));
            //if (DoctorPriscriptionTemplateId == 0)
            //    DoctorPriscriptionTemplateId = objivf.GetDefaultPrintRxId("Prescription");
            if (common.myInt(DoctorPriscriptionTemplateId) > 0)
            {
                ds = objivf.EditReportName(common.myInt(DoctorPriscriptionTemplateId));

                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        IsPrintDoctorSignature = common.myBool(ds.Tables[0].Rows[0]["IsPrintDoctorSignature"]);

                        //Setting Imahe Height and width.
                        //1 Doctor Signature
                        DataView dvDoctorSignature = new DataView(ds.Tables[1]);
                        dvDoctorSignature.RowFilter = "ImageCode='DS'";
                        if (dvDoctorSignature.ToTable().Rows.Count > 0)
                        {
                            ViewState["SignDoctorHeight"] = common.myStr(dvDoctorSignature.ToTable().Rows[0]["Height"]);
                            ViewState["SignDoctorWidth"] = common.myStr(dvDoctorSignature.ToTable().Rows[0]["Width"]);
                        }
                        else
                        {
                            ViewState["SignDoctorHeight"] = "50";
                            ViewState["SignDoctorWidth"] = "100";
                        }
                        //2 Hospita lLogo
                        DataView dvHospitalLogo = new DataView(ds.Tables[1]);
                        dvHospitalLogo.RowFilter = "ImageCode='HOSL'";
                        if (dvHospitalLogo.ToTable().Rows.Count > 0)
                        {
                            ViewState["HospitalLogoHeight"] = common.myStr(dvHospitalLogo.ToTable().Rows[0]["Height"]);
                            ViewState["HospitalLogoWidth"] = common.myStr(dvHospitalLogo.ToTable().Rows[0]["Width"]);
                        }
                        else
                        {
                            ViewState["HospitalLogoHeight"] = "50";
                            ViewState["HospitalLogoWidth"] = "100";
                        }
                        //3 NABH LOGO
                        DataView dvNABHLOGO = new DataView(ds.Tables[1]);
                        dvNABHLOGO.RowFilter = "ImageCode='NABH'";
                        if (dvNABHLOGO.ToTable().Rows.Count > 0)
                        {
                            ViewState["NABHLOGOHeight"] = common.myStr(dvNABHLOGO.ToTable().Rows[0]["Height"]);
                            ViewState["NABHLOGOWidth"] = common.myStr(dvNABHLOGO.ToTable().Rows[0]["Width"]);
                        }
                        else
                        {
                            ViewState["NABHLOGOHeight"] = "50";
                            ViewState["NABHLOGOWidth"] = "100";
                        }
                    }
                }

                hdnReportContent.Value = PrintReport(true);

                //comment as follow-up appointment is check inside the printreport function --Saten
                StringBuilder sbD = new StringBuilder();
                sbD.Append(" <table border='0' width='100%' style='border-collapse:collapse;' cellpadding='5' cellspacing='5' >");
                //sbD.Append("<tr><td>Follow Up : </td></tr>");
                string SignatureLabel = "";
                //string SignatureLabel = common.myStr(ddlReport.SelectedItem.Attributes["SignatureLabel"]).Trim(); KuldeepAll
                if (IsPrintDoctorSignature.Equals(true))
                {
                    sbD.Append("<tr><td align='right'>" + PrintReportSignature(IsPrintDoctorSignature) + "</td></tr>");
                }
                else
                {
                    StringBuilder sb = new StringBuilder();

                    DataTable dt = objivf.getDoctorSignatureDetails(common.myInt(Session["DoctorId"]), common.myInt(Session["FacilityId"]), common.myInt(Session["HospitalLocationID"])).Tables[0];

                    if (Session["HeaderFooterFont"] != null && !common.myStr(Session["HeaderFooterFont"]).Equals(string.Empty))
                    {
                        sb.Append(" <table border='0' width='100%' style='border-collapse:collapse; " + common.myStr(Session["HeaderFooterFont"]) + ";' cellpadding='0' cellspacing='0'  >");
                    }
                    else
                    {
                        sb.Append(" <table border='0' width='100%' style='border-collapse:collapse;' cellpadding='0' cellspacing='0'  >");
                    }
                    if (dt.Rows.Count > 0)
                    {

                        if (common.myStr(dt.Rows[0]["DoctorName"]).Trim().Length > 0)
                        {
                            sb.Append("<tr>");
                            sb.Append("<td align ='right'><b>" + common.myStr(dt.Rows[0]["DoctorName"]).Trim() + "</b></td>");
                            sb.Append("</tr>");
                        }

                        if (common.myStr(dt.Rows[0]["SignatureLine1"]).Trim().Length > 0)
                        {
                            sb.Append("<tr>");
                            sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine1"]).Trim() + "</td>");
                            sb.Append("</tr>");
                        }
                        if (common.myStr(dt.Rows[0]["SignatureLine2"]).Trim().Length > 0)
                        {
                            sb.Append("<tr>");
                            sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine2"]).Trim() + "</td>");
                            sb.Append("</tr>");
                        }
                        if (common.myStr(dt.Rows[0]["SignatureLine3"]).Trim().Length > 0)
                        {
                            sb.Append("<tr>");
                            sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine3"]).Trim() + "</td>");
                            sb.Append("</tr>");
                        }
                        if (common.myStr(dt.Rows[0]["SignatureLine4"]).Trim().Length > 0)
                        {
                            sb.Append("<tr>");
                            sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine4"]).Trim() + "</td>");
                            sb.Append("</tr>");
                        }

                    }
                    sb.Append("</table>");
                    sb.Append("<br />");

                    if (SignatureLabel == "")
                    {
                        sbD.Append("<tr><td align='right'><b>" + sb + "</b></td></tr>");
                        // sbD.Append("<tr><td align='right'><b>Consultant&nbsp;Signature</b></td></tr>");
                    }
                    else
                    {
                        sbD.Append("<tr><td align='right'><b>Consultant&nbsp;Signature</b></td></tr>");
                    }
                }
                //sbD.Append("<tr><td align='right'> </td></tr>");
                sbD.Append("</table>");
                hdnReportContent.Value = "<div style='margin-left:3em; '>" + hdnReportContent.Value + sbD.ToString() + "</div>";
            }
            else
            {
                //btnPrintReport.Visible = false;
                return;
            }
            //btnPrintReport.Visible = true;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;

        }
    }
    private string PrintReportSignature(bool Isdoctorsignature)
    {
        StringBuilder sb = new StringBuilder();
        sb.Append(getReportsSignature(Isdoctorsignature));
        return sb.ToString();
    }
    #region comment old getReportsSignature
    //private StringBuilder getReportsSignature(bool IsPrintDoctorSignature)
    //{
    //    StringBuilder sb = new StringBuilder();
    //    try
    //    {
    //        BaseC.clsLISPhlebotomy lis = new BaseC.clsLISPhlebotomy(sConString);
    //        DataTable dt = new DataTable();
    //        DataSet ds = new DataSet();
    //        clsIVF objivf = new clsIVF(sConString);
    //        ds = new DataSet();

    //        dt = objivf.getDoctorSignatureDetails(common.myInt(Session["DoctorId"]), common.myInt(Session["FacilityId"]), common.myInt(Session["HospitalLocationID"])).Tables[0];

    //        DataSet ds1 = lis.getDoctorImageDetails(common.myInt(Session["DoctorId"]), common.myInt(Session["HospitalLocationId"]), common.myInt(Session["FacilityId"]),
    //                                          common.myInt(ViewState["EncounterId"]));

    //        string EMRPrintSignatureOnPrintRxReport = common.GetFlagValueHospitalSetup(common.myInt(Session["HospitalLocationId"]),
    //                   common.myInt(Session["FacilityId"]), "EMRPrintSignatureOnPrintRxReport", sConString);

    //        if (EMRPrintSignatureOnPrintRxReport.ToString() != "Y")
    //        {
    //            if (IsPrintDoctorSignature && common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE"))
    //            {
    //                if (Session["HeaderFooterFont"] != null && !common.myStr(Session["HeaderFooterFont"]).Equals(string.Empty))
    //                {
    //                    sb.Append(" <table border='0' width='100%' style='border-collapse:collapse; " + common.myStr(Session["HeaderFooterFont"]) + ";' cellpadding='0' cellspacing='0'  >");
    //                }
    //                else
    //                {
    //                    sb.Append(" <table border='0' width='100%' style='border-collapse:collapse;' cellpadding='0' cellspacing='0'  >");
    //                }
    //                if (dt.Rows.Count > 0)
    //                {
    //                    if (ds1.Tables[0].Rows.Count > 0)
    //                    {
    //                        DataRow dr = ds1.Tables[0].Rows[0] as DataRow;
    //                        string FileName = common.myStr(dr["ImageType"]).Trim();


    //                        string Splitter = ConfigurationManager.AppSettings["Split"];
    //                        if (common.myLen(Splitter).Equals(0))
    //                        {
    //                            Splitter = "!";
    //                        }

    //                        var csplitter = Splitter.ToCharArray();
    //                        string ftp = ftppath.Split(csplitter)[0].ToString();

    //                        string Filepath = FileFolder + "DoctorImages/" + FileName;
    //                        //ftppath + FileFolder + FileName
    //                        FtpWebRequest request = (FtpWebRequest)WebRequest.Create(ftp + Filepath);
    //                        request.Method = WebRequestMethods.Ftp.DownloadFile;

    //                        //Enter FTP Server credentials.
    //                        request.Credentials = new NetworkCredential(ftppath.Split(csplitter)[1].ToString(), ftppath.Split(csplitter)[2].ToString());
    //                        request.UsePassive = true;
    //                        request.UseBinary = true;
    //                        request.EnableSsl = false;

    //                        //Fetch the Response and read it into a MemoryStream object.

    //                        if (File.Exists(Server.MapPath("~/" + Filepath)))
    //                        {
    //                            File.Delete(Server.MapPath("~/" + Filepath));
    //                        }



    //                        //yogesh  10/05/2022
    //                        if (dr["ImageType"].ToString() != "")
    //                        {
    //                            bool responseResult = true;
    //                            try
    //                            {
    //                                FtpWebResponse response = (FtpWebResponse)request.GetResponse();
    //                                using (MemoryStream stream = new MemoryStream())
    //                                {
    //                                    response.GetResponseStream().CopyTo(stream);
    //                                    string base64String = Convert.ToBase64String(stream.ToArray(), 0, stream.ToArray().Length);
    //                                    byte[] imageBytes = Convert.FromBase64String(base64String);
    //                                    string filePath = Server.MapPath("~/" + Filepath);
    //                                    File.WriteAllBytes(filePath, imageBytes);
    //                                    responseResult = true;
    //                                }
    //                            }
    //                            catch (Exception ex)
    //                            {
    //                                responseResult = false;
    //                            }
    //                            finally
    //                            {
    //                                if (responseResult == false)
    //                                {
    //                                    Stream strm;
    //                                    Object img = dr["SignatureImage"];
    //                                    strm = new MemoryStream((byte[])img);
    //                                    byte[] buffer = new byte[strm.Length];
    //                                    int byteSeq = strm.Read(buffer, 0, System.Convert.ToInt32(strm.Length));
    //                                    FileStream fs = new FileStream(Server.MapPath("/PatientDocuments/DoctorImages/" + FileName), FileMode.Create, FileAccess.Write);
    //                                    fs.Write(buffer, 0, byteSeq);
    //                                    fs.Dispose();
    //                                }
    //                            }
    //                        }


    //                        if (FileName != "")
    //                        {

    //                            sb.Append("<tr>");
    //                            if ((common.myInt(ViewState["SignDoctorHeight"].ToString()) > 0) && (common.myInt(ViewState["SignDoctorWidth"].ToString()) > 0))
    //                            {
    //                                int SignDoctorHeight = common.myInt(ViewState["SignDoctorHeight"].ToString());
    //                                int SignDoctorWidth = common.myInt(ViewState["SignDoctorWidth"].ToString());
    //                                sb.Append("<td align ='right'><img width='" + SignDoctorWidth + "px' align ='right' height='" + SignDoctorHeight + "px' src='" + Server.MapPath("~") + @"\PatientDocuments\DoctorImages\" + FileName + "' /></td>");
    //                            }
    //                            else
    //                            {
    //                                sb.Append("<td align ='right'><img width='100px' align ='right' height='50px' src='" + Server.MapPath("~") + @"\PatientDocuments\DoctorImages\" + FileName + "' /></td>");
    //                            }
    //                            sb.Append("</tr>");
    //                        }
    //                    }
    //                    if (common.myStr(dt.Rows[0]["DoctorName"]).Trim().Length > 0)
    //                    {
    //                        sb.Append("<tr>");
    //                        sb.Append("<td align ='right'><b>" + common.myStr(dt.Rows[0]["DoctorName"]).Trim() + "</b></td>");
    //                        sb.Append("</tr>");
    //                    }



    //                    if (common.myStr(dt.Rows[0]["SignatureLine1"]).Trim().Length > 0)
    //                    {
    //                        sb.Append("<tr>");
    //                        sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine1"]).Trim() + "</td>");
    //                        sb.Append("</tr>");
    //                    }
    //                    if (common.myStr(dt.Rows[0]["SignatureLine2"]).Trim().Length > 0)
    //                    {
    //                        sb.Append("<tr>");
    //                        sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine2"]).Trim() + "</td>");
    //                        sb.Append("</tr>");
    //                    }
    //                    if (common.myStr(dt.Rows[0]["SignatureLine3"]).Trim().Length > 0)
    //                    {
    //                        sb.Append("<tr>");
    //                        sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine3"]).Trim() + "</td>");
    //                        sb.Append("</tr>");
    //                    }
    //                    if (common.myStr(dt.Rows[0]["SignatureLine4"]).Trim().Length > 0)
    //                    {
    //                        sb.Append("<tr>");
    //                        sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine4"]).Trim() + "</td>");
    //                        sb.Append("</tr>");
    //                    }

    //                }
    //                sb.Append("</table>");
    //            }
    //            else
    //                sb.Append("<br />");
    //        }
    //        else
    //        {
    //            if (Session["HeaderFooterFont"] != null && !common.myStr(Session["HeaderFooterFont"]).Equals(string.Empty))
    //            {
    //                sb.Append(" <table border='0' width='100%' style='border-collapse:collapse; " + common.myStr(Session["HeaderFooterFont"]) + ";' cellpadding='0' cellspacing='0'  >");
    //            }
    //            else
    //            {
    //                sb.Append(" <table border='0' width='100%' style='border-collapse:collapse;' cellpadding='0' cellspacing='0'  >");
    //            }
    //            if (dt.Rows.Count > 0)
    //            {
    //                if (ds1.Tables[0].Rows.Count > 0)
    //                {
    //                    DataRow dr = ds1.Tables[0].Rows[0] as DataRow;
    //                    string FileName = common.myStr(dr["ImageType"]).Trim();
    //                    //palendra FTP

    //                    //string Splitter = ConfigurationManager.AppSettings["Split"];
    //                    //if (common.myLen(Splitter).Equals(0))
    //                    //{
    //                    //    Splitter = "!";
    //                    //}

    //                    //var csplitter = Splitter.ToCharArray();
    //                    //string ftp = ftppath.Split(csplitter)[0].ToString();

    //                    //Create FTP Request.
    //                    string Filepath = FileFolder + "DoctorImages/" + FileName;
    //                    //ftppath + FileFolder + FileName
    //                    //FtpWebRequest request = (FtpWebRequest)WebRequest.Create(ftp + Filepath);
    //                    //request.Method = WebRequestMethods.Ftp.DownloadFile;

    //                    //Enter FTP Server credentials.
    //                    //request.Credentials = new NetworkCredential(ftppath.Split(csplitter)[1].ToString(), ftppath.Split(csplitter)[2].ToString());
    //                    //request.UsePassive = true;
    //                    //request.UseBinary = true;
    //                    //request.EnableSsl = false;

    //                    //Fetch the Response and read it into a MemoryStream object.

    //                    if (File.Exists(Server.MapPath("~/" + Filepath)))
    //                    {
    //                        File.Delete(Server.MapPath("~/" + Filepath));
    //                    }

    //                    //yogesh  10/05/2022
    //                    if (dr["ImageType"].ToString() != "")
    //                    {
    //                        Stream strm;
    //                        Object img = dr["SignatureImage"];
    //                        strm = new MemoryStream((byte[])img);
    //                        byte[] buffer = new byte[strm.Length];
    //                        int byteSeq = strm.Read(buffer, 0, System.Convert.ToInt32(strm.Length));
    //                        FileStream fs = new FileStream(Server.MapPath("/PatientDocuments/DoctorImages/" + FileName), FileMode.Create, FileAccess.Write);
    //                        fs.Write(buffer, 0, byteSeq);
    //                        fs.Dispose();
    //                    }

    //                    //palendra FTP
    //                    if (FileName != "")
    //                    {
    //                        //FtpWebResponse response = (FtpWebResponse)request.GetResponse();
    //                        //using (MemoryStream stream = new MemoryStream())
    //                        //{
    //                        //    response.GetResponseStream().CopyTo(stream);
    //                        //    string base64String = Convert.ToBase64String(stream.ToArray(), 0, stream.ToArray().Length);
    //                        //    byte[] imageBytes = Convert.FromBase64String(base64String);
    //                        //    //byte[] imageBytes = "data:image/png;base64," + base64String;
    //                        //    string filePath = Server.MapPath("~/" + Filepath);
    //                        //    File.WriteAllBytes(filePath, imageBytes);

    //                        //}

    //                        //sb.Append("<tr>");
    //                        //sb.Append("<td align ='right'><img width='100px' align ='right' height='50px' src='"+ s +"' /></td>");
    //                        //sb.Append("</tr>");

    //                        sb.Append("<tr>");
    //                        if ((common.myInt(ViewState["SignDoctorHeight"].ToString()) > 0) && (common.myInt(ViewState["SignDoctorWidth"].ToString()) > 0))
    //                        {
    //                            int SignDoctorHeight = common.myInt(ViewState["SignDoctorHeight"].ToString());
    //                            int SignDoctorWidth = common.myInt(ViewState["SignDoctorWidth"].ToString());
    //                            sb.Append("<td align ='right'><img width='" + SignDoctorWidth + "px' align ='right' height='" + SignDoctorHeight + "px' src='" + Server.MapPath("~") + @"\PatientDocuments\DoctorImages\" + FileName + "' /></td>");
    //                        }
    //                        else
    //                        {
    //                            sb.Append("<td align ='right'><img width='100px' align ='right' height='50px' src='" + Server.MapPath("~") + @"\PatientDocuments\DoctorImages\" + FileName + "' /></td>");
    //                        }

    //                        sb.Append("</tr>");
    //                    }
    //                }
    //                if (common.myStr(dt.Rows[0]["DoctorName"]).Trim().Length > 0)
    //                {
    //                    sb.Append("<tr>");
    //                    sb.Append("<td align ='right'><b>" + common.myStr(dt.Rows[0]["DoctorName"]).Trim() + "</b></td>");
    //                    sb.Append("</tr>");
    //                }
    //                //if (common.myStr(dt.Rows[0]["Education"]).Trim().Length > 0)
    //                //{
    //                //    sb.Append("<tr>");
    //                //    sb.Append("<td align ='right'><b>" + common.myStr(dt.Rows[0]["Education"]).Trim() + "</b></td>");
    //                //    sb.Append("</tr>");
    //                //}
    //                //if (common.myStr(dt.Rows[0]["Designation"]).Trim().Length > 0)
    //                //{
    //                //    sb.Append("<tr>");
    //                //    sb.Append("<td align ='right'><b>" + common.myStr(dt.Rows[0]["Designation"]).Trim() + "</b></td>");
    //                //    sb.Append("</tr>");
    //                //}
    //                //if (common.myStr(dt.Rows[0]["UPIN"]).Trim().Length > 0)
    //                //{
    //                //    sb.Append("<tr>");

    //                //    if (common.isNumeric(common.myStr(dt.Rows[0]["UPIN"]).Trim()))
    //                //    {
    //                //        sb.Append("<td align ='right'><b>Regn. No. : " + common.myStr(dt.Rows[0]["UPIN"]).Trim() + "</b></td>");
    //                //    }
    //                //    else
    //                //    {
    //                //        sb.Append("<td align ='right'><b>" + common.myStr(dt.Rows[0]["UPIN"]).Trim() + "</b></td>");
    //                //    }

    //                //    sb.Append("</tr>");
    //                //}
    //                if (common.myStr(dt.Rows[0]["SignatureLine1"]).Trim().Length > 0)
    //                {
    //                    sb.Append("<tr>");
    //                    sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine1"]).Trim() + "</td>");
    //                    sb.Append("</tr>");
    //                }
    //                if (common.myStr(dt.Rows[0]["SignatureLine2"]).Trim().Length > 0)
    //                {
    //                    sb.Append("<tr>");
    //                    sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine2"]).Trim() + "</td>");
    //                    sb.Append("</tr>");
    //                }
    //                if (common.myStr(dt.Rows[0]["SignatureLine3"]).Trim().Length > 0)
    //                {
    //                    sb.Append("<tr>");
    //                    sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine3"]).Trim() + "</td>");
    //                    sb.Append("</tr>");
    //                }
    //                if (common.myStr(dt.Rows[0]["SignatureLine4"]).Trim().Length > 0)
    //                {
    //                    sb.Append("<tr>");
    //                    sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine4"]).Trim() + "</td>");
    //                    sb.Append("</tr>");
    //                }

    //            }
    //            sb.Append("</table>");
    //            sb.Append("<br />");
    //        }
    //        return sb;
    //    }
    //    catch (Exception Ex)
    //    {

    //        sb = new StringBuilder();
    //        return sb;
    //    }
    //}
    #endregion
    //yogesh  10/05/2022
    #region Optimize getReportsSignature by kuldeep kumar
    private StringBuilder getReportsSignature(bool IsPrintDoctorSignature)
    {
        StringBuilder sb = new StringBuilder();
        BaseC.clsLISPhlebotomy lis = new BaseC.clsLISPhlebotomy(sConString);
        DataTable dt = new DataTable();
        DataSet ds = new DataSet();
        clsIVF objivf = new clsIVF(sConString);
        ds = new DataSet();
        try
        {
            int DoctorPriscriptionTemplateId = objivf.GetDoctorPrintRxId(common.myInt(Session["DoctorId"]));
            ds = objivf.EditReportName(common.myInt(DoctorPriscriptionTemplateId));
            if (ds.Tables[1].Rows.Count > 0)
            {
                ViewState["SignDoctorHeight"] = common.myStr(ds.Tables[1].Rows[0]["Height"]);
                ViewState["SignDoctorWidth"] = common.myStr(ds.Tables[1].Rows[0]["Width"]);
            }
            else
            {
                ViewState["SignDoctorHeight"] = 100;
                ViewState["SignDoctorWidth"] = 50;
            }

            dt = objivf.getDoctorSignatureDetails(common.myInt(Session["DoctorId"]), common.myInt(Session["FacilityId"]), common.myInt(Session["HospitalLocationID"])).Tables[0];
            DataSet ds1 = lis.getDoctorImageDetails(common.myInt(Session["DoctorId"]), common.myInt(Session["HospitalLocationId"]), common.myInt(Session["FacilityId"]),
                                              common.myInt(ViewState["EncounterId"]));
            string EMRFTPSignatureImage = common.GetFlagValueHospitalSetup(common.myInt(Session["HospitalLocationId"]),
                       common.myInt(Session["FacilityId"]), "IsEMRFTPDoctorSignature", sConString);
            if (IsPrintDoctorSignature && common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE"))
            {
                if (ds1.Tables[0].Rows[0]["SignatureImage"].ToString() != "" && common.myBool(dt.Rows[0]["IsShowDoctoreSignatureInPrintRx"]))
                {
                    if (Session["HeaderFooterFont"] != null && !common.myStr(Session["HeaderFooterFont"]).Equals(string.Empty))
                    {
                        sb.Append(" <table border='0' width='100%' style='border-collapse:collapse; " + common.myStr(Session["HeaderFooterFont"]) + ";' cellpadding='0' cellspacing='0'  >");
                    }
                    else
                    {
                        sb.Append(" <table border='0' width='100%' style='border-collapse:collapse;' cellpadding='0' cellspacing='0'  >");
                    }

                    if (EMRFTPSignatureImage.ToString() == "Y")
                    {

                        if (dt.Rows.Count > 0)
                        {
                            if (ds1.Tables[0].Rows.Count > 0)
                            {
                                DataRow dr = ds1.Tables[0].Rows[0] as DataRow;
                                string FileName = common.myStr(dr["ImageType"]).Trim();
                                string Splitter = ConfigurationManager.AppSettings["Split"];
                                if (common.myLen(Splitter).Equals(0))
                                {
                                    Splitter = "!";
                                }
                                var csplitter = Splitter.ToCharArray();
                                string ftp = ftppath.Split(csplitter)[0].ToString();
                                string Filepath = FileFolder + "DoctorImages/" + FileName;
                                //ftppath + FileFolder + FileName
                                FtpWebRequest request = (FtpWebRequest)WebRequest.Create(ftp + Filepath);
                                request.Method = WebRequestMethods.Ftp.DownloadFile;
                                //Enter FTP Server credentials.
                                request.Credentials = new NetworkCredential(ftppath.Split(csplitter)[1].ToString(), ftppath.Split(csplitter)[2].ToString());
                                request.UsePassive = true;
                                request.UseBinary = true;
                                request.EnableSsl = false;
                                //Fetch the Response and read it into a MemoryStream object.
                                if (File.Exists(Server.MapPath("~/" + Filepath)))
                                {
                                    File.Delete(Server.MapPath("~/" + Filepath));
                                }

                                FtpWebResponse response = (FtpWebResponse)request.GetResponse();
                                using (MemoryStream stream = new MemoryStream())
                                {
                                    response.GetResponseStream().CopyTo(stream);
                                    string base64String = Convert.ToBase64String(stream.ToArray(), 0, stream.ToArray().Length);
                                    byte[] imageBytes = Convert.FromBase64String(base64String);
                                    string filePath = Server.MapPath("~/" + Filepath);
                                    File.WriteAllBytes(filePath, imageBytes);

                                }

                                if (FileName != "")
                                {

                                    sb.Append("<tr>");
                                    if ((common.myInt(ViewState["SignDoctorHeight"].ToString()) > 0) && (common.myInt(ViewState["SignDoctorWidth"].ToString()) > 0))
                                    {
                                        int SignDoctorHeight = common.myInt(ViewState["SignDoctorHeight"].ToString());
                                        int SignDoctorWidth = common.myInt(ViewState["SignDoctorWidth"].ToString());
                                        sb.Append("<td align ='right'><img width='" + SignDoctorWidth + "px' align ='right' height='" + SignDoctorHeight + "px' src='" + Server.MapPath("~") + @"\PatientDocuments\DoctorImages\" + FileName + "' /></td>");
                                    }
                                    else
                                    {
                                        sb.Append("<td align ='right'><img width='100px' align ='right' height='50px' src='" + Server.MapPath("~") + @"\PatientDocuments\DoctorImages\" + FileName + "' /></td>");
                                    }
                                    sb.Append("</tr>");
                                }
                            }
                            if (common.myStr(dt.Rows[0]["DoctorName"]).Trim().Length > 0)
                            {
                                sb.Append("<tr>");
                                sb.Append("<td align ='right'><b>" + common.myStr(dt.Rows[0]["DoctorName"]).Trim() + "</b></td>");
                                sb.Append("</tr>");
                            }

                            if (common.myStr(dt.Rows[0]["SignatureLine1"]).Trim().Length > 0)
                            {
                                sb.Append("<tr>");
                                sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine1"]).Trim() + "</td>");
                                sb.Append("</tr>");
                            }
                            if (common.myStr(dt.Rows[0]["SignatureLine2"]).Trim().Length > 0)
                            {
                                sb.Append("<tr>");
                                sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine2"]).Trim() + "</td>");
                                sb.Append("</tr>");
                            }
                            if (common.myStr(dt.Rows[0]["SignatureLine3"]).Trim().Length > 0)
                            {
                                sb.Append("<tr>");
                                sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine3"]).Trim() + "</td>");
                                sb.Append("</tr>");
                            }
                            if (common.myStr(dt.Rows[0]["SignatureLine4"]).Trim().Length > 0)
                            {
                                sb.Append("<tr>");
                                sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine4"]).Trim() + "</td>");
                                sb.Append("</tr>");
                            }

                        }
                        sb.Append("</table>");
                    }
                    else
                    {
                        //if (Session["HeaderFooterFont"] != null && !common.myStr(Session["HeaderFooterFont"]).Equals(string.Empty))
                        //{
                        //    sb.Append(" <table border='0' width='100%' style='border-collapse:collapse; " + common.myStr(Session["HeaderFooterFont"]) + ";' cellpadding='0' cellspacing='0'  >");
                        //}
                        //else
                        //{
                        //    sb.Append(" <table border='0' width='100%' style='border-collapse:collapse;' cellpadding='0' cellspacing='0'  >");
                        //}
                        if (dt.Rows.Count > 0)
                        {
                            if (ds1.Tables[0].Rows.Count > 0)
                            {
                                DataRow dr = ds1.Tables[0].Rows[0] as DataRow;
                                string FileName = common.myStr(dr["ImageType"]).Trim();
                                string Splitter = ConfigurationManager.AppSettings["Split"];
                                if (common.myLen(Splitter).Equals(0))
                                {
                                    Splitter = "!";
                                }
                                var csplitter = Splitter.ToCharArray();
                                string ftp = ftppath.Split(csplitter)[0].ToString();
                                string Filepath = FileFolder + "DoctorImages/" + FileName;
                                //Fetch the Response and read it into a MemoryStream object.
                                if (File.Exists(Server.MapPath("~/" + Filepath)))
                                {
                                    File.Delete(Server.MapPath("~/" + Filepath));
                                }

                                Stream strm;
                                Object img = dr["SignatureImage"];
                                strm = new MemoryStream((byte[])img);
                                byte[] buffer = new byte[strm.Length];
                                int byteSeq = strm.Read(buffer, 0, System.Convert.ToInt32(strm.Length));
                                FileStream fs = new FileStream(Server.MapPath("/PatientDocuments/DoctorImages/" + FileName), FileMode.Create, FileAccess.Write);
                                fs.Write(buffer, 0, byteSeq);
                                fs.Dispose();
                                if (FileName != "")
                                {

                                    sb.Append("<tr>");
                                    if ((common.myInt(ViewState["SignDoctorHeight"].ToString()) > 0) && (common.myInt(ViewState["SignDoctorWidth"].ToString()) > 0))
                                    {
                                        int SignDoctorHeight = common.myInt(ViewState["SignDoctorHeight"].ToString());
                                        int SignDoctorWidth = common.myInt(ViewState["SignDoctorWidth"].ToString());
                                        sb.Append("<td align ='right'><img width='" + SignDoctorWidth + "px' align ='right' height='" + SignDoctorHeight + "px' src='" + Server.MapPath("~") + @"\PatientDocuments\DoctorImages\" + FileName + "' /></td>");
                                    }
                                    else
                                    {
                                        sb.Append("<td align ='right'><img width='100px' align ='right' height='50px' src='" + Server.MapPath("~") + @"\PatientDocuments\DoctorImages\" + FileName + "' /></td>");
                                    }
                                    sb.Append("</tr>");
                                }
                            }
                            if (common.myStr(dt.Rows[0]["DoctorName"]).Trim().Length > 0)
                            {
                                sb.Append("<tr>");
                                sb.Append("<td align ='right'><b>" + common.myStr(dt.Rows[0]["DoctorName"]).Trim() + "</b></td>");
                                sb.Append("</tr>");
                            }

                            if (common.myStr(dt.Rows[0]["SignatureLine1"]).Trim().Length > 0)
                            {
                                sb.Append("<tr>");
                                sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine1"]).Trim() + "</td>");
                                sb.Append("</tr>");
                            }
                            if (common.myStr(dt.Rows[0]["SignatureLine2"]).Trim().Length > 0)
                            {
                                sb.Append("<tr>");
                                sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine2"]).Trim() + "</td>");
                                sb.Append("</tr>");
                            }
                            if (common.myStr(dt.Rows[0]["SignatureLine3"]).Trim().Length > 0)
                            {
                                sb.Append("<tr>");
                                sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine3"]).Trim() + "</td>");
                                sb.Append("</tr>");
                            }
                            if (common.myStr(dt.Rows[0]["SignatureLine4"]).Trim().Length > 0)
                            {
                                sb.Append("<tr>");
                                sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine4"]).Trim() + "</td>");
                                sb.Append("</tr>");
                            }

                        }

                        sb.Append("</table>");
                    }
                }
                else
                {
                    if (Session["HeaderFooterFont"] != null && !common.myStr(Session["HeaderFooterFont"]).Equals(string.Empty))
                    {
                        sb.Append(" <table border='0' width='100%' style='border-collapse:collapse; " + common.myStr(Session["HeaderFooterFont"]) + ";' cellpadding='0' cellspacing='0'  >");
                    }
                    else
                    {
                        sb.Append(" <table border='0' width='100%' style='border-collapse:collapse;' cellpadding='0' cellspacing='0'  >");
                    }

                    if (common.myStr(dt.Rows[0]["DoctorName"]).Trim().Length > 0)
                    {
                        sb.Append("<tr>");
                        sb.Append("<td align ='right'><b>" + common.myStr(dt.Rows[0]["DoctorName"]).Trim() + "</b></td>");
                        sb.Append("</tr>");
                    }

                    if (common.myStr(dt.Rows[0]["SignatureLine1"]).Trim().Length > 0)
                    {
                        sb.Append("<tr>");
                        sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine1"]).Trim() + "</td>");
                        sb.Append("</tr>");
                    }
                    if (common.myStr(dt.Rows[0]["SignatureLine2"]).Trim().Length > 0)
                    {
                        sb.Append("<tr>");
                        sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine2"]).Trim() + "</td>");
                        sb.Append("</tr>");
                    }
                    if (common.myStr(dt.Rows[0]["SignatureLine3"]).Trim().Length > 0)
                    {
                        sb.Append("<tr>");
                        sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine3"]).Trim() + "</td>");
                        sb.Append("</tr>");
                    }
                    if (common.myStr(dt.Rows[0]["SignatureLine4"]).Trim().Length > 0)
                    {
                        sb.Append("<tr>");
                        sb.Append("<td align ='right'>" + common.myStr(dt.Rows[0]["SignatureLine4"]).Trim() + "</td>");
                        sb.Append("</tr>");
                    }

                    sb.Append("</table>");

                    //Alert.ShowAjaxMsg("Warning: Doctor Signature Image not uploaded !!", Page);
                }
            }
            return sb;
        }
        catch (Exception Ex)
        {

            sb = new StringBuilder();
            return sb;
        }
    }
    #endregion
    private string PrintReport(bool sign)
    {
        if (Session["OPIP"].ToString() == "O")
            IsOPDSummary = true;
        string EMRServicePrintSeperatedWithCommas = common.GetFlagValueHospitalSetup(common.myInt(Session["HospitalLocationId"]),
                                  common.myInt(Session["FacilityId"]), "EMRServicePrintSeperatedWithCommas", sConString);
        string EmrPrecriptionWithLineBreak = common.GetFlagValueHospitalSetup(common.myInt(Session["HospitalLocationId"]),
                                  common.myInt(Session["FacilityId"]), "EmrPrecriptionWithLineBreak", sConString); ;
        string strDisplayEnteredByInCaseSheet = common.myStr(Session["DisplayEnteredByInCaseSheet"]);
        Session["DisplayEnteredByInCaseSheet"] = string.Empty;

        StringBuilder sb = new StringBuilder();
        StringBuilder sbTemplateStyle = new StringBuilder();
        StringBuilder TemplateString;
        DataSet ds = new DataSet();
        DataSet dsTemplateStyle = new DataSet();
        DataRow drTemplateStyle = null;
        DataTable dtTemplate = new DataTable();
        DataView dvDataFilter = new DataView();
        DataTable dtEncounter = new DataTable();

        string Templinespace = "";
        BindNotes bnotes = new BindNotes(sConString);
        BaseC.DiagnosisDA fun = new BaseC.DiagnosisDA(sConString);
        BaseC.clsEMR emr = new BaseC.clsEMR(sConString);
        StringBuilder sbTemp = new StringBuilder();
        bool bAllergyDisplay = false;
        bool bPatientBookingDisplay = false;

        //sb.Append(getReportHeader(common.myInt(ddlReport.SelectedValue)));

        string getReportHeaderText = common.myStr(getReportHeader(common.myInt(ViewState["reportid"])));

        clsIVF objIVF = new clsIVF(sConString);

        string strPatientHeader = objIVF.getCustomizedPatientReportHeader(common.myInt(ViewState["headerid"]));


        if (common.myLen(strPatientHeader).Equals(0))
        {
            // sb.Append(getIVFPatient().ToString());
            // Session["strPatientHeader"] = getIVFPatient().ToString();
            Session["strPatientHeader"] = common.myStr(getReportHeaderText) + getIVFPatient().ToString();
        }
        else
        {
            //  Session["strPatientHeader"] = strPatientHeader;
            Session["strPatientHeader"] = common.myStr(getReportHeaderText) + strPatientHeader;
            //sb.Append(strPatientHeader);
        }

        string sTemplateName = common.myStr("ALL") == "ALL" ? "" : common.myStr("ALL");

        #region Declare DataSet
        DataSet dsTemplateData = new DataSet();
        #endregion
        #region Call Bind Case Sheet class
        BindCaseSheet BindCaseSheet = new BindCaseSheet(sConString);
        #endregion
        try
        {
            string DoctorId = fun.GetDoctorId(common.myInt(Session["HospitalLocationID"]), Convert.ToInt16(common.myInt(Session["UserID"])));
            dsTemplateStyle = bnotes.GetTemplateStyle(common.myInt(Session["HospitalLocationId"]));

            #region Call Bind Case Sheet method to get data
            dsTemplateData = emr.getEMRPrintCaseSheetDate(common.myInt(Session["HospitalLocationId"]),
                                    common.myInt(Session["FacilityId"]), common.myInt(Session["registrationid"]), common.myInt(Session["EncounterId"]),
                                    common.myDate(Session["EncounterDate"]).ToString("yyyy/MM/dd"),
                                    DateTime.Now.ToString("yyyy/MM/dd"), //Session["EncounterDate"]
                                    string.Empty, 0, string.Empty, false, common.myInt(ViewState["reportid"]));
            #endregion

            dvDataFilter = new DataView(dsTemplateData.Tables[21]);
            dtEncounter = dsTemplateData.Tables[22];
            for (int iEn = 0; iEn < dtEncounter.Rows.Count; iEn++)
            {
                if (dvDataFilter.ToTable().Rows.Count > 0)
                {
                    #region Template Wise
                    {
                        dtTemplate = dvDataFilter.ToTable();
                        TemplateString = new StringBuilder();
                        for (int i = 0; i < dtTemplate.Rows.Count; i++)
                        {



                            #region Admission Request
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "AdmissionRequest"
                                    && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "S" && bPatientBookingDisplay == false)
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                #region Call Bind Patient Booking
                                sbTemp = new StringBuilder();
                                BindCaseSheet.BindPatientBooking(dsTemplateData.Tables[20], sbTemp, sbTemplateStyle, drTemplateStyle,
                                                   Page, common.myStr(dtTemplate.Rows[i]["PageId"]), "");
                                if (sbTemp.ToString() != "")
                                {


                                    if (EmrPrecriptionWithLineBreak == "N")

                                        TemplateString.Append(sbTemp);
                                    else
                                        TemplateString.Append(sbTemp + "<br/>");


                                }
                                bPatientBookingDisplay = true;
                                #endregion
                            }
                            #endregion
                            #region Chief Complaints
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "Chief Complaints"
                                 && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "S")
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";

                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);

                                }
                                dv.Dispose();
                                sbTemp = new StringBuilder();
                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //     || (common.myInt(ddlTemplatePatient.SelectedValue) == 98))
                                //{
                                #region Call Bind Problem data
                                BindCaseSheet.BindProblemsHPI(dsTemplateData.Tables[0], common.myInt(ViewState["RegistrationId"]), common.myInt(dtEncounter.Rows[iEn]["EncounterId"]), sbTemp, sbTemplateStyle, drTemplateStyle,
                                               Page, common.myStr(dtTemplate.Rows[i]["PageId"]), "", true);
                                #endregion
                                if (sbTemp.ToString() != "")
                                {

                                    //if (EmrPrecriptionWithLineBreak == "N")

                                    //    TemplateString.Append(sbTemp);
                                    //else
                                    TemplateString.Append(sbTemp + "<br/>");

                                }
                                sbTemp = null;
                                sbTemplateStyle = null;
                                //}

                                drTemplateStyle = null;
                                Templinespace = "";
                            }
                            #endregion
                            #region Template History Type
                            if (common.myStr(dtTemplate.Rows[i]["TemplateId"]).Trim() != ""
                               && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "D"
                               && common.myStr(dtTemplate.Rows[i]["TemplateCode"]).Trim() == "HIS")
                            {
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["TemplateId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                sbTemp = new StringBuilder();
                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //    || (common.myInt(ddlTemplatePatient.SelectedValue) == common.myInt(dtTemplate.Rows[i]["TemplateId"])))
                                //{
                                #region Assign Data and call History Type Dynamic Template
                                DataSet dsDymanicTemplateData = new DataSet();

                                DataView dvDyTable1 = new DataView(dsTemplateData.Tables[14]);
                                DataView dvDyTable2 = new DataView(dsTemplateData.Tables[15]);
                                DataView dvDyTable3 = new DataView(dsTemplateData.Tables[16]);
                                DataView dvDyTable4 = new DataView(dsTemplateData.Tables[17]);
                                DataView dvDyTable5 = new DataView(dsTemplateData.Tables[18]);
                                DataView dvDyTable6 = new DataView(dsTemplateData.Tables[19]);
                                DataTable dtDyTempTable = new DataTable();

                                dvDyTable1.ToTable().TableName = "TemplateSectionName";
                                dvDyTable6.ToTable().TableName = "TabularTemplateFieldStyle";
                                if (common.myInt(0) == 0)
                                {
                                    dvDyTable1.RowFilter = "TemplateId=" + common.myStr(dtTemplate.Rows[i]["TemplateId"]);
                                    dvDyTable4.RowFilter = "TemplateId=" + common.myStr(dtTemplate.Rows[i]["TemplateId"]);
                                    dvDyTable6.RowFilter = "TemplateId=" + common.myStr(dtTemplate.Rows[i]["TemplateId"]);
                                    dtDyTempTable = dvDyTable4.ToTable();
                                    dvDyTable4.Sort = "RecordId ASC";
                                }
                                else
                                {
                                    dvDyTable1.RowFilter = "TemplateId=" + common.myStr(0);
                                    dvDyTable4.RowFilter = "TemplateId=" + common.myStr(0);
                                    dvDyTable6.RowFilter = "TemplateId=" + common.myStr(0);
                                    dtDyTempTable = dvDyTable4.ToTable();
                                    dvDyTable4.Sort = "RecordId ASC";
                                }
                                string sSectionId = "0";
                                for (int iS = 0; iS < dvDyTable1.ToTable().Rows.Count; iS++)
                                {
                                    sSectionId = iS == 0 ? "'" + dvDyTable1.ToTable().Rows[iS]["SectionId"].ToString() + "'"
                                        : sSectionId + ", '" + dvDyTable1.ToTable().Rows[iS]["SectionId"].ToString() + "'";
                                }
                                dvDyTable2.ToTable().TableName = "FieldName";
                                dvDyTable2.RowFilter = "SectionId IN (" + sSectionId + ")";
                                dvDyTable6.RowFilter = "SectionId IN (" + sSectionId + ")";

                                dvDyTable3.ToTable().TableName = "PatientValue";
                                if (dvDyTable3.ToTable().Rows.Count > 0)
                                {
                                    dvDyTable3.RowFilter = "SectionId IN (" + sSectionId + ") AND EncounterId=" + common.myInt(dtEncounter.Rows[iEn]["EncounterId"]);
                                }
                                if (dvDyTable4.ToTable().Rows.Count > 0)
                                {
                                    dvDyTable4.RowFilter = "SectionId IN (" + sSectionId + ") AND EncounterId=" + common.myInt(dtEncounter.Rows[iEn]["EncounterId"]);
                                }

                                dsDymanicTemplateData.Tables.Add(dvDyTable1.ToTable());
                                dsDymanicTemplateData.Tables.Add(dvDyTable2.ToTable());
                                dsDymanicTemplateData.Tables.Add(dvDyTable3.ToTable());

                                if (dvDyTable4.ToTable().Rows.Count > 0)
                                {
                                    dsDymanicTemplateData.Tables.Add(dtDyTempTable);
                                }
                                else
                                {
                                    dsDymanicTemplateData.Tables.Add(dvDyTable4.ToTable());
                                }
                                dsDymanicTemplateData.Tables.Add(dvDyTable5.ToTable());
                                dsDymanicTemplateData.Tables.Add(dvDyTable6.ToTable());
                                if (dsDymanicTemplateData.Tables[2].Rows.Count > 0 || dsDymanicTemplateData.Tables[3].Rows.Count > 0)
                                {
                                    bindData(dsDymanicTemplateData, common.myStr(dtTemplate.Rows[i]["TemplateId"]), sbTemp, "", common.myStr(dtTemplate.Rows[i]["SectionId"]));
                                    if (sbTemp.Length > 20)
                                    {

                                        if (EmrPrecriptionWithLineBreak == "N")

                                            TemplateString.Append(sbTemp);
                                        else
                                            TemplateString.Append(sbTemp + "<br/>");
                                    }
                                }

                                sbTemp = null;
                                dsDymanicTemplateData.Dispose();
                                dvDyTable1.Dispose();
                                dvDyTable2.Dispose();
                                dvDyTable3.Dispose();
                                dvDyTable4.Dispose();
                                dvDyTable5.Dispose();
                                dvDyTable6.Dispose();
                                dtDyTempTable.Dispose();
                                sSectionId = "";
                                #endregion
                                //}

                                Templinespace = "";
                            }
                            #endregion
                            #region Allergy
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "Allergies"
                                 && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "S" && bAllergyDisplay == false)
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                drTemplateStyle = null;// = dv[0].Row;
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                sbTemp = new StringBuilder();

                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //     || (common.myInt(ddlTemplatePatient.SelectedValue) == 8))
                                //{
                                #region Call Allergy template data
                                BindCaseSheet.BindAllergies(dsTemplateData.Tables[1], sbTemp, sbTemplateStyle, drTemplateStyle, Page,
                                           common.myStr(dtTemplate.Rows[i]["PageID"]), 0, "", true);
                                #endregion
                                if (sbTemp.ToString() != "")
                                {

                                    if (EmrPrecriptionWithLineBreak == "N")

                                        TemplateString.Append(sbTemp);
                                    else
                                        TemplateString.Append(sbTemp + "<br/>");
                                    bAllergyDisplay = true;
                                }
                                sbTemp = null;
                                sbTemplateStyle = null;
                            }
                            drTemplateStyle = null;
                            Templinespace = "";
                            //}
                            #endregion
                            #region Vital
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "Vitals"
                                 && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "S")
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                sbTemp = new StringBuilder();

                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //     || (common.myInt(ddlTemplatePatient.SelectedValue) == 14))
                                //{
                                #region Call Vital Template data
                                BindCaseSheet.BindVitals(dsTemplateData.Tables[11], sbTemp, sbTemplateStyle, drTemplateStyle,
                                                    Page, common.myStr(dtTemplate.Rows[i]["PageId"]), 0, "", common.myInt(dtEncounter.Rows[iEn]["EncounterId"]), true);

                                #endregion
                                if (sbTemp.ToString() != "")
                                {

                                    if (EmrPrecriptionWithLineBreak == "N")

                                        TemplateString.Append(sbTemp);
                                    else
                                        TemplateString.Append(sbTemp + "<br/>");

                                }
                                sbTemp = null;
                                sbTemplateStyle = null;
                                //}

                                drTemplateStyle = null;
                                Templinespace = "";

                            }
                            #endregion
                            #region All the Templates except Hitory and Plan of case
                            if (common.myStr(dtTemplate.Rows[i]["TemplateId"]).Trim() != ""
                                && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "D"
                                && common.myStr(dtTemplate.Rows[i]["TemplateCode"]).Trim() != "POC"
                                && common.myStr(dtTemplate.Rows[i]["TemplateCode"]).Trim() != "HIS")
                            {
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["TemplateId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                sbTemp = new StringBuilder();
                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //    || (common.myInt(ddlTemplatePatient.SelectedValue) == common.myInt(dtTemplate.Rows[i]["TemplateId"])))
                                //{
                                #region Assign Data and call all Dynamic Template Except Hostory and Plan of Care template

                                DataSet dsDymanicTemplateData = new DataSet();

                                DataView dvDyTable1 = new DataView(dsTemplateData.Tables[14]); // Section Detail
                                DataView dvDyTable2 = new DataView(dsTemplateData.Tables[15]); // field detail
                                DataView dvDyTable3 = new DataView(dsTemplateData.Tables[16]); // Values
                                DataView dvDyTable4 = new DataView(dsTemplateData.Tables[17]);
                                DataView dvDyTable5 = new DataView(dsTemplateData.Tables[18]);
                                DataView dvDyTable6 = new DataView(dsTemplateData.Tables[19]);
                                DataView dvDyTable7 = new DataView(dsTemplateData.Tables[21]); // EMRTemplateReportSetup
                                DataTable dtDyTempTable = new DataTable();

                                dvDyTable1.ToTable().TableName = "TemplateSectionName";
                                dvDyTable6.ToTable().TableName = "TabularTemplateFieldStyle";
                                if (common.myInt(0) == 0)
                                {
                                    dvDyTable1.RowFilter = "TemplateId=" + common.myStr(dtTemplate.Rows[i]["TemplateId"]);
                                    dvDyTable4.RowFilter = "TemplateId=" + common.myStr(dtTemplate.Rows[i]["TemplateId"]);
                                    dvDyTable6.RowFilter = "TemplateId=" + common.myStr(dtTemplate.Rows[i]["TemplateId"]);
                                    dtDyTempTable = dvDyTable4.ToTable();
                                    dvDyTable4.Sort = "RecordId ASC";
                                }
                                else
                                {
                                    dvDyTable1.RowFilter = "TemplateId=" + common.myStr(0);//KuldeepAll
                                    dvDyTable4.RowFilter = "TemplateId=" + common.myStr(0);
                                    dvDyTable6.RowFilter = "TemplateId=" + common.myStr(0);
                                    dtDyTempTable = dvDyTable4.ToTable();
                                    dvDyTable4.Sort = "RecordId ASC";
                                }
                                string sSectionId = "0";
                                for (int iS = 0; iS < dvDyTable1.ToTable().Rows.Count; iS++)
                                {
                                    sSectionId = iS == 0 ? "'" + dvDyTable1.ToTable().Rows[iS]["SectionId"].ToString() + "'"
                                        : sSectionId + ", '" + dvDyTable1.ToTable().Rows[iS]["SectionId"].ToString() + "'";
                                }
                                dvDyTable2.ToTable().TableName = "FieldName";
                                dvDyTable2.RowFilter = "SectionId IN (" + sSectionId + ")";
                                dvDyTable6.RowFilter = "SectionId IN (" + sSectionId + ")";

                                dvDyTable3.ToTable().TableName = "PatientValue";
                                if (dvDyTable3.ToTable().Rows.Count > 0)
                                {
                                    dvDyTable3.RowFilter = "SectionId IN (" + sSectionId + ") AND EncounterId=" + common.myInt(dtEncounter.Rows[iEn]["EncounterId"]);
                                }
                                if (dvDyTable4.ToTable().Rows.Count > 0)
                                {
                                    dvDyTable4.RowFilter = "SectionId IN (" + sSectionId + ") AND EncounterId=" + common.myInt(dtEncounter.Rows[iEn]["EncounterId"]);
                                }

                                dsDymanicTemplateData.Tables.Add(dvDyTable1.ToTable());
                                dsDymanicTemplateData.Tables.Add(dvDyTable2.ToTable());
                                dsDymanicTemplateData.Tables.Add(dvDyTable3.ToTable());


                                if (dvDyTable4.ToTable().Rows.Count > 0)
                                {
                                    dsDymanicTemplateData.Tables.Add(dtDyTempTable);
                                }
                                else
                                {
                                    dsDymanicTemplateData.Tables.Add(dvDyTable4.ToTable());
                                }
                                dsDymanicTemplateData.Tables.Add(dvDyTable5.ToTable());
                                dsDymanicTemplateData.Tables.Add(dvDyTable6.ToTable());
                                if (dsDymanicTemplateData.Tables[2].Rows.Count > 0 || dsDymanicTemplateData.Tables[3].Rows.Count > 0)
                                {

                                    bindData(dsDymanicTemplateData, common.myStr(dtTemplate.Rows[i]["TemplateId"]), sbTemp, "", common.myStr(dtTemplate.Rows[i]["SectionId"]));
                                    if (sbTemp.Length > 20)
                                    {

                                        if (EmrPrecriptionWithLineBreak == "N")

                                            TemplateString.Append(sbTemp);
                                        else
                                            TemplateString.Append(sbTemp + "<br/>");

                                    }
                                }
                                sbTemp = null;
                                dvDyTable1.Dispose();
                                dvDyTable2.Dispose();
                                dvDyTable3.Dispose();
                                dvDyTable4.Dispose();
                                dvDyTable5.Dispose();
                                dvDyTable6.Dispose();
                                dtDyTempTable.Dispose();
                                dsDymanicTemplateData.Dispose();
                                sSectionId = "";
                                #endregion
                                //}

                                Templinespace = "";
                            }
                            #endregion
                            #region Lab
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "Lab Test Result"
                                && common.myStr(dtTemplate.Rows[i]["DataStatus"]).Trim() == "AVAILABLE")
                            {
                                string strTemplateType = common.myStr(dtTemplate.Rows[i]["PageIdentification"]);
                                strTemplateType = strTemplateType.Substring(0, 1);
                                //sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                sbTemp = new StringBuilder();

                                // bnotes.BindLabTestResult(common.myInt(Session["RegistrationId"]), HospitalId, EncounterId, UserId, DoctorId, sbTemp, sbTemplateStyle, drTemplateStyle, Page, common.myInt(Session["FacilityID"]), common.myStr(dtTemplate.Rows[i]["PageId"]), common.myStr(Session["UserID"]));

                                if (EmrPrecriptionWithLineBreak == "N")

                                    TemplateString.Append(sbTemp);
                                else
                                    TemplateString.Append(sbTemp + "<br/>");
                                drTemplateStyle = null;

                                sbTemp = null;
                                Templinespace = "";
                            }
                            #endregion
                            #region Diagnosis
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "Diagnosis With ICD Code"
                               && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "S")
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                sbTemp = new StringBuilder();

                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //     || (common.myInt(ddlTemplatePatient.SelectedValue) == 133))
                                //{
                                #region Call Diagnosis Template Data
                                if (common.GetFlagValueHospitalSetup(common.myInt(Session["HospitalLocationId"]),
                                                       common.myInt(Session["FacilityId"]), "IsShowEMRDiagnosisInTabularFormat", sConString).Equals("Y"))
                                {
                                    BindCaseSheet.BindTabularAssessments(dsTemplateData.Tables[4], sbTemp, sbTemplateStyle, drTemplateStyle, Page,
                                        common.myStr(dtTemplate.Rows[i]["PageId"]), common.myStr(Session["UserID"]),
                                        0, common.myInt(dtEncounter.Rows[iEn]["EncounterId"]), "", string.Empty, true);
                                }
                                else
                                {
                                    BindCaseSheet.BindAssessments(dsTemplateData.Tables[4], sbTemp, sbTemplateStyle, drTemplateStyle, Page,
                                               common.myStr(dtTemplate.Rows[i]["PageId"]), common.myStr(Session["UserID"]),
                                               0, common.myInt(dtEncounter.Rows[iEn]["EncounterId"]), "", common.myStr(ViewState["IsShowDiagnosisGroupHeading"]), true);
                                }
                                #endregion

                                if (sbTemp.Length > 20)
                                {


                                    if (EmrPrecriptionWithLineBreak == "N")

                                        TemplateString.Append(sbTemp);
                                    else
                                        TemplateString.Append(sbTemp + "<br/>");


                                }
                                sbTemp = null;
                                sbTemplateStyle = null;
                                //}
                                drTemplateStyle = null;
                                Templinespace = "";
                            }
                            #endregion
                            #region Provisional Diagnosis
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "Diagnosis"
                                 && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "S")
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                sbTemp = new StringBuilder();
                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //     || (common.myInt(ddlTemplatePatient.SelectedValue) == 1085))
                                //{
                                #region Call Provisional Diagnosis template data
                                BindCaseSheet.BindPatientProvisionalDiagnosis(dsTemplateData.Tables[2],
                                           Request.QueryString["DoctorId"] != null ? Request.QueryString["DoctorId"].ToString() : DoctorId, sbTemp, sbTemplateStyle, drTemplateStyle, Page,
                                           common.myStr(dtTemplate.Rows[i]["PageId"]), common.myStr(Session["UserID"]),
                                            0, common.myInt(dtEncounter.Rows[iEn]["EncounterId"]), "", true);
                                #endregion

                                if (sbTemp.Length > 20)
                                {


                                    if (EmrPrecriptionWithLineBreak == "N")

                                        TemplateString.Append(sbTemp);
                                    else
                                        TemplateString.Append(sbTemp + "<br/>");



                                }
                                sbTemp = null;
                                sbTemplateStyle = null;
                                //}
                                drTemplateStyle = null;
                                Templinespace = "";
                            }
                            #endregion
                            #region Template Plan of Care
                            if (common.myStr(dtTemplate.Rows[i]["TemplateId"]).Trim() != ""
                                 && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "D"
                                && common.myStr(dtTemplate.Rows[i]["TemplateCode"]).Trim() == "POC")
                            {
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["TemplateId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                sbTemp = new StringBuilder();
                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //    || (common.myInt(ddlTemplatePatient.SelectedValue) == common.myInt(dtTemplate.Rows[i]["TemplateId"])))
                                //{
                                #region Assign Data and call Dynamic Template Plan of Care
                                DataSet dsDymanicTemplateData = new DataSet();

                                DataView dvDyTable1 = new DataView(dsTemplateData.Tables[14]);
                                DataView dvDyTable2 = new DataView(dsTemplateData.Tables[15]);
                                DataView dvDyTable3 = new DataView(dsTemplateData.Tables[16]);
                                DataView dvDyTable4 = new DataView(dsTemplateData.Tables[17]);
                                DataView dvDyTable5 = new DataView(dsTemplateData.Tables[18]);
                                DataView dvDyTable6 = new DataView(dsTemplateData.Tables[19]);
                                DataTable dtDyTempTable = new DataTable();

                                dvDyTable1.ToTable().TableName = "TemplateSectionName";
                                dvDyTable6.ToTable().TableName = "TabularTemplateFieldStyle";
                                if (common.myInt(0) == 0)
                                {
                                    dvDyTable1.RowFilter = "TemplateId=" + common.myStr(dtTemplate.Rows[i]["TemplateId"]);
                                    dvDyTable4.RowFilter = "TemplateId=" + common.myStr(dtTemplate.Rows[i]["TemplateId"]);
                                    dvDyTable6.RowFilter = "TemplateId=" + common.myStr(dtTemplate.Rows[i]["TemplateId"]);
                                    dtDyTempTable = dvDyTable4.ToTable();
                                    dvDyTable4.Sort = "RecordId ASC";
                                }
                                else
                                {
                                    dvDyTable1.RowFilter = "TemplateId=" + common.myStr("0"); // KuldeepAll
                                    dvDyTable4.RowFilter = "TemplateId=" + common.myStr("0");
                                    dvDyTable6.RowFilter = "TemplateId=" + common.myStr("0");
                                    dtDyTempTable = dvDyTable4.ToTable();
                                    dvDyTable4.Sort = "RecordId ASC";
                                }

                                string sSectionId = "0";
                                for (int iS = 0; iS < dvDyTable1.ToTable().Rows.Count; iS++)
                                {
                                    sSectionId = iS == 0 ? "'" + dvDyTable1.ToTable().Rows[iS]["SectionId"].ToString() + "'"
                                        : sSectionId + ", '" + dvDyTable1.ToTable().Rows[iS]["SectionId"].ToString() + "'";
                                }
                                dvDyTable2.ToTable().TableName = "FieldName";
                                dvDyTable2.RowFilter = "SectionId IN (" + sSectionId + ")";
                                dvDyTable6.RowFilter = "SectionId IN (" + sSectionId + ")";

                                dvDyTable3.ToTable().TableName = "PatientValue";
                                if (dvDyTable3.ToTable().Rows.Count > 0)
                                {
                                    dvDyTable3.RowFilter = "SectionId IN (" + sSectionId + ") AND EncounterId=" + common.myInt(dtEncounter.Rows[iEn]["EncounterId"]);
                                }
                                if (dvDyTable4.ToTable().Rows.Count > 0)
                                {
                                    dvDyTable4.RowFilter = "SectionId IN (" + sSectionId + ") AND EncounterId=" + common.myInt(dtEncounter.Rows[iEn]["EncounterId"]);
                                }

                                dsDymanicTemplateData.Tables.Add(dvDyTable1.ToTable());
                                dsDymanicTemplateData.Tables.Add(dvDyTable2.ToTable());
                                dsDymanicTemplateData.Tables.Add(dvDyTable3.ToTable());

                                if (dvDyTable4.ToTable().Rows.Count > 0)
                                {
                                    dsDymanicTemplateData.Tables.Add(dtDyTempTable);
                                }
                                else
                                {
                                    dsDymanicTemplateData.Tables.Add(dvDyTable4.ToTable());
                                }
                                dsDymanicTemplateData.Tables.Add(dvDyTable5.ToTable());
                                dsDymanicTemplateData.Tables.Add(dvDyTable6.ToTable());
                                if (dsDymanicTemplateData.Tables[2].Rows.Count > 0 || dsDymanicTemplateData.Tables[3].Rows.Count > 0)
                                {
                                    bindData(dsDymanicTemplateData, common.myStr(dtTemplate.Rows[i]["TemplateId"]), sbTemp, "", "");
                                    if (sbTemp.Length > 20)
                                    {

                                        if (EmrPrecriptionWithLineBreak == "N")

                                            TemplateString.Append(sbTemp);
                                        else
                                            TemplateString.Append(sbTemp + "<br/>");
                                    }
                                }
                                sbTemp = null;

                                dvDyTable1.Dispose();
                                dvDyTable2.Dispose();
                                dvDyTable3.Dispose();
                                dvDyTable4.Dispose();
                                dvDyTable5.Dispose();
                                dvDyTable6.Dispose();
                                dtDyTempTable.Dispose();
                                dsDymanicTemplateData.Dispose();
                                sSectionId = "";
                                #endregion
                                //}

                                Templinespace = "";
                            }
                            #endregion
                            #region Orders And Procedures
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "Orders And Procedures"
                                 && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "S")
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                sbTemp = new StringBuilder();

                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //     || (common.myInt(ddlTemplatePatient.SelectedValue) == 17))
                                //{
                                #region Call Bind Order data
                                sbTemp = BindCaseSheet.BindOrders(dsTemplateData.Tables[8], DoctorId, sbTemp, sbTemplateStyle, drTemplateStyle,
                                               Page, common.myStr(dtTemplate.Rows[i]["PageId"]), common.myInt(dtEncounter.Rows[iEn]["EncounterId"]), string.Empty, EMRServicePrintSeperatedWithCommas, true, true);
                                #endregion


                                if (sbTemp.ToString() != "")
                                {


                                    if (EmrPrecriptionWithLineBreak == "N")

                                        TemplateString.Append(sbTemp);
                                    else
                                        TemplateString.Append(sbTemp + "<br/>");



                                }


                                sbTemp = null;
                                sbTemplateStyle = null;
                                //}

                                drTemplateStyle = null;
                                Templinespace = "";
                            }
                            #endregion
                            #region Prescription
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "Prescription"
                                && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "S")
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();

                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }

                                dv.Dispose();
                                sbTemp = new StringBuilder();

                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //     || (common.myInt(ddlTemplatePatient.SelectedValue) == 153))
                                //{
                                DataSet dsMedication = new DataSet();
                                DataView dvTable1 = new DataView(dsTemplateData.Tables[10]);

                                dvTable1.ToTable().TableName = "Item";

                                dvTable1.RowFilter = "EncounterId=" + common.myInt(dtEncounter.Rows[iEn]["EncounterId"]);


                                dsMedication.Tables.Add(dvTable1.ToTable());


                                dvTable1.Dispose();
                                string PrescriptionPrintInTabularFormat = common.GetFlagValueHospitalSetup(common.myInt(Session["HospitalLocationId"]),
                                          common.myInt(Session["FacilityId"]), "PrescriptionPrintInTabularFormat", sConString);

                                #region Call Medication Template data
                                sbTemp = BindCaseSheet.BindMedication(dsMedication, sbTemp, sbTemplateStyle, drTemplateStyle, Page, common.myStr(dtTemplate.Rows[i]["PageId"]),
                                               common.myInt(Session["UserID"]).ToString(), string.Empty, 0, PrescriptionPrintInTabularFormat, string.Empty, true);
                                #endregion

                                dsMedication.Dispose();
                                if (sbTemp.ToString() != "")
                                {

                                    if (EmrPrecriptionWithLineBreak == "N")

                                        TemplateString.Append(sbTemp);
                                    else
                                        TemplateString.Append(sbTemp + "<br/>");
                                }

                                sbTemp = null;
                                sbTemplateStyle = null;
                                //}

                                drTemplateStyle = null;
                                Templinespace = "";
                            }
                            #endregion
                            #region Non Drug Order
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "Non Drug Order"
                                 && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "S")
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                sbTemp = new StringBuilder();
                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //     || (common.myInt(ddlTemplatePatient.SelectedValue) == 1166))
                                //{
                                #region Call Non Drug Order template data
                                BindCaseSheet.BindNonDrugOrder(dsTemplateData.Tables[7], sbTemp, sbTemplateStyle, drTemplateStyle, Page, "0",
                                                  common.myInt(dtEncounter.Rows[iEn]["EncounterId"]), "", true);
                                #endregion
                                if (sbTemp.ToString() != "")
                                {

                                    if (EmrPrecriptionWithLineBreak == "N")

                                        TemplateString.Append(sbTemp);
                                    else
                                        TemplateString.Append(sbTemp + "<br/>");
                                }
                                sbTemp = null;
                                sbTemplateStyle = null;
                                //}
                                drTemplateStyle = null;
                                Templinespace = "";
                            }
                            #endregion
                            #region Diet Order
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "Diet Order"
                                 && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "S")
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();

                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }

                                dv.Dispose();
                                sbTemp = new StringBuilder();

                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //     || (common.myInt(ddlTemplatePatient.SelectedValue) == 1172))
                                //{
                                #region Call Diet Order data
                                BindCaseSheet.BindDietOrderInNote(dsTemplateData.Tables[9], sbTemp, sbTemplateStyle, drTemplateStyle, Page, "0", "",
                                    common.myInt(dtEncounter.Rows[iEn]["EncounterId"]));
                                #endregion

                                if (sbTemp.ToString() != "")
                                {

                                    if (EmrPrecriptionWithLineBreak == "N")

                                        TemplateString.Append(sbTemp);
                                    else
                                        TemplateString.Append(sbTemp + "<br/>");
                                }
                                sbTemp = null;
                                sbTemplateStyle = null;
                                //}

                                drTemplateStyle = null;
                                Templinespace = "";
                            }
                            #endregion
                            #region Doctor Progress Note
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "Doctor Progress Note"
                                 && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "S")
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                sbTemp = new StringBuilder();
                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //     || (common.myInt(ddlTemplatePatient.SelectedValue) == 1013))
                                //{
                                #region Call Doctor Progress Note template data
                                BindCaseSheet.BindDoctorProgressNote(dsTemplateData.Tables[3], sbTemp, sbTemplateStyle, drTemplateStyle, Page,
                                           common.myStr(dtTemplate.Rows[i]["PageId"]), common.myStr(Session["UserID"]), "",
                                           common.myInt(dtEncounter.Rows[iEn]["EncounterId"]), true);
                                #endregion
                                if (sbTemp.ToString() != "")
                                {

                                    if (EmrPrecriptionWithLineBreak == "N")

                                        TemplateString.Append(sbTemp);
                                    else
                                        TemplateString.Append(sbTemp + "<br/>");
                                }
                                sbTemp = null;
                                sbTemplateStyle = null;
                                //}
                                Templinespace = "";
                            }
                            #endregion
                            #region Referal History
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "Referral History"
                                 && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "S")
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                sbTemp = new StringBuilder();

                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //     || (common.myInt(ddlTemplatePatient.SelectedValue) == 1081))
                                //{
                                StringBuilder temp1 = new StringBuilder();
                                #region Call Referral History Template Data
                                if (IsOPDSummary)
                                {
                                    BindCaseSheet.BindReferalHistory(dsTemplateData.Tables[5], sbTemp, sbTemplateStyle, drTemplateStyle, Page, "22639", common.myInt(dtEncounter.Rows[iEn]["EncounterId"]), ""); // 22639 PAGE ID FOR OP REFERRAL
                                }
                                else
                                {
                                    BindCaseSheet.BindReferalHistory(dsTemplateData.Tables[5], sbTemp, sbTemplateStyle, drTemplateStyle, Page, "0",
                                                               common.myInt(dtEncounter.Rows[iEn]["EncounterId"]), "");
                                }

                                #endregion
                                if (sbTemp.ToString() != "")
                                {

                                    if (EmrPrecriptionWithLineBreak == "N")

                                        TemplateString.Append(sbTemp);
                                    else
                                        TemplateString.Append(sbTemp + "<br/>");
                                }
                                sbTemp = null;
                                sbTemplateStyle = null;
                                //}
                                Templinespace = "";
                            }
                            #endregion
                            #region Current Medication
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "Current Medication"
                                && common.myStr(dtTemplate.Rows[i]["DataStatus"]).Trim() == "AVAILABLE")
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(common.myInt(drTemplateStyle["TemplateSpaceNumber"]) - 1);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                sbTemp = new StringBuilder();

                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //     || (common.myInt(ddlTemplatePatient.SelectedValue) == 10005))
                                //{
                                bnotes.BindMedication(common.myInt(ViewState["EncounterId"]), common.myInt(Session["HospitalLocationID"]), common.myInt(ViewState["RegistrationId"]), sbTemp, sbTemplateStyle, "C", drTemplateStyle,
                                                Page, common.myStr(dtTemplate.Rows[i]["PageId"]), common.myInt(Session["UserID"]).ToString(),
                                                common.myDate(Session["EncounterDate"]).ToString(),
                                                common.myDate(Session["EncounterDate"]).ToString(), common.myStr(ViewState["OPIP"]), "");
                                if (sbTemp.ToString() != "")
                                {

                                    if (EmrPrecriptionWithLineBreak == "N")

                                        TemplateString.Append(sbTemp);
                                    else
                                        TemplateString.Append(sbTemp + "<br/>");
                                }
                                sbTemp = null;
                                sbTemplateStyle = null;
                                //}

                                drTemplateStyle = null;
                                Templinespace = "";
                            }
                            #endregion
                            #region Immunization
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "Immunization"
                              && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "S")
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                sbTemp = new StringBuilder();

                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //     || (common.myInt(ddlTemplatePatient.SelectedValue) == 113))
                                //{
                                BindCaseSheet.BindImmunization(dsTemplateData.Tables[13], sbTemp, sbTemplateStyle, drTemplateStyle, Page,
                                            common.myStr(dtTemplate.Rows[i]["PageId"]), "", common.myInt(dtEncounter.Rows[iEn]["EncounterId"]));



                                if (sbTemp.ToString() != "")
                                    //TemplateString.Append(sbTemp + "<br/>");
                                    TemplateString.Append(sbTemp);
                                sbTemp = null;
                                sbTemplateStyle = null;
                                //}

                                Templinespace = "";

                                StringBuilder sbImmunizationDueDate = new StringBuilder();
                                StringBuilder sbTemplateStyleImmunizationDueDate = new StringBuilder();
                                if (dsTemplateData.Tables.Count.Equals(25))
                                {
                                    BindCaseSheet.BindImmunizationDueDate(dsTemplateData.Tables[24], sbImmunizationDueDate, sbTemplateStyleImmunizationDueDate, drTemplateStyle, Page,
                                           common.myStr(dtTemplate.Rows[i]["PageId"]), "", common.myInt(dtEncounter.Rows[iEn]["EncounterId"]));
                                    if (sbImmunizationDueDate.ToString() != "")
                                        TemplateString.Append(sbImmunizationDueDate + "<br/>");
                                    sbImmunizationDueDate = null;
                                    sbTemplateStyle = null;
                                }

                            }
                            #endregion
                            #region Daily Injection
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "Daily Injections"
                                && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "S")
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }

                                dv.Dispose();
                                sbTemp = new StringBuilder();

                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //     || (common.myInt(ddlTemplatePatient.SelectedValue) == 805))
                                //{
                                BindCaseSheet.BindInjection(dsTemplateData.Tables[12], sbTemp, sbTemplateStyle, drTemplateStyle, Page,
                                             common.myStr(dtTemplate.Rows[i]["PageId"]), "", common.myInt(dtEncounter.Rows[iEn]["EncounterId"]));


                                if (EmrPrecriptionWithLineBreak == "N")

                                    TemplateString.Append(sbTemp);
                                else
                                    TemplateString.Append(sbTemp + "<br/>");
                                sbTemp = null;
                                sbTemplateStyle = null;
                                //}
                                Templinespace = "";
                            }
                            #endregion
                            #region Follow-up Appointment
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim().ToUpper().Equals("FOLLOW UP APPOINTMENT")
                                && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "S")
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //     || (common.myInt(ddlTemplatePatient.SelectedValue) == 919))
                                //{
                                StringBuilder temp = new StringBuilder();
                                #region FollowUp Appointment
                                BindCaseSheet.GetEncounterFollowUpAppointment(dsTemplateData.Tables[6],
                                       temp, sbTemplateStyle, drTemplateStyle, Page, "", common.myInt(dtEncounter.Rows[iEn]["EncounterId"]));
                                #endregion


                                if (EmrPrecriptionWithLineBreak == "N")

                                    TemplateString.Append(sbTemp);
                                else
                                    TemplateString.Append(sbTemp + "<br/>");
                                temp = null;
                                sbTemplateStyle = null;
                                //}
                                Templinespace = "";
                            }
                            #endregion
                            #region Drug Administration
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim().ToUpper().Equals("DRUG ADMINISTRATION")
                                 && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim().Equals("S"))
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = string.Empty;
                                    string sEnd = string.Empty;
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv = new DataView();
                                sbTemp = new StringBuilder();
                                if ((common.myInt(ViewState["templateid_new"]).Equals(0))
                                     || (common.myInt(ViewState["templateid_new"]).Equals(22618)))
                                {
                                    #region Call Drug Administration data
                                    if (dsTemplateData.Tables.Count > 22)
                                    {
                                        BindCaseSheet.bindDrugAdministration(dsTemplateData.Tables[23], sbTemp, sbTemplateStyle, drTemplateStyle,
                                                            Page, common.myStr(dtTemplate.Rows[i]["PageId"]), 0,
                                                            string.Empty, common.myInt(dtEncounter.Rows[iEn]["EncounterId"]));
                                    }
                                    #endregion
                                    if (!sbTemp.ToString().Equals(string.Empty))
                                    {

                                        if (EmrPrecriptionWithLineBreak == "N")

                                            TemplateString.Append(sbTemp);
                                        else
                                            //TemplateString.Append(sbTemp + "<br/>");
                                            TemplateString.Append(sbTemp + "<br/>" + "<br/>");
                                    }
                                    sbTemp = null;
                                    sbTemplateStyle = null;
                                }
                                drTemplateStyle = null;
                                Templinespace = string.Empty;
                            }
                            #endregion

                            //added by bhakti
                            #region OT Request
                            if (common.myStr(dtTemplate.Rows[i]["TemplateName"]).Trim() == "OT Request"
                                 && common.myStr(dtTemplate.Rows[i]["TemplateType"]).Trim() == "S")
                            {
                                sbTemplateStyle = new StringBuilder();
                                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                                dv.RowFilter = "PageId=" + common.myInt(dtTemplate.Rows[i]["PageId"]).ToString();
                                if (dv.Count > 0)
                                {
                                    drTemplateStyle = dv[0].Row;
                                    string sBegin = "", sEnd = "";
                                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                                }
                                dv.Dispose();
                                sbTemp = new StringBuilder();
                                //if ((common.myInt(ddlTemplatePatient.SelectedValue) == 0)
                                //     || (common.myInt(ddlTemplatePatient.SelectedValue) == 1013))
                                //{
                                #region Call OT Request Data
                                BindCaseSheet.BindOTRequest(dsTemplateData.Tables[26], sbTemp, sbTemplateStyle, drTemplateStyle, Page,
                                           common.myStr(dtTemplate.Rows[i]["PageID"]), 0, "", true);
                                #endregion
                                if (sbTemp.ToString() != "")
                                {

                                    if (EmrPrecriptionWithLineBreak == "N")

                                        TemplateString.Append(sbTemp);
                                    else
                                        TemplateString.Append(sbTemp + "<br/>");
                                }
                                sbTemp = null;
                                sbTemplateStyle = null;
                                //}
                                Templinespace = "";
                            }
                            #endregion

                        }
                        if (TemplateString.Length > 30)
                        {
                            //if (iEn == 0)
                            //{
                            //sb.Append("<span style='font-size:20px; font-family:Tohama;'>");
                            //sb.Append("<b><u>Initial Assessment</u></b><br/><br/>");
                            //sb.Append("</span>");
                            //}
                            sb.Append("<span style='" + String.Empty + "'>");
                            sb.Append(TemplateString);
                            //sb.Append("</span><br/>");
                            sb.Append("</span>");
                            TemplateString = null;
                        }
                    }
                    #endregion
                }
            }
            Session["NoAllergyDisplay"] = null;
            if (sign == true)
            {
                //sb.Append("</span>");
                sb.Append(hdnDoctorImage.Value);
            }
            else if (sign == false)
            {
                //if (RTF1.Content != null)
                //{
                //    if (RTF1.Content.Contains("dvDoctorImage") == true)
                //    {
                string signData = "";
                string st = "<div id=$dvDoctorImage$>";
                int start = signData.IndexOf(@st);
                if (start > 0)
                {
                    int End = signData.IndexOf("</div>", start);
                    StringBuilder sbte = new StringBuilder();
                    sbte.Append(signData.Substring(start, (End + 6) - start));
                    StringBuilder ne = new StringBuilder();
                    ne.Append(signData.Replace(sbte.ToString(), ""));
                    sb.Append(ne.Replace('$', '"').ToString());
                    sbte = null;
                    ne = null;
                    signData = "";
                    st = "";
                    start = 0;
                    End = 0;
                }
                //   }
                //}
            }
        }
        catch (Exception ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + ex.Message;

        }
        finally
        {
            Session["DisplayEnteredByInCaseSheet"] = strDisplayEnteredByInCaseSheet;

            sbTemplateStyle = null;
            TemplateString = null;
            ds.Dispose();
            dsTemplateStyle.Dispose();
            dvDataFilter.Dispose();
            drTemplateStyle = null;
            dtTemplate.Dispose();
            Templinespace = "";
            bnotes = null;
            fun = null;
            emr = null;
            sbTemp = null;
            BindCaseSheet = null;
            dsTemplateData.Dispose();
        }
        return sb.ToString().Replace("&lt", "&lt;").Replace("&gt", "&gt;");
    }
    protected void MakeFontWithoutListStyle(string typ, ref string sBegin, ref string sEnd, DataRow item)
    {
        //string sBegin = "", sEnd = "";
        ArrayList aEnd = new ArrayList();
        if (common.myStr(item[typ + "Forecolor"]) != ""
            || common.myStr(item[typ + "FontSize"]) != ""
            || common.myStr(item[typ + "FontStyle"]) != "")
        {
            sBegin += "<span style='";
            if (common.myStr(item[typ + "FontSize"]) != "")
            {
                sBegin += " font-size:" + item[typ + "FontSize"] + ";";
            }
            else
            {
                sBegin += getDefaultFontSize();
            }
            if (common.myStr(item[typ + "Forecolor"]) != "")
            {
                sBegin += " color: #" + item[typ + "Forecolor"] + ";";
            }
            if (common.myStr(item[typ + "FontStyle"]) != "")
            {
                sBegin += GetFontFamily(typ, item);
            }
        }

        if (common.myStr(item[typ + "Bold"]) == "True")
        {
            sBegin += " font-weight: bold;";
        }
        if (common.myStr(item[typ + "Italic"]) == "True")
        {
            sBegin += " font-style: italic;";
        }
        if (common.myStr(item[typ + "Underline"]) == "True")
        {
            sBegin += " text-decoration: underline;";
        }
        aEnd.Add("</span>");
        for (int i = aEnd.Count - 1; i >= 0; i--)
        {
            sEnd += aEnd[i];
        }
        if (sBegin != "")
        {
            sBegin += " '>";
        }
    }
    protected string GetFontFamily(string typ, DataRow item)
    {
        string FieldValue = "";
        string FontName = "";
        string sBegin = "";
        ClinicDefaults cd = new ClinicDefaults(Page);
        BaseC.EMRMasters.Fonts fonts = new BaseC.EMRMasters.Fonts();
        FontName = fonts.GetFont("Name", common.myStr(item[typ + "FontStyle"]));
        ViewState["CurrentTemplateFontName"] = string.Empty;
        ViewState["CurrentTemplateFontName"] = FontName;
        if (FontName != "")
        {
            sBegin += " font-family: " + FontName + ";";

            //sBegin += " font-family: " + FontName + ", sans-serif;";
        }
        else
        {
            FieldValue = cd.GetHospitalDefaults("DefaultFontType", common.myInt(Session["HospitalLocationId"]).ToString());
            if (FieldValue != "")
            {
                FontName = fonts.GetFont("Name", FieldValue);
                if (FontName != "")
                {
                    sBegin += " font-family: " + FontName + ";";
                }
            }
        }

        return sBegin;
    }

    public string getDefaultFontSize()
    {
        string sFontSize = "";
        string FieldValue = "";
        ClinicDefaults cd = new ClinicDefaults(Page);
        BaseC.EMRMasters.Fonts fonts = new BaseC.EMRMasters.Fonts();
        FieldValue = cd.GetHospitalDefaults("DefaultFontSize", common.myInt(Session["HospitalLocationId"]).ToString());
        if (FieldValue != "")
        {
            sFontSize = fonts.GetFont("Size", FieldValue);
            if (sFontSize != "")
            {
                sFontSize = " font-size: " + sFontSize + ";";
            }
        }
        return sFontSize;
    }

    protected void bindData(DataSet dsDynamicTemplateData, string TemplateId, StringBuilder sb, string GroupingDate, string SectionId)
    {
        //Awadhesh
        ViewState["iPrevId"] = null;
        //
        DataSet ds = new DataSet();
        DataSet dsAllNonTabularSectionDetails = new DataSet();
        DataSet dsAllTabularSectionDetails = new DataSet();
        DataSet dsAllFieldsDetails = new DataSet();

        DataTable dtFieldValue = new DataTable();
        DataTable dtEntry = new DataTable();
        DataTable dtFieldName = new DataTable();

        DataView dv = new DataView();
        DataView dv1 = new DataView();
        DataView dv2 = new DataView();

        DataRow dr3;

        StringBuilder objStrTmp = new StringBuilder();
        StringBuilder objStrSettings = new StringBuilder();
        StringBuilder str = new StringBuilder();
        string sEntryType = "V";
        string BeginList = string.Empty;
        string EndList = string.Empty;
        string BeginList2 = string.Empty;
        string BeginList3 = string.Empty;
        string EndList3 = string.Empty;
        string sBegin = string.Empty;
        string sEnd = string.Empty;

        int t = 0;
        int t2 = 0;
        int t3 = 0;
        int iRecordId = 0;
        DataView dvDyTable1 = new DataView();
        try
        {
            BeginList = string.Empty;
            EndList = string.Empty;
            BeginList2 = string.Empty;
            BeginList3 = string.Empty;
            EndList3 = string.Empty;

            t = 0;
            t2 = 0;
            t3 = 0;

            dvDyTable1 = new DataView(dsDynamicTemplateData.Tables[0]);
            DataView dvDyTable2 = new DataView(dsDynamicTemplateData.Tables[1]);
            DataView dvDyTable3 = new DataView(dsDynamicTemplateData.Tables[2]);

            dvDyTable1.ToTable().TableName = "TemplateSectionName";
            dvDyTable2.ToTable().TableName = "FieldName";
            dvDyTable3.ToTable().TableName = "PatientValue";
            dsAllNonTabularSectionDetails = new DataSet();
            if (SectionId != "" && common.myInt(SectionId) >= 0)
                dvDyTable1.RowFilter = "SectionId=" + SectionId;

            if (dvDyTable3.ToTable().Rows.Count > 0)
            {
                dsAllNonTabularSectionDetails.Tables.Add(dvDyTable2.ToTable());
                dsAllNonTabularSectionDetails.Tables.Add(dvDyTable3.ToTable());
            }
            dvDyTable2.Dispose();
            dvDyTable3.Dispose();

            dsDynamicTemplateData.Dispose();

            #region Non Tabular
            if (dsAllNonTabularSectionDetails.Tables.Count > 0 && dsAllNonTabularSectionDetails.Tables[1].Rows.Count > 0)
            {
                DataView dvNonTabular = new DataView(dvDyTable1.ToTable());
                dvNonTabular.RowFilter = "Tabular <> 1";
                if (dvNonTabular.ToTable().Rows.Count > 0)
                {
                    ds = new DataSet();
                    ds.Tables.Add(dvNonTabular.ToTable());//Section Name Table

                    dv = new DataView(dsAllNonTabularSectionDetails.Tables[1]);

                    if (!common.myStr(ViewState["ShowCaseSheetInASCOrder"]).Equals("Y"))
                    {
                        dv.Sort = "RecordId DESC";
                    }
                    //dv.Sort = "RecordId DESC";
                    dtEntry = dv.ToTable(true, "RecordId");
                    iRecordId = 0;
                    dv.Dispose();
                    dvNonTabular.Dispose();

                    for (int it = 0; it < dtEntry.Rows.Count; it++)
                    {
                        if (common.myInt(dtEntry.Rows[it]["RecordId"]) > 0)
                        {
                            foreach (DataRow item in ds.Tables[0].Rows)
                            {
                                dv1 = new DataView(dsAllNonTabularSectionDetails.Tables[0]);
                                dv1.RowFilter = "SectionId=" + common.myStr(item["SectionId"]);
                                dtFieldName = dv1.ToTable();

                                if (dsAllNonTabularSectionDetails.Tables.Count > 1)
                                {
                                    dv2 = new DataView(dsAllNonTabularSectionDetails.Tables[1]);
                                    dv2.RowFilter = "RecordId=" + common.myStr(dtEntry.Rows[it]["RecordId"]) + " AND SectionId=" + common.myStr(item["SectionId"]);
                                    dtFieldValue = dv2.ToTable();
                                    dv2.Dispose();
                                }

                                dsAllFieldsDetails = new DataSet();
                                dsAllFieldsDetails.Tables.Add(dtFieldName);
                                dsAllFieldsDetails.Tables.Add(dtFieldValue);

                                dtFieldName.Dispose();
                                dtFieldValue.Dispose();
                                dv1.Dispose();

                                if (dsAllNonTabularSectionDetails.Tables[0].Rows.Count > 0)
                                {
                                    if (dsAllNonTabularSectionDetails.Tables.Count > 1)
                                    {
                                        if (dsAllNonTabularSectionDetails.Tables[1].Rows.Count > 0)
                                        {
                                            sBegin = string.Empty;
                                            sEnd = string.Empty;
                                            dr3 = dsAllNonTabularSectionDetails.Tables[0].Rows[0];
                                            getabulerFontSize("Fields", ref sBegin, ref sEnd, dr3);
                                            ViewState["iTemplateId"] = common.myInt(item["TemplateId"]);

                                            str = new StringBuilder();
                                            if (dsAllFieldsDetails.Tables[1].Rows.Count > 0)
                                                if (common.myStr(dsAllFieldsDetails.Tables[1].Rows[0]["FieldValue"]).Length > 0)
                                                    str.Append(CreateString(dsAllFieldsDetails, common.myInt(item["TemplateId"]), common.myStr(item["TemplateName"]),
                                                                common.myStr(item["Tabular"]), item["SectionId"].ToString(), common.myStr(item["EntryType"]),
                                                                common.myInt(dtEntry.Rows[it]["RecordId"]), GroupingDate, common.myBool(item["IsConfidential"])));
                                            str.Replace("&lt", "<");
                                            str.Replace("&gt", ">");
                                            str.Append("<br/> ");
                                            if (str.Length == 11)
                                                str.Clear();
                                            dr3 = null;
                                            dsAllNonTabularSectionDetails.Dispose();
                                            dsAllFieldsDetails.Dispose();
                                            string sBreak = common.myBool(item["IsConfidential"]) == true ? "<br/>" : "";
                                            if (common.myInt(ViewState["iPrevId"]).Equals(common.myInt(item["TemplateId"])))
                                            {
                                                if (iRecordId != common.myInt(dtEntry.Rows[it]["RecordId"]))
                                                {
                                                    if (sEntryType.Equals("M"))
                                                    {
                                                        objStrTmp.Append("<br/>");
                                                    }
                                                }
                                                if (t2.Equals(0))
                                                {
                                                    if (t3.Equals(0))//Template
                                                    {
                                                        t3 = 1;
                                                        if (common.myInt(item["SectionsListStyle"]).Equals(1))
                                                        {
                                                            BeginList3 = "<ul>";
                                                            EndList3 = "</ul>";
                                                        }
                                                        else if (common.myInt(item["SectionsListStyle"]).Equals(2))
                                                        {
                                                            BeginList3 = "<ol>";
                                                            EndList3 = "</ol>";
                                                        }
                                                    }
                                                }

                                                if (common.myStr(item["SectionsBold"]) != string.Empty
                                                    || common.myStr(item["SectionsItalic"]) != string.Empty
                                                    || common.myStr(item["SectionsUnderline"]) != string.Empty
                                                    || common.myStr(item["SectionsFontSize"]) != string.Empty
                                                    || common.myStr(item["SectionsForecolor"]) != string.Empty
                                                    || common.myStr(item["SectionsListStyle"]) != string.Empty)
                                                {
                                                    sBegin = string.Empty;
                                                    sEnd = string.Empty;
                                                    MakeFont("Sections", ref sBegin, ref sEnd, item);
                                                    if (Convert.ToBoolean(item["SectionDisplayTitle"]))   //19June2010
                                                    {
                                                        if (!str.ToString().Trim().Equals(string.Empty))
                                                        {
                                                            objStrTmp.Append(BeginList3 + sBegin + common.myStr(item["SectionName"]) + sEnd); //    objStrTmp.Append("<br />" + BeginList3 + sBegin + item["SectionName"].ToString() + sEnd);
                                                        }
                                                    }
                                                    BeginList3 = string.Empty;
                                                }
                                                else
                                                {
                                                    if (Convert.ToBoolean(item["SectionDisplayTitle"]))    //19June
                                                    {
                                                        if (!str.ToString().Trim().Equals(string.Empty))
                                                        {
                                                            objStrTmp.Append(common.myStr(item["SectionName"])); //objStrTmp.Append("<br />" + item["SectionName"].ToString());
                                                        }
                                                    }
                                                }

                                                if (!str.ToString().Trim().Equals(string.Empty))
                                                {
                                                    if (common.myInt(item["SectionsListStyle"]).Equals(3)
                                                        || common.myInt(item["TemplateListStyle"]).Equals(0))
                                                    {
                                                        ////// objStrTmp.Append("<br />"); //code commented  for Examination (SectonName and fieldname getting extra space)
                                                    }
                                                    objStrTmp.Append(str.ToString());
                                                }
                                            }
                                            else
                                            {
                                                if (t.Equals(0))
                                                {
                                                    t = 1;
                                                    if (common.myInt(item["TemplateListStyle"]).Equals(1))
                                                    {
                                                        BeginList = "<ul>"; EndList = "</ul>";
                                                    }
                                                    else if (common.myInt(item["TemplateListStyle"]).Equals(2))
                                                    {
                                                        BeginList = "<ol>"; EndList = "</ol>";
                                                    }
                                                }
                                                if (common.myStr(item["TemplateBold"]) != string.Empty
                                                    || common.myStr(item["TemplateItalic"]) != string.Empty
                                                    || common.myStr(item["TemplateUnderline"]) != string.Empty
                                                    || common.myStr(item["TemplateFontSize"]) != string.Empty
                                                    || common.myStr(item["TemplateForecolor"]) != string.Empty
                                                    || common.myStr(item["TemplateListStyle"]) != string.Empty)
                                                {
                                                    sBegin = string.Empty;
                                                    sEnd = string.Empty;
                                                    MakeFont("Template", ref sBegin, ref sEnd, item);
                                                    if (Convert.ToBoolean(item["TemplateDisplayTitle"]))
                                                    {
                                                        if (sBegin.Contains("<br/>"))
                                                        {
                                                            sBegin = sBegin.Remove(0, 5);
                                                            objStrTmp.Append(BeginList + sBegin + sBreak + common.myStr(item["TemplateName"]) + sEnd + "<br/>");
                                                        }
                                                        else
                                                        {
                                                            objStrTmp.Append(BeginList + sBegin + sBreak + common.myStr(item["TemplateName"]) + sEnd + "<br/>");
                                                        }
                                                    }
                                                    if (sEntryType.Equals("M") && !str.ToString().Trim().Equals(string.Empty))
                                                    {
                                                        objStrTmp.Append("<br/>");
                                                    }
                                                    BeginList = string.Empty;
                                                }
                                                else
                                                {
                                                    if (common.myBool(item["TemplateDisplayTitle"]))
                                                    {
                                                        objStrTmp.Append(sBreak + common.myStr(item["TemplateName"]));//Default Setting
                                                    }
                                                    if (sEntryType.Equals("M") && !str.ToString().Trim().Equals(string.Empty))
                                                    {
                                                        objStrTmp.Append("<br/>");
                                                    }
                                                }
                                                if (common.myInt(item["TemplateListStyle"]).Equals(3)
                                                    || common.myInt(item["TemplateListStyle"]).Equals(0))
                                                {
                                                    //objStrTmp.Append("<br />");
                                                }

                                                objStrTmp.Append(EndList);
                                                if (t2.Equals(0))
                                                {
                                                    t2 = 1;
                                                    if (common.myInt(item["SectionsListStyle"]).Equals(1))
                                                    {
                                                        BeginList2 = "<ul>";
                                                        EndList3 = "</ul>";
                                                    }
                                                    else if (common.myInt(item["SectionsListStyle"]).Equals(2))
                                                    {
                                                        BeginList2 = "<ol>";
                                                        EndList3 = "</ol>";
                                                    }
                                                }
                                                if (common.myStr(item["SectionsBold"]) != string.Empty
                                                    || common.myStr(item["SectionsItalic"]) != string.Empty
                                                    || common.myStr(item["SectionsUnderline"]) != string.Empty
                                                    || common.myStr(item["SectionsFontSize"]) != string.Empty
                                                    || common.myStr(item["SectionsForecolor"]) != string.Empty
                                                    || common.myStr(item["SectionsListStyle"]) != string.Empty)
                                                {
                                                    sBegin = string.Empty;
                                                    sEnd = string.Empty;
                                                    MakeFont("Sections", ref sBegin, ref sEnd, item);

                                                    if (Convert.ToBoolean(item["SectionDisplayTitle"])) // Comment On 19June2010 hit1
                                                    {
                                                        if (!str.ToString().Trim().Equals(string.Empty)) //add 19June2010
                                                        {

                                                            if (sBegin.StartsWith("<br/>"))
                                                            {
                                                                if (sBegin.Length > 5)
                                                                {

                                                                    //sBegin = sBegin.Remove(0, 5);
                                                                    //objStrTmp.Append(BeginList + sBegin + sBreak + common.myStr(item["TemplateName"]) + sEnd + "<br/>");
                                                                    sBegin = sBegin.Substring(5, sBegin.Length - 5);
                                                                    objStrTmp.Append(BeginList2 + sBegin + common.myStr(item["SectionName"]) + sEnd);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                objStrTmp.Append(BeginList2 + sBegin + common.myStr(item["SectionName"]) + sEnd);

                                                            }

                                                            //if (sBegin.Contains("<br/>"))
                                                            //{
                                                            //    sBegin = sBegin.Remove(0, 5);
                                                            //    objStrTmp.Append(BeginList2 + sBegin + common.myStr(item["SectionName"]) + sEnd);
                                                            //}
                                                            //else
                                                            //{

                                                            //    objStrTmp.Append(BeginList2 + sBegin + common.myStr(item["SectionName"]) + sEnd);
                                                            //}

                                                        }
                                                    }
                                                    BeginList2 = string.Empty;
                                                }
                                                else
                                                {
                                                    if (Convert.ToBoolean(item["SectionDisplayTitle"]))// Comment ON 19June2010
                                                    {
                                                        if (!str.ToString().Trim().Equals(string.Empty)) //add 19June2010
                                                        {
                                                            objStrTmp.Append(common.myStr(item["SectionName"])); //Comment On 19June2010
                                                        }
                                                    }
                                                }
                                                if (common.myInt(item["SectionsListStyle"]).Equals(3)
                                                    || common.myInt(item["SectionsListStyle"]).Equals(0))
                                                {
                                                    //objStrTmp.Append("<br />");
                                                }

                                                objStrTmp.Append(str.ToString());
                                            }
                                            //if (!str.ToString().Trim().Equals(string.Empty)) //add 19June2010
                                            //{
                                            iRecordId = common.myInt(dtEntry.Rows[it]["RecordId"]);
                                            ViewState["iPrevId"] = common.myInt(item["TemplateId"]);
                                            // }
                                        }
                                        str = null;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion
            #region Tabular
            DataView dvDyTable4 = new DataView(dsDynamicTemplateData.Tables[3]);
            DataView dvDyTable5 = new DataView(dsDynamicTemplateData.Tables[4]);
            DataView dvDyTable6 = new DataView(dsDynamicTemplateData.Tables[5]);

            dvDyTable4.ToTable().TableName = "TabularData";
            dvDyTable5.ToTable().TableName = "TabularColumnCount";
            dvDyTable6.ToTable().TableName = "TabularTemplateFieldStyle";

            dsAllTabularSectionDetails = new DataSet();
            if (dvDyTable4.ToTable().Rows.Count > 0)
            {
                dsAllTabularSectionDetails.Tables.Add(dvDyTable4.ToTable());
                dsAllTabularSectionDetails.Tables.Add(dvDyTable5.ToTable());
                dsAllTabularSectionDetails.Tables.Add(dvDyTable6.ToTable());
            }

            dvDyTable4.Dispose();
            dvDyTable5.Dispose();



            if (dsAllTabularSectionDetails.Tables.Count > 0 && dsAllTabularSectionDetails.Tables[1].Rows.Count > 0)
            {
                DataView dvTabular = new DataView(dvDyTable1.ToTable());
                dvTabular.RowFilter = "Tabular=1";
                if (dvTabular.ToTable().Rows.Count > 0)
                {
                    ds = new DataSet();
                    ds.Tables.Add(dvTabular.ToTable());//Section Name Table
                    dv = new DataView(dsAllTabularSectionDetails.Tables[0]);
                    if (!common.myStr(ViewState["ShowCaseSheetInASCOrder"]).Equals("Y"))
                    {
                        dv.Sort = "RecordId DESC";
                    }
                    //dv.Sort = "RecordId DESC";
                    dtEntry = dv.ToTable(true, "RecordId");
                    iRecordId = 0;
                    dv.Dispose();
                    dvTabular.Dispose();
                    for (int it = 0; it < dtEntry.Rows.Count; it++)
                    {
                        if (common.myInt(dtEntry.Rows[it]["RecordId"]) != 0)
                        {
                            foreach (DataRow item in ds.Tables[0].Rows)
                            {
                                dv1 = new DataView(dsAllTabularSectionDetails.Tables[0]);
                                dv1.RowFilter = "SectionId=" + common.myStr(item["SectionId"]);
                                DataView dvFieldStyle = new DataView(dsAllTabularSectionDetails.Tables[2]);
                                dvFieldStyle.RowFilter = "SectionId=" + common.myStr(item["SectionId"]);
                                dtFieldName = dv1.ToTable();

                                if (dsAllTabularSectionDetails.Tables.Count > 1)
                                {
                                    dv2 = new DataView(dsAllTabularSectionDetails.Tables[1]);
                                    dv2.RowFilter = " SectionId=" + common.myStr(item["SectionId"]);
                                    dtFieldValue = dv2.ToTable();
                                    dv2.Dispose();
                                }

                                dsAllFieldsDetails = new DataSet();
                                dsAllFieldsDetails.Tables.Add(dtFieldName);
                                dsAllFieldsDetails.Tables.Add(dtFieldValue);

                                dsAllFieldsDetails.Tables.Add(dvDyTable6.ToTable());
                                dvDyTable6.Dispose();
                                dtFieldName.Dispose();
                                dtFieldValue.Dispose();
                                dv1.Dispose();

                                if (dsAllTabularSectionDetails.Tables[0].Rows.Count > 0)
                                {
                                    if (dsAllTabularSectionDetails.Tables.Count > 1)
                                    {
                                        if (dsAllTabularSectionDetails.Tables[0].Rows.Count > 0)
                                        {
                                            sBegin = string.Empty;
                                            sEnd = string.Empty;
                                            dr3 = dvFieldStyle.ToTable().Rows[0];
                                            getabulerFontSize("Fields", ref sBegin, ref sEnd, dr3);
                                            ViewState["iTemplateId"] = common.myInt(item["TemplateId"]);

                                            str = new StringBuilder();
                                            str.Append(CreateString(dsAllFieldsDetails, common.myInt(item["TemplateId"]), common.myStr(item["TemplateName"]),
                                                        common.myStr(item["Tabular"]), item["SectionId"].ToString(), common.myStr(item["EntryType"]),
                                                        common.myInt(dtEntry.Rows[it]["RecordId"]), GroupingDate, common.myBool(item["IsConfidential"])));

                                            str.Append("<br/> ");

                                            dr3 = null;
                                            dsAllTabularSectionDetails.Dispose();
                                            dsAllFieldsDetails.Dispose();

                                            if (common.myInt(ViewState["iPrevId"]).Equals(common.myInt(item["TemplateId"])))
                                            {
                                                if (iRecordId != common.myInt(dtEntry.Rows[it]["RecordId"]))
                                                {
                                                    if (sEntryType.Equals("M"))
                                                    {
                                                        objStrTmp.Append("<br/>");
                                                    }
                                                }
                                                if (t2.Equals(0))
                                                {
                                                    if (t3.Equals(0))//Template
                                                    {
                                                        t3 = 1;
                                                        if (common.myInt(item["SectionsListStyle"]).Equals(1))
                                                        {
                                                            BeginList3 = "<ul>";
                                                            EndList3 = "</ul>";
                                                        }
                                                        else if (common.myInt(item["SectionsListStyle"]).Equals(2))
                                                        {
                                                            BeginList3 = "<ol>";
                                                            EndList3 = "</ol>";
                                                        }
                                                    }
                                                }

                                                if (common.myStr(item["SectionsBold"]) != string.Empty
                                                    || common.myStr(item["SectionsItalic"]) != string.Empty
                                                    || common.myStr(item["SectionsUnderline"]) != string.Empty
                                                    || common.myStr(item["SectionsFontSize"]) != string.Empty
                                                    || common.myStr(item["SectionsForecolor"]) != string.Empty
                                                    || common.myStr(item["SectionsListStyle"]) != string.Empty)
                                                {
                                                    sBegin = string.Empty;
                                                    sEnd = string.Empty;
                                                    MakeFont("Sections", ref sBegin, ref sEnd, item);
                                                    if (Convert.ToBoolean(item["SectionDisplayTitle"]))   //19June2010
                                                    {
                                                        if (!str.ToString().Trim().Equals(string.Empty))
                                                        {
                                                            objStrTmp.Append(BeginList3 + sBegin + common.myStr(item["SectionName"]) + sEnd); //    objStrTmp.Append("<br />" + BeginList3 + sBegin + item["SectionName"].ToString() + sEnd);
                                                        }
                                                    }
                                                    BeginList3 = string.Empty;
                                                }
                                                else
                                                {
                                                    if (Convert.ToBoolean(item["SectionDisplayTitle"]))    //19June
                                                    {
                                                        if (!str.ToString().Trim().Equals(string.Empty))
                                                        {
                                                            objStrTmp.Append(common.myStr(item["SectionName"])); //objStrTmp.Append("<br />" + item["SectionName"].ToString());
                                                        }
                                                    }
                                                }

                                                if (!str.ToString().Trim().Equals(string.Empty))
                                                {
                                                    if (common.myInt(item["SectionsListStyle"]).Equals(3)
                                                        || common.myInt(item["TemplateListStyle"]).Equals(0))
                                                    {
                                                        objStrTmp.Append("<br />");
                                                    }
                                                    objStrTmp.Append(str.ToString());
                                                }
                                            }
                                            else
                                            {
                                                if (t.Equals(0))
                                                {
                                                    t = 1;
                                                    if (common.myInt(item["TemplateListStyle"]).Equals(1))
                                                    {
                                                        BeginList = "<ul>"; EndList = "</ul>";
                                                    }
                                                    else if (common.myInt(item["TemplateListStyle"]).Equals(2))
                                                    {
                                                        BeginList = "<ol>"; EndList = "</ol>";
                                                    }
                                                }
                                                if (common.myStr(item["TemplateBold"]) != string.Empty
                                                    || common.myStr(item["TemplateItalic"]) != string.Empty
                                                    || common.myStr(item["TemplateUnderline"]) != string.Empty
                                                    || common.myStr(item["TemplateFontSize"]) != string.Empty
                                                    || common.myStr(item["TemplateForecolor"]) != string.Empty
                                                    || common.myStr(item["TemplateListStyle"]) != string.Empty)
                                                {
                                                    sBegin = string.Empty;
                                                    sEnd = string.Empty;
                                                    MakeFont("Template", ref sBegin, ref sEnd, item);
                                                    if (Convert.ToBoolean(item["TemplateDisplayTitle"]))
                                                    {
                                                        if (!str.ToString().Trim().Equals(string.Empty))
                                                        {
                                                            if (sBegin.Contains("<br/>"))
                                                            {
                                                                sBegin = sBegin.Remove(0, 5);
                                                                objStrTmp.Append(BeginList + sBegin + common.myStr(item["TemplateName"]) + sEnd + "<br/>");
                                                            }
                                                            else
                                                            {
                                                                objStrTmp.Append(BeginList + sBegin + common.myStr(item["TemplateName"]) + sEnd + "<br/>");
                                                            }
                                                        }
                                                    }
                                                    if (sEntryType.Equals("M") && !str.ToString().Trim().Equals(string.Empty))
                                                    {
                                                        objStrTmp.Append("<br/>");
                                                    }
                                                    BeginList = string.Empty;
                                                }
                                                else
                                                {
                                                    if (common.myBool(item["TemplateDisplayTitle"]))
                                                    {
                                                        objStrTmp.Append(common.myStr(item["TemplateName"]));//Default Setting
                                                    }
                                                    if (sEntryType.Equals("M") && !str.ToString().Trim().Equals(string.Empty))
                                                    {
                                                        objStrTmp.Append("<br/>");
                                                    }
                                                }
                                                if (common.myInt(item["TemplateListStyle"]).Equals(3)
                                                    || common.myInt(item["TemplateListStyle"]).Equals(0))
                                                {
                                                    //objStrTmp.Append("<br />");
                                                }

                                                objStrTmp.Append(EndList);
                                                if (t2.Equals(0))
                                                {
                                                    t2 = 1;
                                                    if (common.myInt(item["SectionsListStyle"]).Equals(1))
                                                    {
                                                        BeginList2 = "<ul>";
                                                        EndList3 = "</ul>";
                                                    }
                                                    else if (common.myInt(item["SectionsListStyle"]).Equals(2))
                                                    {
                                                        BeginList2 = "<ol>";
                                                        EndList3 = "</ol>";
                                                    }
                                                }
                                                if (common.myStr(item["SectionsBold"]) != string.Empty
                                                    || common.myStr(item["SectionsItalic"]) != string.Empty
                                                    || common.myStr(item["SectionsUnderline"]) != string.Empty
                                                    || common.myStr(item["SectionsFontSize"]) != string.Empty
                                                    || common.myStr(item["SectionsForecolor"]) != string.Empty
                                                    || common.myStr(item["SectionsListStyle"]) != string.Empty)
                                                {
                                                    sBegin = string.Empty;
                                                    sEnd = string.Empty;
                                                    MakeFont("Sections", ref sBegin, ref sEnd, item);
                                                    if (Convert.ToBoolean(item["SectionDisplayTitle"])) // Comment On 19June2010 hit1
                                                    {
                                                        if (!str.ToString().Trim().Equals(string.Empty)) //add 19June2010
                                                        {
                                                            objStrTmp.Append(BeginList2 + sBegin + common.myStr(item["SectionName"]) + sEnd);
                                                        }
                                                    }
                                                    BeginList2 = string.Empty;
                                                }
                                                else
                                                {
                                                    if (Convert.ToBoolean(item["SectionDisplayTitle"]))// Comment ON 19June2010
                                                    {
                                                        if (!str.ToString().Trim().Equals(string.Empty)) //add 19June2010
                                                        {
                                                            objStrTmp.Append(common.myStr(item["SectionName"])); //Comment On 19June2010
                                                        }
                                                    }
                                                }
                                                if (common.myInt(item["SectionsListStyle"]).Equals(3)
                                                    || common.myInt(item["SectionsListStyle"]).Equals(0))
                                                {
                                                    //objStrTmp.Append("<br />");
                                                }

                                                objStrTmp.Append(str.ToString());
                                            }
                                            if (!str.ToString().Trim().Equals(string.Empty)) //add 19June2010
                                            {
                                                iRecordId = common.myInt(dtEntry.Rows[it]["RecordId"]);
                                                ViewState["iPrevId"] = common.myInt(item["TemplateId"]);
                                            }
                                        }
                                        str = null;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion
            if (t2.Equals(1) && t3.Equals(1))
            {
                objStrTmp.Append(EndList3);
            }
            else
            {
                objStrTmp.Append(EndList);
            }
            if (GetPageProperty("1") != null)
            {
                objStrSettings.Append(objStrTmp.ToString());
                sb.Append(objStrSettings.ToString());
            }
            else
            {
                sb.Append(objStrTmp.ToString());
            }
        }
        catch (Exception ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + ex.Message;

        }
        finally
        {
            ds.Dispose();
            dsAllNonTabularSectionDetails.Dispose();
            dsAllTabularSectionDetails.Dispose();
            dsAllFieldsDetails.Dispose();

            dtFieldValue.Dispose();
            dtEntry.Dispose();
            dtFieldName.Dispose();
            dvDyTable1.Dispose();
            dv.Dispose();
            dv1.Dispose();
            dv2.Dispose();

            dr3 = null;

            objStrTmp = null;
            objStrSettings = null;

            sEntryType = string.Empty;
            BeginList = string.Empty;
            EndList = string.Empty;
            BeginList2 = string.Empty;
            BeginList3 = string.Empty;
            EndList3 = string.Empty;
            sBegin = string.Empty;
            sEnd = string.Empty;
        }
    }
    protected DataSet GetPageProperty(string iFormId)
    {
        Hashtable hstInput = new Hashtable();
        if (common.myInt(Session["HospitalLocationID"]) > 0 && iFormId != "")
        {
            if (Cache[common.myInt(Session["HospitalLocationID"]).ToString() + "_" + iFormId + "_FormPageSettings"] == null)
            {
                DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
                hstInput.Add("@inyHospitalLocationId", common.myInt(Session["HospitalLocationID"]));
                hstInput.Add("@intFormId", iFormId);
                DataSet ds = null;//dl.FillDataSet(CommandType.StoredProcedure, "EMRGetFormPageSettingDetails", hstInput);
                //Cache.Insert(Session["HospitalLocationID"].ToString() + "_" + iFormId + "_FormPageSettings", ds, null, DateTime.Now.AddHours(1), System.Web.Caching.Cache.NoSlidingExpiration);
                return ds;
            }
            else
            {
                DataSet objDs = (DataSet)Cache[common.myInt(Session["HospitalLocationID"]).ToString() + "_" + iFormId + "_FormPageSettings"];
                return objDs;
            }
        }
        return null;
    }
    protected void MakeFont(string typ, ref string sBegin, ref string sEnd, DataRow item)
    {
        //string sBegin = "", sEnd = "";
        ArrayList aEnd = new ArrayList();
        if (common.myStr(item[typ + "ListStyle"]) == "1")
        {
            sBegin += "<li>";
            //aEnd.Add("</li>");
        }
        else if (common.myStr(item[typ + "ListStyle"]) == "2")
        {
            sBegin += "<li>";
            // aEnd.Add("</li>");
        }
        else
        {
            if (common.myStr(ViewState["iTemplateId"]) != "163" && typ != "Fields")
            {
                sBegin += "<br/>";
            }
            else if (common.myStr(ViewState["iTemplateId"]) == "163" && typ == "Fields")
            {
                sBegin += "; ";
            }
            //else if (common.myStr(ViewState["iTemplateId"]) == "163" && typ == "Fields")
            //{
            //    sBegin += "; ";
            //}
            else
            {
                sBegin += "<br/>";   // K.D
                //// //sBegin += "<br/>";
            }
        }

        if (common.myStr(item[typ + "Forecolor"]) != ""
            || common.myStr(item[typ + "FontSize"]) != ""
            || common.myStr(item[typ + "FontStyle"]) != "")
        {
            sBegin += "<span style='";
            if (common.myStr(item[typ + "FontSize"]) != "")
            {
                sBegin += " font-size:" + item[typ + "FontSize"] + ";";
            }
            else
            {
                sBegin += getDefaultFontSize();
            }
            if (common.myStr(item[typ + "Forecolor"]) != "")
            {
                sBegin += " color: #" + item[typ + "Forecolor"] + ";";
            }
            if (common.myStr(item[typ + "FontStyle"]) != "")
            {
                sBegin += GetFontFamily(typ, item);
            }
        }
        if (common.myStr(item[typ + "Bold"]) == "True")
        {
            sBegin += " font-weight: bold;";
        }
        if (common.myStr(item[typ + "Italic"]) == "True")
        {
            sBegin += " font-style: italic;";
        }
        if (common.myStr(item[typ + "Underline"]) == "True")
        {
            sBegin += " text-decoration: underline;";
        }

        aEnd.Add("</span>");
        for (int i = aEnd.Count - 1; i >= 0; i--)
        {
            sEnd += aEnd[i];
        }
        //sEnd += "<br/>";
        if (sBegin != "")
        {
            sBegin += " '>";
        }
    }
    private StringBuilder getReportHeader(int ReportId)
    {
        StringBuilder sb = new StringBuilder();
        try
        {
            DataSet ds = new DataSet();
            bool IsPrintHospitalHeader = false;
            clsIVF objivf = new clsIVF(sConString);
            string ShowPrescriptionNABHLogoImage = common.GetFlagValueHospitalSetup(common.myInt(Session["HospitalLocationId"]),
            common.myInt(Session["FacilityId"]), "ShowPrescriptionNABHLogoImage", sConString);
            ds = objivf.EditReportName(ReportId);
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    IsPrintHospitalHeader = common.myBool(ds.Tables[0].Rows[0]["IsPrintHospitalHeader"]);
                    ViewState["ShowPrintHeaderImage"] = common.myBool(ds.Tables[0].Rows[0]["PrintHeaderImage"]);
                    ViewState["PrintHeaderImagePath"] = common.myStr(ds.Tables[0].Rows[0]["PrintHeaderImagePath"]);
                }
            }
            ds = new DataSet();
            //yogesh 16/08/2022
            if (Session["FacilityName"].Equals("PRACHI HOSPITAL "))
            {
                ds = objivf.getFacility(common.myInt(Session["FacilityId"]), common.myInt(Session["HospitalLocationID"]), common.myStr(Session["FacilityName"]));
            }
            else
            {
                ds = objivf.getFacility(common.myInt(Session["FacilityId"]), common.myInt(Session["HospitalLocationID"]));
            }


            sb.Append("<div>");
            if (common.myBool(ViewState["ShowPrintHeaderImage"]).Equals(true))
            {
                sb.Append("<table border='0' width='100%' style='margin-top:-30px' cellpadding='0' cellspacing='0' style='font-size:small'>");
                sb.Append("<tr>");
                sb.Append("<td align=right>");
                sb.Append("<img src='" + Server.MapPath("" + ViewState["PrintHeaderImagePath"] + "") + "' border='0' width='480px' height='80px'  alt='Image'/>");
                //sb.Append("<img src='" + Server.MapPath("~") + FileNameLogoImagePath + "' border='0' width='105px' height='105px'  alt='Image'/>");
                sb.Append("</td></tr>");
                sb.Append("<tr>");
                sb.Append("<td align=right>" + ViewState["PrintVersionCode"] + "</td>");
                sb.Append("</tr></table>");
                sb.Append("<table border='0' width='100%' style='text-align:center;'  cellpadding='2' cellspacing='3' ><tr>");
                //sb.Append("<td align=center><U>" + common.myStr(ddlReport.SelectedItem.Text) + "</U></td>");
                sb.Append("<td align=center><b>" + common.myStr(ViewState["reportname"]) + "</b></td>");
                sb.Append("</tr></table>");

            }
            if (IsPrintHospitalHeader)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    if (ShowPrescriptionNABHLogoImage.Equals("Y"))
                    {

                        sb.Append("<table border='0' width='100%' cellpadding='0' cellspacing='0' style='font-size:small'>");
                        sb.Append("<tr>");
                        sb.Append("<td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td>");
                        sb.Append("</tr>");
                        sb.Append("<tr>");
                        sb.Append("<td colspan='2'>");
                        sb.Append("<img src='" + Server.MapPath("/Icons/SmallLogo.jpg") + "' border='0'  width='" + ViewState["HospitalLogoWidth"] + "px' height='" + ViewState["HospitalLogoHeight"] + "px' alt='Image'/>");
                        sb.Append("</td>");
                        sb.Append("<td colspan='7' >");//yogesh
                        for (int idx = 0; idx < ds.Tables[0].Rows.Count; idx++)
                        {
                            DataRow DR = ds.Tables[0].Rows[idx];
                            sb.Append("<table border='0' cellpadding='0' cellspacing='0' style='font-size:small;margin-left: 10px !important;'>");
                            sb.Append("<tr>");
                            sb.Append("<td  align ='center' style='font-size:16pt' ><b>" + common.myStr(DR["FacilityName"]).Trim() + "</b></td>");
                            sb.Append("</tr>");
                            sb.Append("<tr>");

                            //yogesh 18/07/2022
                            if (common.myStr(DR["FacilityName"]).Equals("PRACHI HOSPITAL "))
                            {
                                sb.Append("<td align ='center' style='font-size:12pt'>" + common.myStr(DR["Name2"]).Trim() + "</td>");
                                sb.Append("</tr>");
                                sb.Append("<tr>");
                                sb.Append("<td align ='center' style='font-size:12pt'>" + common.myStr(DR["HeaderLine2"]).Trim() + "</td>");
                                sb.Append("</tr>");

                                sb.Append("<tr>");
                                sb.Append("<td align ='center' style='font-size:12pt'>" + common.myStr(DR["HeaderLine3"]).Trim() + "</td>");
                                sb.Append("</tr>");
                                //sb.Append("<td align ='center' style='font-size:11pt'>Sector C-105 Shantipuram Phaphamau Prayagraj-211013" + "</td>");
                                //sb.Append("</tr>");
                                sb.Append("<tr>");
                                sb.Append("<td align ='center' style='font-size:9pt'><p>Toll Free: " + common.myStr(DR["TollFree"]) + " Phone No: " + common.myStr(DR["Fax"]) + " Mob No: " + common.myStr(DR["Phone"]) + "</p></td>");
                                sb.Append("</tr>");

                                sb.Append("<tr>");
                                sb.Append("<td align ='center'  style='font-size:9px'><b> Email : " + common.myStr(DR["EmailId"]) + " Website : " + common.myStr(DR["WebSite"]) + "</b></td>");

                                //sb.Append("<td align ='center' style='font-size:9pt'> Email: prachihospital@gmail.com, Website: www.prachihospital.com" + "</td>");
                                sb.Append("</tr>");


                                //sb.Append("<tr>");
                                //sb.Append("<td align ='center' style='font-size:10pt'>E-mail : " + common.myStr(DR["EmailId"]) + " Website : " + common.myStr(DR["WebSite"]) + "</td>");
                                //sb.Append("</tr>");
                                sb.Append("</table>");
                            }
                            else
                            {
                                sb.Append("<td align ='center' style='font-size:10pt'>" + common.myStr(DR["Address1"]).Trim() + ", " + common.myStr(DR["Address2"]).Trim() + "</td>");
                                sb.Append("</tr>");
                                sb.Append("<tr>");
                                sb.Append("<td align ='center' style='font-size:10pt'>Mobile : " + common.myStr(DR["Phone"]) + " Phone : " + common.myStr(DR["Fax"]) + "</td>");
                                sb.Append("</tr>");
                                //sb.Append("<tr>");
                                //sb.Append("<td align ='center' style='font-size:10pt'>E-mail : " + common.myStr(DR["EmailId"]) + " Website : " + common.myStr(DR["WebSite"]) + "</td>");
                                //sb.Append("</tr>");
                                sb.Append("</table>");
                            }


                        }
                        sb.Append("</td>");
                        sb.Append("<td colspan='2'>");
                        #region nabh logo 
                        string FileNameNABHLogoImagePath = Server.MapPath("/Images/Logo/NABHLogo.jpg");
                        System.IO.FileInfo file = new System.IO.FileInfo(FileNameNABHLogoImagePath);
                        if (file.Exists)
                        {

                            StringBuilder sbPrescribed = new StringBuilder();
                            sb.Append("<table border='0' cellpadding='3' cellspacing='2'>");
                            sb.Append("<tr>");
                            sb.Append("<td><img align='left' src='" + FileNameNABHLogoImagePath + "' border='0' width='" + ViewState["NABHLOGOWidth"] + "px' height='" + ViewState["NABHLOGOHeight"] + "px'  alt='Image'/> </td>");
                            sb.Append("</tr>");
                            sb.Append("</table>");
                        }

                        #endregion
                        sb.Append("</td>");
                        sb.Append("</table>");
                        sb.Append("<table border='0' width='100%' style='text-align:center;'  cellpadding='2' cellspacing='3' ><tr>");
                        sb.Append("<td align=center><b>" + common.myStr("Prescription") + "</b></td>");
                        sb.Append("</tr></table></div>");
                        if (common.myBool(ViewState["ShowPrintHeaderImage"]).Equals(false) && IsPrintHospitalHeader == false)
                        {
                            sb.Append("<table border='0' width='100%' style='text-align:center;'  cellpadding='2' cellspacing='3' ><tr>");
                            //kuldeep 24/05/2022

                            if (Session["FacilityName"].Equals("QRG MEDICARE LTD."))
                            {
                                sb.Append("<td align=center><b>" + common.myStr("OPD Consultation Summary") + "</b></td>");
                            }
                            else
                            {
                                sb.Append("<td align=center><b>" + (Session["OPIP"].ToString().Equals("O") ? "OPD" : "IPD") + " " + common.myStr("Prescription") + "</b></td>");
                            }
                            sb.Append("</tr></table></div>");
                        }
                    }
                    else
                    {
                        sb.Append("<table border='0' width='100%' cellpadding='0' cellspacing='0' style='font-size:small'>");
                        for (int idx = 0; idx < ds.Tables[0].Rows.Count; idx++)
                        {
                            DataRow DR = ds.Tables[0].Rows[idx];
                            sb.Append("<tr>");
                            sb.Append("<td align ='center'>");
                            sb.Append("<table border='0' cellpadding='0' cellspacing='0'>");
                            sb.Append("<tr>");
                            sb.Append("<td></td><td></td><td></td><td></td><td></td>");
                            sb.Append("</tr>");
                            sb.Append("<tr>");
                            sb.Append("<td colspan='1' align ='right' valign='middle' style='font-size:9px'><img src='" + Server.MapPath("/Icons/SmallLogo.jpg") + "' border='0'  width='" + ViewState["HospitalLogoWidth"] + "px' height='" + ViewState["HospitalLogoHeight"] + "px' alt='Image'/></td>");
                            sb.Append("<td colspan='3' align ='center' valign='middle' style='font-size:12px'><b>" + common.myStr(DR["FacilityName"]).Trim() + "</b></td>"); //yogesh 24/08/2022 asifa_facilityName size
                            sb.Append("<td colspan='3' ></td>");
                            sb.Append("</tr>");
                            sb.Append("</table>");
                            sb.Append("</td>");
                            sb.Append("</tr>");
                            sb.Append("<tr>");

                            // yogesh 14/06/2022
                            if (Session["FacilityName"].ToString().Equals("Regency Hospital Ltd.") || Session["FacilityName"].ToString().Equals("Regency City Clinic") ||
                                Session["FacilityName"].ToString().Equals("Regency Hospital, Govind Nagar") || Session["FacilityName"].ToString().Equals("Regency Renal Hospital") ||
                                Session["FacilityName"].ToString().Equals("Regency Hospital, Lucknow"))
                            {
                                sb.Append("<td align ='center'  style='font-size:9px'> <b>" + common.myStr(DR["Address1"]).Trim() + ", " + common.myStr(DR["Address2"]).Trim() + "</b></td>");
                            }
                            else
                            {
                                sb.Append("<td align ='center'  style='font-size:9px'>" + common.myStr(DR["Address1"]).Trim() + ", " + common.myStr(DR["Address2"]).Trim() + "</td>");
                            }

                            sb.Append("</tr>");
                            sb.Append("<tr>");

                            // yogesh 14/06/2022
                            if (Session["FacilityName"].ToString().Equals("Regency Hospital Ltd.") || Session["FacilityName"].ToString().Equals("Regency City Clinic") ||
                            Session["FacilityName"].ToString().Equals("Regency Hospital, Govind Nagar") || Session["FacilityName"].ToString().Equals("Regency Renal Hospital") ||
                            Session["FacilityName"].ToString().Equals("Regency Hospital, Lucknow"))
                            {
                                sb.Append("<td align ='center'  style='font-size:9px'><b> Phone : " + common.myStr(DR["Phone"]) + " Fax : " + common.myStr(DR["Fax"]) + "</b></td>");
                                sb.Append("<td align ='center'  style='font-size:9px'><b> Email : " + common.myStr(DR["EmailId"]) + " Website : " + common.myStr(DR["WebSite"]) + "</b></td>");
                            }
                            else
                            {//yogesh 25/08/2022
                                if (System.Web.HttpContext.Current.Session["FacilityName"].ToString().Equals("Alshifa Multispeciality Hospital"))
                                    sb.Append("<td align ='center'  style='font-size:9px'>Phone : " + common.myStr(DR["Phone"]) + "</td>");
                                else
                                    sb.Append("<td align ='center'  style='font-size:9px'>Phone : " + common.myStr(DR["Phone"]) + " Fax : " + common.myStr(DR["Fax"]) + "</td>");
                            }


                            sb.Append("</tr>");
                        }
                        sb.Append("</table>");
                        sb.Append("<table border='0' width='100%' style='text-align:center;'  cellpadding='2' cellspacing='3' ><tr>");
                        sb.Append("<td align=center><b>" + common.myStr("Prescription") + "</b></td>");
                        sb.Append("</tr></table></div>");
                        //Awadhesh
                        if (common.myBool(ViewState["ShowPrintHeaderImage"]).Equals(false) && IsPrintHospitalHeader == false)
                        {
                            sb.Append("<table border='0' width='100%' style='text-align:center;'  cellpadding='2' cellspacing='3' ><tr>");
                            //kuldeep 24/05/2022
                            sb.Append("<td align=center><b>" + (Session["OPIP"].ToString().Equals("O") ? "OPD" : "IPD") + " " + common.myStr("Prescription") + "</b></td>");

                            sb.Append("</tr></table></div>");
                        }

                    }
                }
            }
            else
            {
                sb.Append("<table border='0' width='100%' style='text-align:center;'  cellpadding='2' cellspacing='3' ><tr>");
                //kuldeep 24/05/2022
                sb.Append("<td align=center><b>" + (Session["OPIP"].ToString().Equals("O") ? "OPD" : "IPD") + " " + common.myStr("Prescription") + "</b></td>");
                sb.Append("</tr></table></div>");
            }

            return sb;
        }
        catch (Exception Ex)
        {
            sb = new StringBuilder();
            return sb;
        }
    }

    protected string getabulerFontSize(string typ, ref string sBegin, ref string sEnd, DataRow item)
    {
        sFontSize = string.Empty;

        ArrayList aEnd = new ArrayList();
        if (common.myStr(item[typ + "Forecolor"]) != ""
            || common.myStr(item[typ + "FontSize"]) != ""
            || common.myStr(item[typ + "FontStyle"]) != "")
        {
            if (common.myStr(item[typ + "FontSize"]) != "")
            {
                sFontSize += " font-size:" + item[typ + "FontSize"] + ";";
            }
            else
            {
                sFontSize += getDefaultFontSize();
            }
            if (common.myStr(item[typ + "Forecolor"]) != "")
            {
                sFontSize += " color: #" + item[typ + "Forecolor"] + ";";
            }
            if (common.myStr(item[typ + "FontStyle"]) != "")
            {
                sFontSize += GetFontFamily(typ, item);
            };

            if (common.myStr(item[typ + "Bold"]) == "True")
            {
                sFontSize += " font-weight: bold;";
            }
            if (common.myStr(item[typ + "Italic"]) == "True")
            {
                sFontSize += " font-style: italic;";
            }
            if (common.myStr(item[typ + "Underline"]) == "True")
            {
                sFontSize += " text-decoration: underline;";
            }

            if (typ.ToUpper().Equals("FIELDS"))
            {
                sFontSize += "border: 1px solid black;";
            }
        }

        return sFontSize;
    }
    protected string CreateString(DataSet objDs, int iRootId, string iRootName, string TabularType,
      string sectionId, string EntryType, int RecordId, string GroupingDate, bool IsConfidential)
    {
        DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
        StringBuilder objStr = new StringBuilder();
        DataView objDv = new DataView();
        DataTable objDt = new DataTable();
        DataSet dsMain = new DataSet();
        StringBuilder objStrTmp = new StringBuilder();
        DataSet dsTabulerTemplate = new DataSet();
        try
        {
            if (objDs != null)
            {
                if (IsConfidential == false)
                {
                    #region Tabular
                    if (bool.Parse(TabularType) == true)
                    {
                        DataView dvFilter = new DataView(objDs.Tables[0]);
                        if (objDs.Tables[0].Rows.Count > 0)
                        {
                            string sBegin = string.Empty;
                            string sEnd = string.Empty;
                            dvFilter.Sort = "RowNum ASC";
                            if (GroupingDate != "")
                            {
                                dvFilter.RowFilter = "ISNULL(RowCaptionName,'')='' AND RowNum > 2 AND RecordId<>0 AND GroupDate='" + GroupingDate + "' AND RecordId= " + RecordId;
                            }
                            else
                            {
                                dvFilter.RowFilter = "ISNULL(RowCaptionName,'')='' AND RowNum > 2 AND RecordId<>0 AND RecordId= " + RecordId;
                            }
                            DataTable dtNewTable = dvFilter.ToTable();
                            if (dtNewTable.Rows.Count > 0)
                            {
                                DataView dvRowCaption = new DataView(objDs.Tables[0]);
                                StringBuilder sbCation = new StringBuilder();
                                if (dvRowCaption.ToTable().Rows.Count > 0)
                                {
                                    dvRowCaption.RowFilter = "RowNum>0";
                                    DataTable dt = dvRowCaption.ToTable();
                                    dvRowCaption.Dispose();
                                    if (dt.Rows.Count > 0)
                                    {
                                        sbCation.Append("<br /><table border='1' style='border-color:#000000; border:solid;  border-collapse:collapse; " + sFontSize + "'  cellspacing='3' ><tr align='center'>");
                                        DataView dvColumnCount = new DataView(objDs.Tables[1]);
                                        dvColumnCount.RowFilter = "SectionId=" + sectionId;

                                        int column = common.myInt(dvColumnCount.ToTable().Rows[0]["ColumnCount"]);
                                        int ColumnCount = 0;
                                        int count = 1;
                                        dvColumnCount.Dispose();
                                        for (int k = 0; k < column; k++)
                                        {
                                            sbCation.Append("<td style='" + sFontSize + "'>");
                                            sbCation.Append(common.myStr(dt.Rows[0]["Col" + count]));
                                            sbCation.Append("</td>");
                                            count++;
                                            ColumnCount++;
                                        }
                                        sbCation.Append("</tr>");

                                        DataView dvData = new DataView(dt);
                                        if (GroupingDate != "")
                                        {
                                            dvData.RowFilter = "RecordId=" + RecordId + " AND GroupDate='" + GroupingDate + "'";
                                        }
                                        else
                                        {
                                            dvData.RowFilter = "RecordId=" + RecordId;
                                        }

                                        for (int l = 1; l <= dvData.ToTable().Rows.Count; l++)
                                        {
                                            sbCation.Append("<tr>");
                                            for (int i = 1; i < ColumnCount + 1; i++)
                                            {
                                                if (dt.Rows[1]["Col" + i].ToString() == "IM")
                                                {
                                                    if (dvData.ToTable().Rows[l - 1]["Col" + i].ToString() != "")
                                                    {
                                                        sbCation.Append("<td align='center' ><img  id='dvImageType' runat='server'  alt='Image' width='30px' heigth='30px' src='" + dvData.ToTable().Rows[l - 1]["Col" + i].ToString() + "' /></td>");
                                                    }
                                                    else
                                                    {
                                                        sbCation.Append("<td style=' " + sFontSize + "' align='center'>&nbsp;</td>");
                                                    }
                                                }
                                                else
                                                {
                                                    if (dvData.ToTable().Rows[l - 1]["Col" + i].ToString() != "")
                                                    {
                                                        sbCation.Append("<td style=' " + sFontSize + "' align='center'>" + dvData.ToTable().Rows[l - 1]["Col" + i].ToString() + "</td>");
                                                    }
                                                    else
                                                    {
                                                        sbCation.Append("<td style=' " + sFontSize + "' align='center'>&nbsp;</td>");
                                                    }
                                                }
                                            }
                                            sbCation.Append("</tr>");
                                        }
                                        dt.Dispose();
                                        dvData.Dispose();
                                    }
                                    sbCation.Append("</table>");
                                }
                                objStr.Append(sbCation);
                                dsTabulerTemplate.Dispose();
                                sbCation = null;

                            }
                            else
                            {
                                DataView dvRowCaption = new DataView(objDs.Tables[0]);
                                if (GroupingDate != "")
                                {
                                    dvRowCaption.RowFilter = "GroupDate='" + GroupingDate + "' AND RecordId= " + RecordId;
                                }
                                else
                                {
                                    dvRowCaption.RowFilter = "RecordId= " + RecordId;
                                }
                                if (dvRowCaption.ToTable().Rows.Count > 0)
                                {
                                    StringBuilder sbCation = new StringBuilder();
                                    dvRowCaption.RowFilter = "RowNum>0";
                                    DataTable dt = dvRowCaption.ToTable();
                                    // dvRowCaption.Dispose();
                                    if (dt.Rows.Count > 0)
                                    {
                                        sbCation.Append("<br /><table border='1' style='border-color:#000000; border:solid;  border-collapse:collapse; " + sFontSize + "'   cellspacing='3' ><tr align='center'>");
                                        DataView dvColumnCount = new DataView(objDs.Tables[1]);
                                        dvColumnCount.RowFilter = "SectionId=" + sectionId;

                                        int column = common.myInt(dvColumnCount.ToTable().Rows[0]["ColumnCount"]);
                                        int ColumnCount = 0;
                                        int count = 1;
                                        dvColumnCount.Dispose();

                                        for (int k = 0; k < column + 1; k++)
                                        {
                                            if (common.myStr(dt.Rows[0]["RowCaptionName"]) == ""
                                                && ColumnCount == 0)
                                            {
                                                sbCation.Append("<td>");
                                                sbCation.Append(" + ");
                                                sbCation.Append("</td>");
                                            }
                                            else
                                            {
                                                sbCation.Append("<td>");
                                                sbCation.Append(common.myStr(dt.Rows[0]["Col" + count]));
                                                sbCation.Append("</td>");
                                                count++;
                                            }
                                            ColumnCount++;
                                        }
                                        sbCation.Append("</tr>");

                                        DataView dvData = new DataView(dt);
                                        if (GroupingDate != "")
                                        {
                                            dvData.RowFilter = "RecordId=" + RecordId + " AND RowCaptionId>0 AND GroupDate='" + GroupingDate + "'";
                                        }
                                        else
                                        {
                                            dvData.RowFilter = "RecordId=" + RecordId + " AND RowCaptionId>0";
                                        }

                                        for (int l = 1; l <= dvData.ToTable().Rows.Count; l++)
                                        {
                                            sbCation.Append("<tr>");
                                            for (int i = 0; i < ColumnCount; i++)
                                            {
                                                if (i == 0)
                                                {
                                                    sbCation.Append("<td style=' " + sFontSize + "' align='center'>" + common.myStr(dvData.ToTable().Rows[l - 1]["RowCaptionName"]) + "</td>");
                                                }
                                                else
                                                {
                                                    if (dt.Rows[1]["Col" + i].ToString() == "IM")
                                                    {
                                                        if (dvData.ToTable().Rows[l - 1]["Col" + i].ToString() != "")
                                                        {
                                                            sbCation.Append("<td align='center' ><img id='dvImageType' runat='server'  alt='Image' width='30px' heigth='30px' src='" + dvData.ToTable().Rows[l - 1]["Col" + i].ToString() + "' /></td>");
                                                        }
                                                        else
                                                        {
                                                            sbCation.Append("<td style=' " + sFontSize + "' align='center'>&nbsp;</td>");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (dvData.ToTable().Rows[l - 1]["Col" + i].ToString() != "")
                                                        {
                                                            sbCation.Append("<td style=' " + sFontSize + "' align='center'>" + dvData.ToTable().Rows[l - 1]["Col" + i].ToString() + "</td>");
                                                        }
                                                        else
                                                        {
                                                            sbCation.Append("<td style=' " + sFontSize + "' align='center'>&nbsp;</td>");
                                                        }
                                                    }
                                                }
                                            }
                                            sbCation.Append("</tr>");
                                        }
                                        sbCation.Append("</table>");
                                        dvData.Dispose();
                                    }
                                    objStr.Append(sbCation);
                                    dt.Dispose();
                                    sbCation = null;
                                }
                            }
                        }
                    }
                    #endregion
                    #region Non Tabular
                    else // For Non Tabular Templates
                    {
                        string BeginList = "", EndList = "";
                        string sBegin = "", sEnd = "";
                        int t = 0;
                        string FieldId = "";
                        string sStaticTemplate = "";
                        string sEnterBy = "";
                        string sVisitDate = "";
                        foreach (DataRow item in objDs.Tables[0].Rows)
                        {
                            objDv = new DataView(objDs.Tables[1]);
                            objDv.RowFilter = "FieldId='" + common.myStr(item["FieldId"]) + "'";
                            objDt = objDv.ToTable();
                            if (t == 0)
                            {
                                t = 1;
                                if (common.myStr(item["FieldsListStyle"]) == "1")
                                {
                                    BeginList = "<ul>"; EndList = "</ul>";
                                }
                                else if (item["FieldsListStyle"].ToString() == "2")
                                {
                                    BeginList = "<ol>"; EndList = "</ol>";
                                }
                            }
                            if (common.myStr(item["FieldsBold"]) != ""
                                || common.myStr(item["FieldsItalic"]) != ""
                                || common.myStr(item["FieldsUnderline"]) != ""
                                || common.myStr(item["FieldsFontSize"]) != ""
                                || common.myStr(item["FieldsForecolor"]) != ""
                                || common.myStr(item["FieldsListStyle"]) != "")
                            {
                                //rafat1
                                if (objDt.Rows.Count > 0)
                                {
                                    sBegin = "";
                                    sEnd = "";

                                    MakeFont("Fields", ref sBegin, ref sEnd, item);
                                    if (common.myBool(item["DisplayTitle"]))
                                    {
                                        // if (EntryType != "M")
                                        // {


                                        ////if (sBegin.StartsWith("<br/>"))
                                        ////{
                                        ////    if (sBegin.Length > 5)
                                        ////    {
                                        ////        sBegin = sBegin.Substring(5, sBegin.Length - 5);

                                        ////    }
                                        ////}

                                        objStr.Append(BeginList + sBegin + common.myStr(item["FieldName"]) + sEnd);
                                        //}
                                        //else
                                        //{
                                        //objStr.Append(BeginList + sBegin + common.myStr(item["FieldName"]));
                                        //}
                                        // 28/08/2011
                                        //if (objDt.Rows.Count > 0)
                                        //{
                                        if (objStr.ToString() != "")
                                        {
                                            //  objStr.Append(sEnd + "</li>");
                                        }
                                        ViewState["sBegin"] = sBegin;
                                    }

                                    BeginList = "";
                                    sBegin = "";
                                }
                                else
                                {
                                    if (common.myStr(item["FieldType"]).Equals("H"))
                                    {
                                        sEnd = "";
                                        MakeFont("Fields", ref sBegin, ref sEnd, item);
                                        //if (sBegin.StartsWith("<br/>"))
                                        //{
                                        //    if (sBegin.Length > 5)
                                        //    {
                                        //        sBegin = sBegin.Substring(5, sBegin.Length - 5);
                                        //    }
                                        //}
                                        if (common.myBool(item["DisplayTitle"]))
                                        {
                                            objStr.Append(BeginList + sBegin + "<U>" + common.myStr(item["FieldName"]) + "</U>");

                                            // Make commented Mission_05082022_Akshay
                                            //if (objStr.ToString() != "")
                                            //{
                                            //    objStr.Append(sEnd + "</li>");
                                            //}
                                        }
                                        BeginList = "";
                                        sBegin = "";
                                    }
                                }

                            }
                            else
                            {
                                if (objDt.Rows.Count > 0)
                                {
                                    if (sStaticTemplate != "<br/>")
                                    {
                                        objStr.Append(common.myStr(item["FieldName"]));
                                    }
                                }
                            }
                            if (objDs.Tables.Count > 1)
                            {

                                objDv = new DataView(objDs.Tables[1]);
                                objDv.RowFilter = "FieldId='" + common.myStr(item["FieldId"]) + "'";
                                objDt = objDv.ToTable();
                                DataView dvFieldType = new DataView(objDs.Tables[0]);
                                dvFieldType.RowFilter = "FieldId='" + common.myStr(item["FieldId"]) + "'";
                                DataTable dtFieldType = dvFieldType.ToTable("FieldType");
                                sBegin = "";
                                sEnd = "";

                                string sbeginTemp = string.Empty;
                                MakeFontWithoutBR("Fields", ref sBegin, ref sEnd, item);
                                // MakeFont("Fields", ref sBegin, ref sEnd, item);

                                sBegin = sBegin.Replace("font-weight: bold;", string.Empty);

                                for (int i = 0; i < objDv.ToTable().Rows.Count; i++)
                                {
                                    if (objDt.Rows.Count > 0)
                                    {

                                        sbeginTemp = common.myStr(ViewState["sBegin"]);
                                        if (sbeginTemp.StartsWith("<br/>"))
                                        {
                                            if (sbeginTemp.Length > 5)
                                            {
                                                sbeginTemp = sbeginTemp.Substring(0, 5);

                                                //objStrTmp.Append(sBegin + common.myStr(item["SectionName"]) + sEnd);
                                            }
                                        }



                                        string FType = common.myStr(dtFieldType.Rows[0]["FieldType"]);
                                        if (FType == "C")
                                        {
                                            FType = "C";
                                        }
                                        if (FType == "C" || FType == "D" || FType == "B" || FType == "R")
                                        {
                                            if (FType == "B")
                                            {
                                                objStr.Append(" : " + objDt.Rows[i]["TextValue"]);
                                                //objStr.Append("  " + objDt.Rows[i]["TextValue"]);
                                            }
                                            else
                                            {
                                                //////BindDataValue(objDs, objDt, objStr, i, FType) //comeented by niraj , create and added below overloading methd
                                                BindDataValue(objDs, objDt, objStr, i, FType, sBegin, sEnd);
                                            }
                                        }
                                        else if (FType == "T" || FType == "M" || FType == "S" || FType == "W")
                                        {
                                            if (common.myStr(ViewState["iTemplateId"]) != "163")
                                            {
                                                if (i == 0)
                                                {
                                                    if (FType == "W")
                                                    {
                                                        objStr.Append(sBegin + " " + common.myStr(objDt.Rows[i]["TextValue"]).Replace("<br />", "") + sEnd); // K.D
                                                        objStr.Replace("<div>", ""); objStr.Replace("</div>", "");
                                                        //  objStr.Append(sBegin + " " + common.myStr(objDt.Rows[i]["TextValue"]) + sEnd);

                                                    }
                                                    else if (FType == "M")
                                                    {
                                                        //objStr.Append(sBegin + " : " + common.myStr(objDt.Rows[i]["TextValue"]) + sEnd);
                                                        objStr.Append(sBegin + " " + common.myStr(objDt.Rows[i]["TextValue"]).Replace("\n", "<br/>") + sEnd);
                                                    }
                                                    else
                                                    {
                                                        //objStr.Append(sBegin + " : " + common.myStr(objDt.Rows[i]["TextValue"]) + sEnd);
                                                        objStr.Append(sBegin + " " + common.myStr(objDt.Rows[i]["TextValue"]).Replace("<", "&lt;").Replace(">", "&gt;") + sEnd);
                                                    }

                                                }
                                                else
                                                {
                                                    objStr.Append(sBegin + ", " + common.myStr(objDt.Rows[i]["TextValue"]) + sEnd);
                                                    //if (FType == "M" || FType == "W")
                                                    //{
                                                    //    objStr.Append(sBegin + ", " + common.myStr(objDt.Rows[i]["TextValue"]) + sEnd);
                                                    //}
                                                    //else
                                                    //{
                                                    //    objStr.Append(sBegin + ", " + common.myStr(objDt.Rows[i]["TextValue"]) + sEnd);

                                                    //}

                                                }
                                            }
                                            else
                                            {
                                                if (i == 0)
                                                {
                                                    objStr.Append(": " + common.myStr(objDt.Rows[i]["TextValue"]));
                                                }
                                                else
                                                {
                                                    objStr.Append(", " + common.myStr(objDt.Rows[i]["TextValue"]));
                                                }
                                            }
                                        }
                                        else if (FType == "L")
                                        {
                                            objStr.Append(BindStaticTemplates(common.myInt(objDt.Rows[0]["StaticTemplateId"]), common.myInt(objDt.Rows[0]["FieldId"])));
                                        }
                                        else if (FType == "O")
                                        {
                                            objStr.Append(sBegin + " : " + common.myStr(objDt.Rows[i]["TextValue"]) + sEnd);
                                        }
                                        else if (FType == "IM")
                                        {
                                            objStr.Append(BindNonTabularImageTypeFieldValueTemplates(objDt));
                                        }
                                        if (common.myStr(item["FieldsListStyle"]) == "")
                                        {
                                            if (ViewState["iTemplateId"].ToString() != "163")
                                            {
                                                if (FType != "C")
                                                {

                                                    if (common.myStr(objDt.Rows[i]["StaticTemplateId"]) == null || common.myStr(objDt.Rows[i]["StaticTemplateId"]) == string.Empty || common.myInt(objDt.Rows[i]["StaticTemplateId"]) == 0)
                                                    {

                                                    }
                                                    else
                                                    {
                                                        //yogesh 25/05/2022
                                                        //objStr.Append("<br />");

                                                    }

                                                }

                                            }
                                            else
                                            {
                                                if (FType != "C" && FType != "T")
                                                {
                                                    objStr.Append("<br />");
                                                }
                                            }
                                        }





                                    }
                                    sEnterBy = objDt.Rows[i]["EnterBy"].ToString();
                                    sVisitDate = objDt.Rows[i]["VisitDateTime"].ToString();
                                    //if (EntryType == "M" && sEnterBy != "" && sVisitDate != "")
                                    //{
                                    //    objStr.Append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=' font-size:8pt;'>(Entered By: " + sEnterBy + " Date/Time: " + sVisitDate + ")</span>");
                                    //}
                                }
                                sBegin = "";
                                sEnd = "";
                                dvFieldType.Dispose();
                                dtFieldType.Dispose();

                                // Cmt 25/08/2011
                                //if (objDt.Rows.Count > 0)
                                //{
                                //    if (objStr.ToString() != "")
                                //        objStr.Append(sEnd + "</li>");
                                //}
                            }

                            //objStr.Append(" <span style=\" font-weight:bold; font-size:medium; color:Gray\">|</span> ");
                        }

                        if (objStr.ToString() != "")
                        {
                            objStr.Append(EndList);
                        }
                    }
                    #endregion
                }
                string sDisplayEnteredBy = common.myStr(Session["DisplayEnteredByInCaseSheet"]);
                string EnterByDate = string.Empty;

                if (sDisplayEnteredBy.Equals("Y")
                    || (sDisplayEnteredBy.Equals("N") && common.myStr(HttpContext.Current.Session["OPIP"]).Equals("I") && !common.myStr(HttpContext.Current.Session["ControlOnlyByDisplayEnteredByInCaseSheet"]).ToUpper().Equals("Y")))
                {
                    int EnterById = 0;
                    if ((objStr.ToString() != "" || IsConfidential == true) && bool.Parse(TabularType) == false)
                    {
                        DataView dvValues = new DataView(objDs.Tables[1]);
                        dvValues.RowFilter = "SectionId=" + common.myStr(sectionId);
                        if (dvValues.ToTable().Rows.Count > 0)
                        {
                            EnterById = common.myInt(dvValues.ToTable().Rows[0]["EnteredById"]);
                            //objStr.Append("<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style='font-family: Tahoma; font-size:8pt;'>Entered By: " + common.myStr(dvValues.ToTable().Rows[0]["EnterBy"]) + " on " + common.myStr(dvValues.ToTable().Rows[0]["VisitDateTime"]) + "</span><br/>");

                            if (ViewState["CurrentTemplateFontName"] != null && !common.myStr(ViewState["CurrentTemplateFontName"]).Equals(string.Empty))
                            {
                                // objStr.Append("<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style='font-family: " + common.myStr(ViewState["CurrentTemplateFontName"]) + "; '>Entered By: " + common.myStr(dvValues.ToTable().Rows[0]["EnterBy"]) + " Date/Time: " + common.myStr(dvValues.ToTable().Rows[0]["VisitDateTime"]) + "</span><br/>");
                                objStr.Append("<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style='font-family: " + common.myStr(ViewState["CurrentTemplateFontName"]) + "; font-size:8pt;'>Entered By: " + common.myStr(dvValues.ToTable().Rows[0]["EnterBy"]) + "</span></b>");
                                EnterByDate = " on " + common.myStr(dvValues.ToTable().Rows[0]["VisitDateTime"]);
                            }
                            else
                            {
                                objStr.Append("<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style='font-family: Tahoma; font-size:8pt;'>Entered By: " + common.myStr(dvValues.ToTable().Rows[0]["EnterBy"]) + "</span></b>");
                                EnterByDate = " on " + common.myStr(dvValues.ToTable().Rows[0]["VisitDateTime"]);
                            }
                        }
                        dvValues.Dispose();
                    }
                    else
                    {
                        if ((objStr.ToString() != "" || IsConfidential == true) && bool.Parse(TabularType) == true)
                        {
                            DataView dvValues = new DataView(objDs.Tables[0]);
                            dvValues.RowFilter = "SectionId=" + common.myStr(sectionId) + " AND RecordId=" + RecordId + " AND IsData='D'";
                            if (dvValues.ToTable().Rows.Count > 0)
                            {
                                EnterById = common.myInt(dvValues.ToTable().Rows[0]["EnteredById"]);
                                // objStr.Append("<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style='font-family: Tahoma; font-size:8pt;'>Entered By: " + common.myStr(dvValues.ToTable().Rows[0]["EnterBy"]) + " on " + common.myStr(dvValues.ToTable().Rows[0]["EntryDate"]) + "</span><br/>");
                                if (ViewState["CurrentTemplateFontName"] != null && !common.myStr(ViewState["CurrentTemplateFontName"]).Equals(string.Empty))
                                {
                                    objStr.Append("<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style='font-family: " + common.myStr(ViewState["CurrentTemplateFontName"]) + "; font-size:8pt;'>Entered By: " + common.myStr(dvValues.ToTable().Rows[0]["EnterBy"]) + "</span></b>");
                                    EnterByDate = " on " + common.myStr(dvValues.ToTable().Rows[0]["EntryDate"]);
                                }
                                else
                                {
                                    objStr.Append("<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style='font-family: Tahoma; font-size:8pt;'>Entered By: " + common.myStr(dvValues.ToTable().Rows[0]["EnterBy"]) + "</span></b>");
                                    EnterByDate = " on " + common.myStr(dvValues.ToTable().Rows[0]["EntryDate"]);
                                }
                            }
                            dvValues.Dispose();
                        }
                    }

                    #region Footer Signature In Entered by
                    System.Collections.Generic.Dictionary<string, string> collHospitalSetupValues = new System.Collections.Generic.Dictionary<string, string>();

                    collHospitalSetupValues = common.GetFlagValueHospitalSetupMultiple(common.myInt(System.Web.HttpContext.Current.Session["HospitalLocationId"]), common.myInt(System.Web.HttpContext.Current.Session["FacilityId"]),
                            "IsShowSignatureWithEnteredByInCasesheet", sConString);

                    if (collHospitalSetupValues.ContainsKey("IsShowSignatureWithEnteredByInCasesheet"))
                    {
                        if (common.myStr(collHospitalSetupValues["IsShowSignatureWithEnteredByInCasesheet"]).Equals("Y"))
                        {
                            DataTable dt = new DataTable();
                            clsIVF objivf = new clsIVF(sConString);
                            clsExceptionLog objException = new clsExceptionLog();

                            try
                            {
                                //dt = objivf.getDoctorSignatureDetails(common.myInt(System.Web.HttpContext.Current.Session["DoctorId"]), common.myInt(System.Web.HttpContext.Current.Session["FacilityId"]), common.myInt(System.Web.HttpContext.Current.Session["HospitalLocationID"])).Tables[0];
                                dt = objivf.getDoctorSignatureDetails(EnterById, common.myInt(System.Web.HttpContext.Current.Session["FacilityId"]), common.myInt(System.Web.HttpContext.Current.Session["HospitalLocationID"])).Tables[0];

                                if (common.myStr(dt.Rows[0]["SignatureLine1"]).Trim().Length > 0)
                                {
                                    objStr.Append(" <b><span style='font-family: " + common.myStr(System.Web.HttpContext.Current.Session["CurrentTemplateFontName"]) + "; font-size:8pt;'> " + common.myStr(dt.Rows[0]["SignatureLine1"]).Trim() + "</span></b>");
                                }
                                if (common.myStr(dt.Rows[0]["SignatureLine2"]).Trim().Length > 0)
                                {
                                    objStr.Append(" <b><span style='font-family: " + common.myStr(System.Web.HttpContext.Current.Session["CurrentTemplateFontName"]) + "; font-size:8pt;'> ," + common.myStr(dt.Rows[0]["SignatureLine2"]).Trim() + "</span></b>");
                                }
                                if (common.myStr(dt.Rows[0]["SignatureLine3"]).Trim().Length > 0)
                                {
                                    objStr.Append(" <b><span style='font-family: " + common.myStr(System.Web.HttpContext.Current.Session["CurrentTemplateFontName"]) + "; font-size:8pt;'> ," + common.myStr(dt.Rows[0]["SignatureLine3"]).Trim() + "</span></b>");
                                }
                                if (common.myStr(dt.Rows[0]["SignatureLine4"]).Trim().Length > 0)
                                {
                                    objStr.Append(" <b><span style='font-family: " + common.myStr(System.Web.HttpContext.Current.Session["CurrentTemplateFontName"]) + "; font-size:8pt;'> ," + common.myStr(dt.Rows[0]["SignatureLine4"]).Trim() + "</span></b>");
                                }
                            }
                            catch (Exception Ex)
                            {
                                objException.HandleException(Ex);
                            }
                            finally
                            {
                                dt.Dispose();
                                objivf = null;
                                objException = null;
                            }
                        }
                    }
                    #endregion
                    objStr.Append(" <b><span style='font-family: " + common.myStr(System.Web.HttpContext.Current.Session["CurrentTemplateFontName"]) + "; font-size:8pt;'> " + EnterByDate + "</span></b>");

                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;

        }
        finally
        {
            objDv.Dispose();
            objDt.Dispose();
            dsMain.Dispose();
            objDs.Dispose();
            dsTabulerTemplate.Dispose();
        }
        return objStr.ToString();
    }
    private string BindNonTabularImageTypeFieldValueTemplates(DataTable dtIMTypeTemplate)
    {
        StringBuilder sb = new StringBuilder();
        if (dtIMTypeTemplate.Rows.Count > 0)
        {
            if (common.myStr(dtIMTypeTemplate.Rows[0]["ImagePath"]) != "")
            {
                sb.Append("<table id='dvImageType' runat='server'><tr><td>" + common.myStr(dtIMTypeTemplate.Rows[0]["TextValue"]) + "</td></tr><tr align='left'><td align='center'><img src='" + common.myStr(dtIMTypeTemplate.Rows[0]["ImagePath"]) + "' width='80px' height='80px' border='0' align='left' alt='Image' /></td></tr></table>");
            }
        }
        return sb.ToString();
    }
    private string BindStaticTemplates(int StaticTemplateId, int TemplateFieldId)
    {
        int RegId = 0;
        int EncounterId = 0;

        StringBuilder sb = new StringBuilder();
        StringBuilder sbStatic = new StringBuilder();
        StringBuilder sbTemplateStyle = new StringBuilder();
        DataSet dsTemplate = new DataSet();
        DataSet dsTemplateStyle = new DataSet();
        DataRow drTemplateStyle = null;
        DataTable dtTemplate = new DataTable();
        Hashtable hst = new Hashtable();
        string Templinespace = "";
        BaseC.DiagnosisDA fun;

        BindNotes bnotes = new BindNotes(sConString);
        fun = new BaseC.DiagnosisDA(sConString);

        string DoctorId = fun.GetDoctorId(common.myInt(Session["HospitalLocationID"]), Convert.ToInt16(common.myInt(Session["UserID"])));

        dsTemplateStyle = bnotes.GetTemplateStyle(common.myInt(Session["HospitalLocationId"]));

        dsTemplate = bnotes.GetEMRTemplates(common.myInt(ViewState["EncounterId"]), common.myInt(ViewState["RegistrationId"]), common.myInt(ViewState["EREncounterId"]).ToString());
        DataView dvFilterStaticTemplate = new DataView(dsTemplate.Tables[0]);
        dvFilterStaticTemplate.RowFilter = "PageId=" + StaticTemplateId;
        dtTemplate = dvFilterStaticTemplate.ToTable();

        sb.Append("<span style='" + string.Empty + "'>");

        if (dtTemplate.Rows.Count > 0)
        {
            if (common.myStr(dtTemplate.Rows[0]["TemplateName"]).Trim() == "Allergies"
                && common.myStr(dtTemplate.Rows[0]["DataStatus"]).Trim() == "AVAILABLE")
            {
                string strTemplateType = common.myStr(dtTemplate.Rows[0]["PageIdentification"]);
                strTemplateType = strTemplateType.Substring(0, 1);
                sbTemplateStyle = new StringBuilder();
                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                dv.RowFilter = "PageId =" + common.myStr(dtTemplate.Rows[0]["PageId"]);
                drTemplateStyle = null;// = dv[0].Row;
                if (dv.Count > 0)
                {
                    drTemplateStyle = dv[0].Row;
                    string sBegin = "", sEnd = "";
                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                }
                StringBuilder sbTemp = new StringBuilder();


                bnotes.BindAllergies(common.myInt(ViewState["RegistrationId"]), sbStatic, sbTemplateStyle, drTemplateStyle, Page, common.myInt(Session["HospitalLocationId"]).ToString(),
                            common.myInt(Session["UserID"]).ToString(), common.myStr(dtTemplate.Rows[0]["PageID"]),
                            common.myDate(Session["EncounterDate"]).ToString(),
                            common.myDate(Session["EncounterDate"]).ToString(), TemplateFieldId, "");

                // sb.Append(sbTemp + "<br/>");


                drTemplateStyle = null;
                Templinespace = "";
            }
            else if (common.myStr(dtTemplate.Rows[0]["TemplateName"]).Trim() == "Vitals"
                && common.myStr(dtTemplate.Rows[0]["DataStatus"]).Trim() == "AVAILABLE")
            {
                string strTemplateType = common.myStr(dtTemplate.Rows[0]["PageIdentification"]);
                strTemplateType = strTemplateType.Substring(0, 1);
                sbTemplateStyle = new StringBuilder();
                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                dv.RowFilter = "PageId =" + common.myStr(dtTemplate.Rows[0]["PageId"]);
                if (dv.Count > 0)
                {
                    drTemplateStyle = dv[0].Row;
                    string sBegin = "", sEnd = "";
                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                }
                StringBuilder sbTemp = new StringBuilder();


                bnotes.BindVitals(common.myInt(Session["HospitalLocationID"]).ToString(), common.myInt(ViewState["EncounterId"]), sbStatic, sbTemplateStyle, drTemplateStyle,
                                    Page, common.myStr(dtTemplate.Rows[0]["PageId"]), common.myInt(Session["UserID"]).ToString(),
                                    common.myDate(Session["EncounterDate"]).ToString(),
                                    common.myDate(Session["EncounterDate"]).ToString(), TemplateFieldId, common.myInt(ViewState["EREncounterId"]).ToString(), "");

                //sb.Append(sbTemp + "<br/>" + "<br/>");


                drTemplateStyle = null;
                Templinespace = "";

            }

            else if (common.myStr(dtTemplate.Rows[0]["TemplateName"]).Trim() == "Diagnosis"
                && common.myStr(dtTemplate.Rows[0]["DataStatus"]).Trim() == "AVAILABLE")
            {
                string strTemplateType = common.myStr(dtTemplate.Rows[0]["PageIdentification"]);
                strTemplateType = strTemplateType.Substring(0, 1);
                sbTemplateStyle = new StringBuilder();
                DataView dv = new DataView(dsTemplateStyle.Tables[0]);
                dv.RowFilter = "PageId =" + common.myStr(dtTemplate.Rows[0]["PageId"]);
                if (dv.Count > 0)
                {
                    drTemplateStyle = dv[0].Row;
                    string sBegin = "", sEnd = "";
                    Templinespace = common.myStr(drTemplateStyle["TemplateSpaceNumber"]);
                    MakeFontWithoutListStyle("Template", ref sBegin, ref sEnd, drTemplateStyle);
                }
                StringBuilder sbTemp = new StringBuilder();


                bnotes.BindAssessments(common.myInt(ViewState["RegistrationId"]), common.myInt(Session["HospitalLocationID"]), common.myInt(ViewState["EncounterId"]), Convert.ToInt16(common.myInt(Session["UserID"])),
                            DoctorId, sbStatic, sbTemplateStyle, drTemplateStyle, Page,
                            common.myStr(dtTemplate.Rows[0]["PageId"]), common.myInt(Session["UserID"]).ToString(),
                            common.myDate(DateTime.Now).ToString(),
                            common.myDate(DateTime.Now).ToString(), TemplateFieldId, common.myInt(ViewState["EREncounterId"]).ToString(), "");

                //sb.Append(sbTemp + "<br/>");

                drTemplateStyle = null;
                Templinespace = "";
            }
            //sb.Append("</span>");
        }
        return "<br/>" + sbStatic.ToString();
    }

    protected void BindDataValue(DataSet objDs, DataTable objDt, StringBuilder objStr, int i, string FType, string sBegin, string sEnd)
    {
        if (i == 0)
        {
            objStr.Append(sBegin + " : " + common.myStr(objDt.Rows[i]["TextValue"]) + sEnd);
        }
        else
        {
            if (FType != "C")
            {
                objStr.Append(sBegin + ", " + sBegin + common.myStr(objDt.Rows[i]["TextValue"]) + sEnd);
            }
            else
            {
                if (i == 0)
                {
                    objStr.Append(sBegin + " " + common.myStr(objDt.Rows[i]["TextValue"]) + sEnd);
                }
                else if (i + 1 == objDs.Tables[1].Rows.Count)
                {
                    objStr.Append(sBegin + " and " + common.myStr(objDt.Rows[i]["TextValue"]) + "." + sEnd);
                }
                else
                {
                    objStr.Append(sBegin + ", " + common.myStr(objDt.Rows[i]["TextValue"]) + sEnd);
                }
            }
        }
        //}
    }

    protected void MakeFontWithoutBR(string typ, ref string sBegin, ref string sEnd, DataRow item)
    {
        //string sBegin = "", sEnd = "";
        ArrayList aEnd = new ArrayList();
        if (common.myStr(item[typ + "ListStyle"]) == "1")
        {
            sBegin += "<li>";
            //aEnd.Add("</li>");
        }
        else if (common.myStr(item[typ + "ListStyle"]) == "2")
        {
            sBegin += "<li>";
            // aEnd.Add("</li>");
        }
        else
        {
            //if (common.myStr(ViewState["iTemplateId"]) != "163" && typ != "Fields")
            //{
            //    sBegin += "<br/>";
            //}
            //else if (common.myStr(ViewState["iTemplateId"]) == "163" && typ == "Fields")
            //{
            //    sBegin += "; ";
            //}
            //else
            //{
            //    sBegin += "<br/>";
            //}
        }

        if (common.myStr(item[typ + "Forecolor"]) != ""
            || common.myStr(item[typ + "FontSize"]) != ""
            || common.myStr(item[typ + "FontStyle"]) != "")
        {
            sBegin += "<span style='";
            if (common.myStr(item[typ + "FontSize"]) != "")
            {
                sBegin += " font-size:" + item[typ + "FontSize"] + ";";
            }
            else
            {
                sBegin += getDefaultFontSize();
            }
            if (common.myStr(item[typ + "Forecolor"]) != "")
            {
                sBegin += " color: #" + item[typ + "Forecolor"] + ";";
            }
            if (common.myStr(item[typ + "FontStyle"]) != "")
            {
                sBegin += GetFontFamily(typ, item);
            }
        }
        if (common.myStr(item[typ + "Bold"]) == "True")
        {
            sBegin += " font-weight: bold;";
        }
        if (common.myStr(item[typ + "Italic"]) == "True")
        {
            sBegin += " font-style: italic;";
        }
        if (common.myStr(item[typ + "Underline"]) == "True")
        {
            sBegin += " text-decoration: underline;";
        }

        aEnd.Add("</span>");
        for (int i = aEnd.Count - 1; i >= 0; i--)
        {
            sEnd += aEnd[i];
        }
        //sEnd += "<br/>";
        if (sBegin != "")
        {
            sBegin += " '>";
        }
    }
    private StringBuilder getIVFPatient()
    {
        StringBuilder sb = new StringBuilder();
        try
        {

            DataSet ds = new DataSet();

            clsIVF objivf = new clsIVF(sConString);

            ds = objivf.getIVFPatient(common.myInt(ViewState["RegistrationId"]), 0);

            if (ds.Tables[0].Rows.Count > 0)
            {
                DataView DV = ds.Tables[0].Copy().DefaultView;
                DV.RowFilter = "RegistrationId=" + common.myInt(ViewState["RegistrationId"]);

                DataTable tbl = DV.ToTable();

                if (tbl.Rows.Count > 0)
                {
                    DataRow DR = tbl.Rows[0];

                    DataView DVSpouse = ds.Tables[0].Copy().DefaultView;
                    DVSpouse.RowFilter = "RegistrationId<>" + common.myInt(ViewState["RegistrationId"]);
                    DataTable tblSpouse = DVSpouse.ToTable();

                    sb.Append("<div><table  width='100%' style='font-size:smaller; border-collapse:collapse;' cellpadding='2' cellspacing='3' ><tr valign='top'>");
                    //sb.Append("<td style='width: 72px;'>" + common.myStr(GetGlobalResourceObject("PRegistration", "ivfno")) + "</td><td>: " + common.myStr(Session["IVFNo"]) + "</td>");
                    sb.Append("<td style='width: 72px;'>" + common.myStr(GetGlobalResourceObject("PRegistration", "regno")) + "</td><td>: " + common.myStr(DR["RegistrationNo"]) + "</td>");
                    sb.Append("</tr>");

                    sb.Append("<tr valign='top'>");
                    sb.Append("<td>" + common.myStr(GetGlobalResourceObject("PRegistration", "PatientName")) + "</td><td>: " + common.myStr(DR["PatientName"]) + "</td>");
                    sb.Append("<td style='width: 109px;'>Age/Gender</td><td>: " + common.myStr(DR["Age/Gender"]) + "</td>");
                    sb.Append("</tr>");

                    if (tblSpouse.Rows.Count > 0)
                    {
                        sb.Append("<tr valign='top'>");
                        sb.Append("<td>Spouse</td><td>: " + common.myStr(tblSpouse.Rows[0]["PatientName"]) + "</td>");
                        sb.Append("<td>Spouse Age/Gender</td><td>: " + common.myStr(tblSpouse.Rows[0]["Age/Gender"]) + "</td>");
                        sb.Append("</tr>");
                    }

                    sb.Append("<tr valign='top'>");
                    sb.Append("<td>Reg. Date</td><td>: " + common.myStr(DR["RegistrationDate"]) + "</td>");
                    sb.Append("<td>Occupation</td><td>: " + common.myStr(DR["Occupation"]) + "</td>");
                    sb.Append("</tr>");

                    sb.Append("<tr valign='top'>");
                    sb.Append("<td>" + common.myStr(GetGlobalResourceObject("PRegistration", "email")) + "</td><td>: " + common.myStr(DR["Email"]) + "</td>");
                    sb.Append("<td>" + common.myStr(GetGlobalResourceObject("PRegistration", "phone")) + "</td><td>: " + common.myStr(DR["PhoneHome"]) + "</td>");
                    sb.Append("</tr>");

                    sb.Append("<tr valign='top'>");
                    sb.Append("<td>" + common.myStr(GetGlobalResourceObject("PRegistration", "Address")) + "</td><td>: " + common.myStr(DR["PatientAddress"]) + "</td>");
                    sb.Append("<td>" + common.myStr(GetGlobalResourceObject("PRegistration", "mobile")) + "</td><td>: " + common.myStr(DR["MobileNo"]) + "</td>");
                    sb.Append("</tr>");

                    sb.Append("</table></div>");
                }

                sb.Append("<hr />");

            }
            return sb;
        }

        catch (Exception Ex)
        {

            sb = new StringBuilder();
            return sb;
        }
    }

    #endregion

    #region Signature
    //private void getDoctorImage()
    //{
    //    BaseC.clsLISPhlebotomy lis = new BaseC.clsLISPhlebotomy(sConString);
    //    BaseC.User user = new BaseC.User(sConString);
    //    DataSet ds = new DataSet();
    //    int intCheckImage = 0; // Check image from signed note signature
    //    Stream strm;
    //    Object img;
    //    DateTime SignatureDate;
    //    String UserName = "", ShowSignatureDate = "", UserDoctorId = "";
    //    String SignImage = "", SignNote = "";
    //    String DivStartTag = "<div id='dvDoctorImage'>";
    //    String SignedDate = DateTime.Now.ToString("dd/MM/yyyy hh:mm tt");
    //    StringBuilder strSQL = new StringBuilder();
    //    String strSingImagePath = "";
    //    String Education = string.Empty;
    //    String FileName = string.Empty;
    //    string strimgData = string.Empty;
    //    try
    //    {
    //        if (common.myInt(Session["DoctorId"]) > 0)
    //        {
    //            ds = lis.getDoctorImageDetails(common.myInt(Session["DoctorId"]), common.myInt(Session["HospitalLocationId"]), common.myInt(Session["FacilityId"]),
    //                                            common.myInt(ViewState["EncounterId"]));
    //            if (ds.Tables[1].Rows.Count > 0)
    //            {
    //                DataRow dr = ds.Tables[1].Rows[0] as DataRow;
    //                if (common.myStr(dr["SignatureImage"]) != "")
    //                {
    //                    SignedDate = common.myStr(dr["SignedDate"]);
    //                    FileName = common.myStr(dr["SignatureImageName"]);
    //                    ShowSignatureDate = " on " + SignedDate;
    //                    Education = common.myStr(dr["SignedProviderEducation"]);
    //                    img = dr["SignatureImage"];
    //                    UserName = common.myStr(ds.Tables[0].Rows[0]["EmployeeName"]);
    //                    Session["EmpName"] = common.myStr(ds.Tables[0].Rows[0]["EmployeeName"]).Trim();
    //                    SignatureDate = Convert.ToDateTime(ds.Tables[0].Rows[0]["SignatureWithDateTime"].ToString());
    //                    UserDoctorId = common.myStr(ds.Tables[0].Rows[0]["DoctorId"]);

    //                    ShowSignatureDate = " on " + SignatureDate.ToString("dd/MM/yyyy hh:mm tt");
    //                    strm = new MemoryStream((byte[])img);
    //                    byte[] buffer = new byte[strm.Length];
    //                    int byteSeq = strm.Read(buffer, 0, common.myInt(strm.Length));
    //                    FileStream fs = new FileStream(Server.MapPath("~/PatientDocuments/DoctorImages/" + FileName), FileMode.Create, FileAccess.Write);

    //                    fs.Write(buffer, 0, byteSeq);
    //                    fs.Close();
    //                    fs.Dispose();
    //                    RTF1.Snippets.Add("<img width='100px' height='80px' src='/PatientDocuments/DoctorImages/" + FileName.Trim() + "' />", "<img src='/PatientDocuments/DoctorImages/" + FileName + "' />");
    //                    SignImage = "<img width='100px' height='80px' src='/PatientDocuments/DoctorImages/" + FileName + "' />";
    //                    strSingImagePath = Server.MapPath("~") + @"\PatientDocuments\DoctorImages\" + FileName;

    //                    intCheckImage = 1;
    //                    strimgData = common.myStr(dr["ImageId"]);
    //                    SignNote = "Electronically signed by " + UserName.Trim() + " " + Education.Trim() + " " + ShowSignatureDate.Trim() + "</div>";
    //                }
    //            }
    //            if (ds.Tables[0].Rows.Count > 0)
    //            {
    //                if (intCheckImage == 0)
    //                {
    //                    DataRow dr = ds.Tables[0].Rows[0] as DataRow;
    //                    img = dr["SignatureImage"];
    //                    FileName = common.myStr(dr["ImageType"]).Trim();
    //                    UserName = common.myStr(dr["EmployeeName"]).Trim();
    //                    Session["EmpName"] = common.myStr(dr["EmployeeName"]).Trim();
    //                    SignatureDate = Convert.ToDateTime(ds.Tables[0].Rows[0]["SignatureWithDateTime"].ToString());
    //                    UserDoctorId = common.myStr(dr["DoctorId"]);
    //                    ShowSignatureDate = " on " + SignatureDate.ToString("dd/MM/yyyy hh:mm tt");

    //                    if (common.myStr(dr["Education"]).Trim() != ""
    //                        && common.myStr(dr["Education"]).Trim() != "&nbsp;")
    //                    {
    //                        Education = common.myStr(dr["Education"]);
    //                    }
    //                    SignNote = "Electronically signed by " + UserName + " " + Education + " " + ShowSignatureDate + "</div>";

    //                    if (FileName != "")
    //                    {
    //                        RTF1.Snippets.Add("<img width='100px' height='80px' src='/PatientDocuments/DoctorImages/" + FileName + "' />", "<img src='/PatientDocuments/DoctorImages/" + FileName + "' />");
    //                        SignImage = "<img width='100px' height='80px' src='../PatientDocuments/DoctorImages/" + FileName + "' />";
    //                        strSingImagePath = Server.MapPath("~") + @"\PatientDocuments\DoctorImages\" + FileName;
    //                        strimgData = common.myStr(dr["ImageId"]);
    //                    }
    //                    else
    //                    if (common.myStr(dr["SignatureImage"]) != "")
    //                    {
    //                        strm = new MemoryStream((byte[])img);
    //                        byte[] buffer = new byte[strm.Length];
    //                        int byteSeq = strm.Read(buffer, 0, common.myInt(strm.Length));
    //                        FileStream fs = new FileStream(Server.MapPath("~/PatientDocuments/DoctorImages/" + FileName), FileMode.Create, FileAccess.Write);

    //                        fs.Write(buffer, 0, byteSeq);
    //                        fs.Close();
    //                        fs.Dispose();
    //                        RTF1.Snippets.Add("<img width='100px' height='80px' src='/PatientDocuments/DoctorImages/" + FileName + "' />", "<img src='/PatientDocuments/DoctorImages/" + FileName + "' />");
    //                        SignImage = "<img width='100px' height='80px' src='../PatientDocuments/DoctorImages/" + FileName + "' />";
    //                        strSingImagePath = Server.MapPath("~") + @"\PatientDocuments\DoctorImages\" + FileName;

    //                        strimgData = common.myStr(dr["ImageId"]);
    //                    }
    //                }
    //            }
    //            if (File.Exists(strSingImagePath))
    //            {
    //                //hdnDoctorImage.Value = DivStartTag + "<table  border='0' cellpadding='0' cellspacing='0' style='font-size:10pt; font-family:Tahoma;'><tbody><tr><td align='right'>" + SignImage + "</td></tr></tbody></table>" + SignNote + "<br />";
    //                hdnDoctorImage.Value = DivStartTag + "<table  border='0' cellpadding='0' cellspacing='0' style='font-size:10pt; font-family:Tahoma;'><tbody><tr><td align='right'>" + SignImage + "</td></tr></tbody></table>";

    //            }
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
    //        lblMessage.Text = "Error: " + ex.Message;

    //    }
    //    finally
    //    {
    //        lis = null;
    //        ds.Dispose();
    //        strm = null;
    //        img = null;
    //        UserName = null;
    //        ShowSignatureDate = null;
    //        UserDoctorId = null;
    //        SignImage = null;
    //        SignNote = null;
    //        DivStartTag = null;
    //        SignedDate = null;
    //        strSQL = null;
    //        strSingImagePath = null;
    //    }
    //}


    #endregion

    protected void gvOrdersAndProcedures_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            HiddenField hdnstat = (HiddenField)e.Row.FindControl("hdnstat");

            if (common.myBool(hdnstat.Value) == true)
            {
                //added by bhakti
                e.Row.Cells[1].BackColor = System.Drawing.Color.Red;
            }
        }
    }

    protected void ImgVitalHis_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            // var url = '/LIS/Phlebotomy/PatientHistory.aspx?CF=&Master=Blank&EncId=<%= Session["EncounterId"]%>&RegNo=<%=Session["RegistrationNo"]%>&Source=O&Flag=LIS&Station=All';

            RadWindowForNew.NavigateUrl = "~/EMR/Vitals/PreviousVitals.aspx?POPUP=StaticTemplate";
            RadWindowForNew.Title = "Vital History";
            RadWindowForNew.OnClientClose = "addVitalsOnClientClose";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    protected void ImageButtonDiagnosisHIs_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/Assessment/DiagnosisHistory.aspx?From=POPUP";
            RadWindowForNew.OnClientClose = "";
            RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code 
            RadWindow1.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.Title = "Diagnosis History";
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    protected void ImgBtnAttachment_Click(object sender, ImageClickEventArgs e)
    {
        try
        {

            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/AttachDocumentFTP.aspx?MASTER=No&IsEMRPopUp=1&RNo=" + common.myStr(Session["RegistrationNo"]) + "";
            RadWindowForNew.OnClientClose = "";
            RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code 
            RadWindow1.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.Title = "Attachment";
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }

    }

    protected void ImageButtonOTRequest_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/OTScheduler/OTRequest.aspx?POPUP=POPUP&IsEMRPopUp=1";
            RadWindowForNew.OnClientClose = "";
            RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code 
            RadWindow1.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.Title = "OT Request";
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    protected void ImageButtonProgressNote_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/Templates/DoctorProgressNote.aspx?MP=NO";
            RadWindowForNew.OnClientClose = "";
            RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.Title = "Doctor Progress Note";
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    protected void lnkRemarks_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=26127&&SingleScreenTemplateCode=UP";
            //RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3140&SingleScreenTemplateCode=EXM";
            //RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3140&SingleScreenTemplateCode=EXM";
            RadWindowForNew.Width = 650;
            RadWindowForNew.Height = 400;
            //RadWindowForNew.Top = 10;
            //RadWindowForNew.Left = 10;
            RadWindowForNew.OnClientClose = "addTemplatesOnClientClose";
            RadWindowForNew.Title = "Follow UP";
            RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    protected void ImageButtonFollowUpAppointment_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/Appointment/AppSchedulerV1.aspx?MPG=P3&MASTER=NO";
            RadWindowForNew.OnClientClose = "";
            RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.Title = "Follow Up Appointment";
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    //private void BindTemplate()
    //{
    //    DataSet ds = new DataSet();
    //    clsIVF emr = new clsIVF(sConString);
    //    try
    //    {
    //        ds = emr.getEMRTemplateTypeWise(Convert.ToInt32(Session["HospitalLocationID"]), "CP", "");
    //        if (ds.Tables[0].Rows.Count > 0)
    //        {
    //            ddlTemplateName.DataSource = ds.Tables[0];
    //            ddlTemplateName.DataTextField = "TemplateName";
    //            ddlTemplateName.DataValueField = "TemplateId";
    //            ddlTemplateName.DataBind();
    //        }
    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //    finally
    //    {
    //        ds.Dispose();
    //        emr = null; ;
    //    }
    //}




    protected void ImageButton19_Click(object sender, ImageClickEventArgs e)
    {
        RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=26127&&SingleScreenTemplateCode=UP";
        //RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3140&SingleScreenTemplateCode=EXM";
        //RadWindowForNew.NavigateUrl = "~/EMR/Templates/Default.aspx?IsEMRPopUp=1&DisplayMenu=1&TemplateId=3140&SingleScreenTemplateCode=EXM";
        RadWindowForNew.Width = 650;
        RadWindowForNew.Height = 400;
        //RadWindowForNew.Top = 10;
        //RadWindowForNew.Left = 10;
        RadWindowForNew.OnClientClose = "addRequestFormOnClientClose";
        RadWindowForNew.Title = "Follow UP";
        RadWindowForNew.VisibleOnPageLoad = true; //Set this property to True for showing window from code 
        RadWindowForNew.Modal = true;
        RadWindowForNew.VisibleStatusbar = false;
        RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
    }

    protected void btnSaveCarePlan_Click(object sender, EventArgs e)
    {
        SaveCarePlanData(0); //Not
    }
    private void SaveCarePlanData(int iSign)
    {
        //BaseC.ParseData objParse = new BaseC.ParseData();
        //BaseC.clsEMR objEMR = new BaseC.clsEMR(sConString);

        string strMsg = string.Empty;
        //BaseC.EMRAllergy objAllergy = new BaseC.EMRAllergy(sConString);
        DataSet dsAllergy = new DataSet();

        StringBuilder strXMLDrug1 = new StringBuilder();
        StringBuilder objXMLProblem = new StringBuilder();
        StringBuilder strNonTabularH = new StringBuilder();
        StringBuilder strNonTabularPT = new StringBuilder();
        StringBuilder strNonTabularE = new StringBuilder();
        StringBuilder strNonTabularP = new StringBuilder();

        StringBuilder xmlTemplateDetails = new StringBuilder();
        StringBuilder strXMLOrderProcedure = new StringBuilder();
        StringBuilder strXMLOrderProcedure1 = new StringBuilder();
        StringBuilder strXMLDiagnosis = new StringBuilder();



        ArrayList coll = new ArrayList();
        try
        {
            if (!common.myBool(ViewState["SaveEnable"]) && !common.myBool(Session["isEMRSuperUser"]))
            {
                Alert.ShowAjaxMsg("You are not authorized to Save", Page);
                return;
            }
            if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE")
                && !common.myBool(Session["isEMRSuperUser"]))
            {
                if (!common.myBool(ViewState["SaveEnable"]))
                {
                    Alert.ShowAjaxMsg("You are not authorized to Save", Page);
                    return;
                }
            }
            ClearMessageControl();

            #region order And Procedure            //gvtemplate palendra saving work
            coll = new ArrayList();
            for (int rowCount = 0; rowCount < gvOrdersAndProcedures.Rows.Count; rowCount++)
            {
                HiddenField hdnServiceID = (HiddenField)gvOrdersAndProcedures.Rows[rowCount].Cells[0].FindControl("hdnServiceID");
                if (common.myStr(hdnServiceID.Value) != "")
                {
                    coll.Add(common.myInt(hdnServiceID.Value));//templateId smallint,              
                    strXMLOrderProcedure.Append(common.setXmlTable(ref coll));
                }
            }
            //gvcare template
            #endregion
            #region Diagnosis            //gvtemplate palendra saving work
            coll = new ArrayList();
            foreach (GridViewRow item in gvDiagnosisDetails.Rows)
            {
                Label lblIcdId = (Label)item.FindControl("lblIcdId");
                coll.Add(common.myInt(lblIcdId.Text));
                strXMLDiagnosis.Append(common.setXmlTable(ref coll));
            }
            #endregion
            #region order And Procedure            //gvtemplate palendra saving work
            ArrayList coll1 = new ArrayList();
            for (int rowCount = 0; rowCount < gvPatientServiceDetail.Rows.Count; rowCount++)
            {
                HiddenField hdnServiceID = (HiddenField)gvPatientServiceDetail.Rows[rowCount].Cells[0].FindControl("hdnServiceID");
                if (common.myStr(hdnServiceID.Value) != "")
                {
                    coll1.Add(common.myInt(hdnServiceID.Value));//templateId smallint,              
                    strXMLOrderProcedure1.Append(common.setXmlTable(ref coll1));
                }
            }
            //gvcare template
            #endregion
            #region Prescription
            //gvPrescriptions palendra saving work
            coll = new ArrayList();
            for (int rowCount = 0; rowCount < gvPrescriptions.Rows.Count; rowCount++)
            {
                HiddenField hdnItemId1 = (HiddenField)gvPrescriptions.Rows[rowCount].Cells[0].FindControl("hdnItemId");
                HiddenField hdnIndentId1 = (HiddenField)gvPrescriptions.Rows[rowCount].Cells[0].FindControl("hdnIndentId");
                HiddenField hdnItemName1 = (HiddenField)gvPrescriptions.Rows[rowCount].Cells[0].FindControl("hdnItemName");
                Label lblDetails = (Label)gvPrescriptions.Rows[rowCount].Cells[1].FindControl("lblDetails");
                Label lblPrescriptionDetail = (Label)gvPrescriptions.Rows[rowCount].Cells[3].FindControl("lblPrescriptionDetail");

                //ViewState["GridDataDetail"]

                if (common.myStr(hdnIndentId1.Value) != "")
                {
                    DataView dvFilterHistory = new DataView((DataTable)ViewState["GridDataDetail"]);
                    dvFilterHistory.RowFilter = "ItemId='" + common.myInt(hdnItemId1.Value) + "'";
                    if (dvFilterHistory.ToTable().Rows.Count > 0)
                    {
                        coll.Add(common.myInt(hdnItemId1.Value));//VitalId smallint,              
                        coll.Add(common.myInt(hdnIndentId1.Value));//EnteredVitalValue1 varchar(50),
                        coll.Add(common.myStr(hdnItemName1.Value));//EnteredUnitId1 smallint,
                        coll.Add(common.myInt(dvFilterHistory.ToTable().Rows[0]["Dose"]));
                        coll.Add(common.myInt(dvFilterHistory.ToTable().Rows[0]["UnitId"]));
                        coll.Add(common.myInt(dvFilterHistory.ToTable().Rows[0]["FrequencyId"]));
                        coll.Add(common.myInt(dvFilterHistory.ToTable().Rows[0]["Duration"]));
                        strXMLDrug1.Append(common.setXmlTable(ref coll));
                    }

                }
            }
            //gvPrescriptions
            #endregion
            #region  Problem
            coll = new ArrayList();
            if (!editorChiefComplaints.Text.Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                //foreach (GridViewRow gv in gvProblemDetails.Rows)
                //{
                //    if (common.myStr(editorChiefComplaints.Text).Trim().Equals(common.myStr(((HiddenField)gv.FindControl("hdnProblem")).Value)))
                //    {
                //        if (!common.myStr(txtedit.Text).Trim().Equals(common.myStr(((HiddenField)gv.FindControl("hdnProblemId")).Value)))
                //        {
                //            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                //            lblMessage.Text = "This  (" + common.myStr(editorChiefComplaints.Text).Trim() + ")  already exists in Today's Problems!";
                //            return;
                //        }
                //    }
                //}
                string editID;
                if (!(txtedit.Text.Trim().Equals(string.Empty)))
                {
                    editID = txtedit.Text;
                }
                else
                {
                    editID = string.Empty;
                }
                string TemplateId = Request.QueryString["POPUP"] != null && common.myStr(Request.QueryString["POPUP"]).Equals("StaticTemplate") ? common.myStr(Request.QueryString["TemplateFieldId"]) : "0";
                //string strProblem = objParse.ParseQ(common.myStr(editorChiefComplaints.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty));
                string strProblem = editorChiefComplaints.Text.Trim();
                if (common.myLen(strProblem) > 2000)
                {
                    Alert.ShowAjaxMsg("Chief complaints (free text) length must be less than 2000 character!", this.Page);
                    return;
                }
                strProblem = strProblem.Replace("\n", "<br/>");//removed "\r" bhakti
                // coll.Add(editID);//Id
                if (common.myInt(hdnProblemId.Value) > 0)
                    coll.Add(common.myInt(hdnProblemId.Value));//ProblemId
                else
                    coll.Add(0);
                coll.Add(0);//ProblemId
                coll.Add(strProblem);//Problem
                coll.Add(0);//DurationID
                coll.Add(string.Empty);//Duration
                coll.Add(0);//ContextID
                coll.Add(string.Empty);//Context
                coll.Add(0);//SeverityId
                coll.Add(string.Empty);//Severity
                coll.Add(0);//IsPrimary
                coll.Add(0);//IsChronic
                coll.Add(common.myStr(Session["DoctorID"]));//DoctorId
                coll.Add(common.myStr(Session["FacilityId"]));//FacilityId
                coll.Add(0);//SCTId
                coll.Add(string.Empty);//QualityIDs
                coll.Add(0);//LocationID
                coll.Add(string.Empty);//Location
                coll.Add(0);//OnsetID
                coll.Add(0);//AssociatedProblemId1
                coll.Add(string.Empty);//AssociatedProblem1
                coll.Add(0);//AssociatedProblemId2
                coll.Add(string.Empty);//AssociatedProblem2
                coll.Add(0);//AssociatedProblemId3
                coll.Add(string.Empty);//AssociatedProblem3
                coll.Add(0);//AssociatedProblemId4
                coll.Add(string.Empty);//AssociatedProblem4
                coll.Add(0);//AssociatedProblemId5
                coll.Add(string.Empty);//AssociatedProblem5
                coll.Add(string.Empty);//Side
                coll.Add(0);//ConditionId
                coll.Add(0);//Percentage
                coll.Add(0);//Durations
                coll.Add(string.Empty);//DurationType
                coll.Add(TemplateId);//TemplateFieldId
                coll.Add(0);//ComplaintSearchId
                objXMLProblem.Append(common.setXmlTable(ref coll));
            }
            #endregion
            #region History
            coll = new ArrayList();
            //bindVisitRecord(HISTemplateId);
            if (!common.myStr(txtWHistory.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                string strHistory = common.myStr(txtWHistory.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty);
                strHistory = strHistory.Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(HISFieldId); //FieldId
                coll.Add("W");
                coll.Add(strHistory);
                coll.Add("0");
                coll.Add(0); //coll.Add(RowCaptionId);
                if (common.myInt(hdnWRecordId.Value) > 0) // !common.myStr(Session["RecordId"]).Equals(string.Empty)
                {
                    coll.Add(common.myInt(hdnWRecordId.Value));
                    //coll.Add(common.myInt(hdnHistoryRecordId.Value));
                }
                else
                {
                    coll.Add(0);//common.myInt(ViewState["RecordId"])
                }
                coll.Add(HISSectionId);
                strNonTabularH.Append(common.setXmlTable(ref coll));
            }
            #endregion
            #region Examination
            coll = new ArrayList();
            //bindVisitRecord(EXMTemplateId);
            if (!common.myStr(txtWExamination.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                string strExamination = common.myStr(txtWExamination.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty);
                strExamination = strExamination.Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(EXMFieldId); //fieldId
                coll.Add("W");
                coll.Add(strExamination);
                coll.Add("0");
                coll.Add(0); //coll.Add(RowCaptionId);
                if (common.myInt(hdnWEmRecordId.Value) > 0)
                {
                    coll.Add(common.myInt(hdnWEmRecordId.Value));
                    //coll.Add(common.myInt(hdnHistoryRecordId.Value));
                }
                else
                {
                    coll.Add(0);//common.myInt(ViewState["RecordId"])
                }
                //if (!common.myStr(hdnExaminationRecordId.Value).Equals(string.Empty))
                //{
                //    coll.Add(common.myInt(hdnExaminationRecordId.Value));
                //}
                //else
                //{
                //    coll.Add(0);//common.myInt(ViewState["RecordId"])
                //}
                coll.Add(EXMSectionId);
                strNonTabularE.Append(common.setXmlTable(ref coll));
            }
            #endregion
            #region PlanofCare
            coll = new ArrayList();
            //bindVisitRecord(POCTemplateId);
            if (!common.myStr(txtWPlanOfCare.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                string strPlanOfCare = common.myStr(txtWPlanOfCare.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty);
                strPlanOfCare = strPlanOfCare.Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(POCFieldId); //coll.Add(item2.Cells[0].Text);
                coll.Add("W");
                coll.Add(strPlanOfCare);
                coll.Add("0");
                coll.Add(0); //coll.Add(RowCaptionId);
                if (common.myInt(hdnWPlanRecordId.Value) > 0)
                {
                    coll.Add(common.myInt(hdnWPlanRecordId.Value));
                    //coll.Add(common.myInt(hdnHistoryRecordId.Value));
                }
                else
                {
                    coll.Add(0);//common.myInt(ViewState["RecordId"])
                }
                //if (!common.myStr(hdnPlanOfCareRecordId.Value).Equals(string.Empty))
                //{
                //    coll.Add(common.myInt(hdnPlanOfCareRecordId.Value));
                //}
                //else
                //{
                //    coll.Add(0);//common.myInt(ViewState["RecordId"])
                //}
                coll.Add(POCSectionId);
                strNonTabularP.Append(common.setXmlTable(ref coll));
            }
            #endregion
            #region Remarks
            coll = new ArrayList();

            if (!common.myStr(txtRemarks.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty).Equals(string.Empty))
            {
                string strRemarks = common.myStr(txtRemarks.Text).Replace("<br />\n<div id=\"__zsc_once\"></div>", string.Empty);
                strRemarks = strRemarks.Replace("\n", "<br/>");
                coll = new ArrayList();
                coll.Add(INFieldId); //coll.Add(item2.Cells[0].Text);
                coll.Add("W");
                coll.Add(strRemarks);
                coll.Add("0");
                coll.Add(0); //coll.Add(RowCaptionId);
                if (common.myInt(hdntxtRemarksId.Value) > 0)
                {
                    coll.Add(common.myInt(hdntxtRemarksId.Value));
                    //coll.Add(common.myInt(hdnHistoryRecordId.Value));
                }
                else
                {
                    coll.Add(0);//common.myInt(ViewState["RecordId"])
                }

                coll.Add(INSectionId);
                strNonTabularP.Append(common.setXmlTable(ref coll));
            }
            #endregion

            xmlTemplateDetails.Append(strNonTabularH.ToString());
            xmlTemplateDetails.Append(strNonTabularPT.ToString());
            xmlTemplateDetails.Append(strNonTabularE.ToString());
            xmlTemplateDetails.Append(strNonTabularP.ToString());

            string ServiceURL = WebAPIAddress.ToString() + "api/EMRAPI/SaveSingleScreenCarePlanMaster";
            APIRootClass.SaveSinglecarePlanScreenDashboard objRoot = new global::APIRootClass.SaveSinglecarePlanScreenDashboard();

            objRoot.PlanName = common.myStr(txtPlanName.Text);
            objRoot.HospitalLocationId = common.myInt(Session["HospitalLocationId"]);
            objRoot.RegistrationId = common.myInt(Session["RegistrationId"]);
            objRoot.EncounterId = common.myInt(Session["EncounterId"]);
            objRoot.FacilityId = common.myInt(Session["FacilityId"]);
            objRoot.UserId = common.myInt(Session["UserId"]);
            objRoot.xmlProblemDetails = objXMLProblem.ToString();
            objRoot.strXMLDrug = strXMLDrug1.ToString();
            objRoot.xmlTemplateDetails = xmlTemplateDetails.ToString();
            objRoot.xmlOrderProcedure = strXMLOrderProcedure.ToString();
            objRoot.xmlOrderProcedure1 = strXMLOrderProcedure1.ToString();
            objRoot.xmlDiagnosis = strXMLDiagnosis.ToString();


            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;

            string inputJson = (new JavaScriptSerializer()).Serialize(objRoot);
            string sValue = client.UploadString(ServiceURL, inputJson);
            sValue = JsonConvert.DeserializeObject<string>(sValue);

            gvHistory.EditIndex = -1;
            gvPrevTreatment.EditIndex = -1;
            gvExamination.EditIndex = -1;
            gvNutritional.EditIndex = -1;
            gvPlanOfCare.EditIndex = -1;
            gvCostAnalysis.EditIndex = -1;
            gvData.EditIndex = -1;
            gvNonDrugOrder.EditIndex = -1;
            gvPHistory.EditIndex = -1;

            BindCommonData(string.Empty, string.Empty, string.Empty, 0, 1);
            ClearMessageControl();


            txtedit.Text = string.Empty;
            //editorChiefComplaints.Text = string.Empty;
            ClearEditorControls();
            ddlAllergySeverity.SelectedIndex = 0;
            hdnAllergyType.Value = string.Empty;
            ddlBrand.Text = string.Empty;
            hdnItemId.Value = string.Empty;
            hdnItemName.Value = string.Empty;
            ViewState["strId"] = null;
            ViewState["_ID"] = null;
            hdnNonDrugOrderId.Value = null;
            hdnHistoryRecordId.Value = string.Empty;
            hdnPastHistoryRecordId.Value = string.Empty;
            hdnPreviousTreatmentRecordId.Value = string.Empty;
            hdnExaminationRecordId.Value = string.Empty;
            hdnNutritionalStatusRecordId.Value = string.Empty;
            hdnPlanOfCareRecordId.Value = string.Empty;
            hdnCostAnalysisRecordId.Value = string.Empty;
            ddlDiagnosisSearchCodes.SelectedIndex = 0;
            ddlDoctor.SelectedIndex = ddlDoctor.Items.IndexOf(ddlDoctor.Items.FindByValue(common.myStr(Session["EmployeeId"])));
            if (sValue.ToUpper().Contains(" UPDATED") || sValue.ToUpper().Contains(" SAVED"))
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                lblMessage.Text = sValue;
                lblmessage1.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                lblmessage1.Text = sValue;
                // ScriptManager.RegisterStartupScript(Page, Page.GetType(), "None", "Message('" + sValue + "');", true);
                // ScriptManager.RegisterClientScriptBlock(this.Page, this.GetType(), "MyFun", "Message('"+ sValue + "');", true);
                hdnCurrentControlFocused.Value = null;
                hdnIsTransitDataEntered.Value = "0";
                reSetTimer();
            }
            else
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                lblMessage.Text = "Error: " + sValue;
            }
            //DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
            BaseC.ThreeLayerComponent obj = BaseC.ThreeLayerComponent.MyObject;
            ViewState["CheifComplaintFound"] = common.myInt(obj.GetSingleValue("uspCheckPatientProblem @encounterID=" + common.myInt(Session["EncounterId"])));
            if (!common.myInt(ViewState["CheifComplaintFound"]).Equals(0) || common.myLen(objXMLProblem.ToString()) > 0)
                ViewState["CheifComplaintFound"] = 1;
            else
                ViewState["CheifComplaintFound"] = 0;
            obj = null;

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
        finally
        {
            //objParse = null;
            //objEMR = null;
            strMsg = string.Empty;
            //objAllergy = null;
            dsAllergy.Dispose();

            strXMLDrug1 = null;
            objXMLProblem = null;
            strNonTabularH = null;
            strNonTabularPT = null;
            strNonTabularE = null;
            strNonTabularP = null;
            xmlTemplateDetails = null;
            strXMLOrderProcedure = null;
            strXMLOrderProcedure1 = null;
            strXMLDiagnosis = null;

            coll = null;
        }
    }




    protected void ProvchkQuery_CheckedChanged(object sender, EventArgs e)
    {
        if (ProvchkQuery.Checked == true)
            ProvchkIsFinalDiagnosis.Checked = false;

    }

    protected void ProvchkIsFinalDiagnosis_CheckedChanged(object sender, EventArgs e)
    {
        if (ProvchkIsFinalDiagnosis.Checked == true)
            ProvchkQuery.Checked = false;
    }

    // Yogesh----------> 21/04/22

    protected void imgBtnRis_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            RadWindowForNew.NavigateUrl = "~/ICM/RisTextReport.aspx?IPno=" + "IPD-" + common.myStr(Session["RegistrationNo"]) + "&Fromdate=" + common.myStr("5-jan-2018") + "&ToDate=" + common.myStr("5-jan-2018") + "&AdmissionDate=" + ViewState["AdmissionDate"] + "&OpenFrom=SS";
            RadWindowForNew.Height = 598;
            RadWindowForNew.Width = 600;
            RadWindowForNew.Top = 10;
            RadWindowForNew.Left = 10;
            RadWindowForNew.Modal = true;
            RadWindowForNew.Behaviors = WindowBehaviors.Maximize | WindowBehaviors.Minimize | WindowBehaviors.Close | WindowBehaviors.Move | WindowBehaviors.Pin;
            RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code    
            RadWindowForNew.VisibleStatusbar = false;


        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    protected void ImageButtonDischargeSummary_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/ICM/DischargeSummary.aspx?MPG=P3&MASTER=NO";
            //RadWindowForNew.NavigateUrl = "~/EMR/Assessment/DiagnosisHistory.aspx?From=POPUP";
            RadWindowForNew.OnClientClose = "";
            RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.Title = "Discharge Summary";
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }

    protected void ImageButtonMedicalIllustration_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            ClearMessageControl();
            autoSaveDataInTransit(true);
            RadWindowForNew.NavigateUrl = "~/Editor/MedicalIllustration.aspx?MPG=P3&MASTER=NO";
            RadWindowForNew.OnClientClose = "";
            RadWindowForNew.VisibleOnPageLoad = true; // Set this property to True for showing window from code 
            RadWindowForNew.Modal = true;
            RadWindowForNew.VisibleStatusbar = false;
            RadWindowForNew.Title = "Medical Illustration";
            RadWindowForNew.InitialBehaviors = Telerik.Web.UI.WindowBehaviors.Default;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            clsExceptionLog objException = new clsExceptionLog();
            objException.HandleException(Ex);
            objException = null;
        }
    }
}
