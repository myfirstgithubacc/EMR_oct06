using System;
using System.Collections;
using System.Data;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Text;
using System.Data.SqlClient;
using System.IO;
using Telerik.Web.UI;
using System.Configuration;
using System.Collections.Generic;
using System.Net;
using System.Xml;
public partial class EMR_Medication_Medication1 : System.Web.UI.Page
{

    private static VSInteractionService.interactionServiceClient objInteractionService;
    private static VSDocumentService.documentServiceClient objDocumentService;
    private static VSAllergyService.allergyServiceClient objAllergyService;
    private static VSSideEffectService.sideEffectServiceClient objSideEffectService;
    private static VSWarningService.warningServiceClient objWarningService;
    private static VSContraIndicationService.contraIndicationServiceClient objContraIndicationService;



    private string sConString = ConfigurationManager.ConnectionStrings["akl"].ConnectionString;
    private string sVidalConString = ConfigurationManager.ConnectionStrings["vidal"].ConnectionString;
    clsCIMS objCIMS = new clsCIMS();

    clsExceptionLog objException = new clsExceptionLog();
    BaseC.clsEMR objEMR;
    BaseC.clsPharmacy objPharmacy;
    clsVIDAL objVIDAL;
    private const int ItemsPerRequest = 50;
    StringBuilder strXML;
    ArrayList coll;
    //erxValidateTransactions.eRxValidateTransaction objvalidatetransaction = new erxValidateTransactions.eRxValidateTransaction();
    //eRXEclaimlink.eRxValidateTransaction objvalidateerxtransaction = new eRXEclaimlink.eRxValidateTransaction();
    private enum enumColumns : byte
    {
        Sno = 0,
        Drug = 1,
        Frequency = 2,
        Days = 3,
        TotalQty = 4,
        MonographCIMS = 5,
        InteractionCIMS = 6,
        DHInteractionCIMS = 7,
        MonographVIDAL = 8,
        InteractionVIDAL = 9,
        DHInteractionVIDAL = 10,
        Edit = 11,
        Delete = 12
    }
    protected void Page_PreInit(object sender, System.EventArgs e)
    {
        Page.Theme = "DefaultControls";

        if (Convert.ToString(Request.QueryString["PT"]) == "P")
        {
            this.MasterPageFile = "~/Include/Master/BlankMaster.master";
        }
    }
    protected void Page_Load(object sender, EventArgs e)
    {
        objEMR = new BaseC.clsEMR(sConString);

        if (common.myStr(Session["EncounterId"]) == "")
        {
            Response.Redirect("/default.aspx?RegNo=0", false);
        }

        if (!IsPostBack)
        {
            objVIDAL = new clsVIDAL(sConString);
            objCIMS = new clsCIMS();
            if (Convert.ToString(Request.QueryString["Mpg"]) == "P168")
            {
                ViewState["IsPrecription"] = false;
                //btnAddtogrid.Visible = false;
                //tbMedications.ActiveTabIndex = 1;
                //btnSend.Visible = false;
                //trDiagnosis.Visible = false;
                //pnlICDCodes.Visible = false;
                //chkIsBillable.Visible = false;
                //chkDAW.Visible = false;
                //lblRefill.Visible = false;
                //ddlrefill.Visible = false;
                //lblSupervisor.Visible = false;
                //ddlSupervisor.Visible = false;
                //ddlModeType.SelectedIndex = 0;
                //ddlModeType.Visible = false;
                //lblInfoMode.Visible = false;
                //lblnotes.Visible = false;
                //txtNotes.Visible = false;
                //txtDispenseAmount.Visible = false;
                //lblDispenseAmount.Visible = false;
                lblHeader.Text = "&nbsp;Current Medication";
                //lblMedUserName.Visible = true;
            }
            else
            {
                ViewState["IsPrecription"] = true;
                //btnAddToDailyMedication.Visible = false;
                //tbMedications.ActiveTabIndex = 0;
                //btnSend.Visible = false;
                //trDiagnosis.Visible = true;
                //chkIsBillable.Visible = true;
                //ddlModeType.SelectedIndex = 1;
                //ddlModeType.Visible = true;
                //lblInfoMode.Visible = true;
                lblHeader.Text = "&nbsp;Prescription";
                //lblPresUserName.Visible = true;
            }

            ViewState["tblMonographVidal"] = null;
            ViewState["PatientAllergyXML"] = "";

            ViewState["NewPrescribing"] = "";
            dvInteraction.Visible = false;

            #region Interface

            getLegnedColor();

            ViewState["DrugHealthInteractionColorSet"] = System.Drawing.Color.FromName("#82AB76");
            ViewState["DrugAllergyColorSet"] = System.Drawing.Color.FromName("#82CAFA");

            objEMR = new BaseC.clsEMR(sConString);
            DataSet dsInterface = objEMR.getFacilityInterfaceDetails(common.myInt(Session["HospitalLocationId"]), common.myInt(Session["FacilityId"]), BaseC.clsEMR.enumCIMSorVIDALInterfaceFor.InterfaceForEMRDrugOrder);
            ViewState["IsCIMSInterfaceActive"] = false;
            ViewState["IsVIDALInterfaceActive"] = false;

            if (dsInterface.Tables[0].Rows.Count > 0)
            {
                if (common.myBool(dsInterface.Tables[0].Rows[0]["IsCIMSInterfaceActive"]))
                {
                    ViewState["IsCIMSInterfaceActive"] = common.myBool(dsInterface.Tables[0].Rows[0]["IsCIMSInterfaceActive"]);
                }
                else
                {
                    ViewState["IsVIDALInterfaceActive"] = common.myBool(dsInterface.Tables[0].Rows[0]["IsVIDALInterfaceActive"]);
                }
            }

            if (common.myBool(ViewState["IsCIMSInterfaceActive"]))
            {
                string CIMSDatabasePath = string.Empty;
                if (dsInterface.Tables[0].Rows.Count > 0)
                {
                    CIMSDatabasePath = common.myStr(dsInterface.Tables[0].Rows[0]["CIMSDatabasePath"]);
                }

                if (!File.Exists(CIMSDatabasePath + "FastTrackData.mrc") && !File.Exists(CIMSDatabasePath + "FastTrackData.mr2"))
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);

                    lblMessage.Text = "CIMS database not available !";
                    //Alert.ShowAjaxMsg("CIMS database not available !", this);
                }
            }
            else if (common.myBool(ViewState["IsVIDALInterfaceActive"]))
            {
                try
                {
                    objDocumentService = new VSDocumentService.documentServiceClient("DocumentService" + "HttpPort", sVidalConString + "DocumentService");
                    ///
                    WebClient client = new WebClient();
                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(sVidalConString + "DocumentService");
                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();

                    if (response.StatusCode != HttpStatusCode.OK)
                    {
                        lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                        lblMessage.Text = "VIDAL web-services not running now !";

                        //Alert.ShowAjaxMsg(lblMessage.Text, this);

                        return;
                    }
                }
                catch (Exception ex)
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                    lblMessage.Text = "VIDAL web-services not running now !";

                    //Alert.ShowAjaxMsg(lblMessage.Text, this);


                }
            }
            #endregion

            BaseC.clsEMRBilling objBill = new BaseC.clsEMRBilling(sConString);
            //ViewState["IsCIMSInterfaceActive"] = common.myStr(objBill.getHospitalSetupValue("IsCIMSInterfaceActive", common.myInt(Session["HospitalLocationId"]), common.myInt(Session["FacilityID"]))).Trim();

            dvConfirmCancel.Visible = false;
            btnCopyLastPrescription.Enabled = true;
            // ViewState["OPAdvisingDoctorId"] = 0;
            hdnGridClientId.Value = icd.GridClientId;
            BindAccounttypeid();
            bindControl();

            setPatientOPIPType();

            ShowPatientDetails();

            txtICDCode.Attributes.Add("onclick", "javascript:ShowICDPanel('" + pnlICDCodes.ClientID + "', this)");
            setDiagnosis();
            setAllergiesWithInterfaceCode();

            RetrievePatientAllergies();

            ViewState["ConversioinFactor"] = true;
            hdnGenericId.Value = "0";
            hdnItemId.Value = "0";

            hdnIsUnSavedData.Value = "0";

            hdnCIMSItemId.Value = "";
            hdnCIMSType.Value = "";

            lblMessage.Text = "&nbsp;";
            ViewState["GridData"] = null;

            txtStartDate.DateInput.DateFormat = common.myStr(Session["OutputDateFormat"]);
            txtStartDate.SelectedDate = DateTime.Now;

            txtEndDate.DateInput.DateFormat = common.myStr(Session["OutputDateFormat"]);
            txtEndDate.SelectedDate = DateTime.Now;

            if (common.myStr(Request.QueryString["Regno"]) != "")
            {
                Session["RegistrationNo"] = common.myStr(Request.QueryString["Regno"]);
                BindPatientHiddenDetails(common.myStr(Request.QueryString["Regno"]));
            }

            //PostBackOptions optionsSubmit = new PostBackOptions(btnSave);
            //btnSave.OnClientClick = "disableButtonOnClick(this, 'Please wait...', 'disabled_button'); ";
            //btnSave.OnClientClick += ClientScript.GetPostBackEventReference(optionsSubmit);
            bindGridData(0);

            ddlGeneric.Focus();
            getCurrentICDCodes();
            BindICDPanel();

            if (Convert.ToString(Request.QueryString["PT"]) == "P")
            {
                //lnkPatientDashboard.Visible = false;
                btnPreviewPreviousMedications.Visible = false;

                btnclose.Visible = true;
                ddlPrescription.SelectedIndex = ddlPrescription.Items.IndexOf(ddlPrescription.Items.FindItemByValue(common.myInt(Request.QueryString["IndentId"]).ToString()));
                ddlPrescription_SelectedIndexChanged(null, null);
            }

            if (common.myStr(Session["EncounterStatus"]).ToUpper().Contains("CLOSE") == true)
            {
                btnNew.Visible = false;
                btnSave.Visible = false;
                btnAddItem.Visible = false;
                btnCopyLastPrescription.Visible = false;
                ddlGeneric.Enabled = false;
                ddlBrand.Enabled = false;
                gvStore.Enabled = false;
            }
            StringBuilder strb = new StringBuilder();
            if (common.myInt(ViewState["AccounttypeId"]) != 3)
            {
                rdoFormularyType.Visible = false;
                Span1.Visible = false;
                rdoFormularyType.Items[1].Selected = true;

            }
            else
            {
                rdoFormularyType.Visible = true;
                Span1.Visible = true;
                rdoFormularyType.Items[0].Selected = true;
            }

            rdoDrugType_SelectedIndexChanged(null, null);

            if (Convert.ToString(Request.QueryString["PT"]) == "P")
            {
                spnremarks.Visible = true;
            }

            txtICDCode.Attributes.Add("readonly", "readonly");

            if (common.myStr(ViewState["IsCIMSInterfaceActive"]) == "Y")
            {
                string CIMSDatabasePath = common.myStr(objBill.getHospitalSetupValue("CIMSDatabasePath", common.myInt(Session["HospitalLocationId"]), common.myInt(Session["FacilityId"]))).Trim();

                if (!File.Exists(CIMSDatabasePath + "FastTrackData.mrc") && !File.Exists(CIMSDatabasePath + "FastTrackData.mr2"))
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);

                    lblMessage.Text = "CIMS database not available !";
                    //Alert.ShowAjaxMsg("CIMS database not available !", this);
                }
            }

            //Added by rakesh start
            BindTime();
            ddlTime.Enabled = false;
            //Added by rakesh end
        }

        Legend1.loadLegend("CIMSInterface", "");

        setGridColor();
    }
    private void BindTime()
    {
        string time = string.Empty;
        ddlTime.Items.Insert(0, new RadComboBoxItem("", "0"));
        for (int counter1 = 1; counter1 <= 24; counter1++)
        {
            if (counter1 < 10)
            {
                time = "0" + counter1 + ":00";
            }
            else
            {
                time = counter1 + ":00";
            }
            ddlTime.Items.Insert(counter1, new RadComboBoxItem(time, common.myStr(counter1)));
        }
    }

    private void getLegnedColor()
    {
        try
        {
            ViewState["DrugMonographColor"] = "#98AFC7";
            ViewState["DrugtoDrugInteractionColor"] = "#ECBBBB";
            ViewState["DrugHealthInteractionColor"] = "#82AB76";
            ViewState["DrugAllergyColor"] = "#82CAFA";

            BaseC.clsBb objBb = new BaseC.clsBb(sConString);
            DataSet ds = objBb.GetStatusMaster("CIMSInterface");

            if (ds.Tables[0].Rows.Count > 0)
            {
                ds.Tables[0].DefaultView.RowFilter = "Code='MO'";

                if (ds.Tables[0].DefaultView.Count > 0)
                {
                    ViewState["DrugMonographColor"] = ds.Tables[0].DefaultView[0]["StatusColor"];
                }

                ds.Tables[0].DefaultView.RowFilter = "";

                ds.Tables[0].DefaultView.RowFilter = "Code='IN'";

                if (ds.Tables[0].DefaultView.Count > 0)
                {
                    ViewState["DrugtoDrugInteractionColor"] = ds.Tables[0].DefaultView[0]["StatusColor"];
                }

                ds.Tables[0].DefaultView.RowFilter = "";

                ds.Tables[0].DefaultView.RowFilter = "Code='HI'";

                if (ds.Tables[0].DefaultView.Count > 0)
                {
                    ViewState["DrugHealthInteractionColor"] = ds.Tables[0].DefaultView[0]["StatusColor"];
                }

                ds.Tables[0].DefaultView.RowFilter = "";

                ds.Tables[0].DefaultView.RowFilter = "Code='DA'";

                if (ds.Tables[0].DefaultView.Count > 0)
                {
                    ViewState["DrugAllergyColor"] = ds.Tables[0].DefaultView[0]["StatusColor"];
                }

                ds.Tables[0].DefaultView.RowFilter = "";
            }

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }
    private void setGridColor()
    {
        if (common.myBool(ViewState["IsCIMSInterfaceActive"])
            || common.myBool(ViewState["IsVIDALInterfaceActive"]))
        {
            return;
        }

        if (gvStore == null)
        {
            return;
        }

        if (gvStore.Rows.Count == 0)
        {
            return;
        }

        foreach (GridViewRow dataItem in gvStore.Rows)
        {
            if (common.myBool(ViewState["IsCIMSInterfaceActive"]))
            {
                LinkButton lnkBtnMonographCIMS = (LinkButton)dataItem.FindControl("lnkBtnMonographCIMS");
                LinkButton lnkBtnInteractionCIMS = (LinkButton)dataItem.FindControl("lnkBtnInteractionCIMS");
                LinkButton lnkBtnDHInteractionCIMS = (LinkButton)dataItem.FindControl("lnkBtnDHInteractionCIMS");

                //lnkBtnMonographCIMS.BackColor = System.Drawing.Color.FromName(common.myStr(ViewState["DrugMonographColor"]));
                lnkBtnInteractionCIMS.BackColor = System.Drawing.Color.FromName(common.myStr(ViewState["DrugtoDrugInteractionColor"]));
                lnkBtnDHInteractionCIMS.BackColor = System.Drawing.Color.FromName(common.myStr(ViewState["DrugHealthInteractionColor"]));
            }
            else if (common.myBool(ViewState["IsVIDALInterfaceActive"]))
            {
                LinkButton lnkBtnMonographVIDAL = (LinkButton)dataItem.FindControl("lnkBtnMonographVIDAL");
                LinkButton lnkBtnInteractionVIDAL = (LinkButton)dataItem.FindControl("lnkBtnInteractionVIDAL");
                LinkButton lnkBtnDHInteractionVIDAL = (LinkButton)dataItem.FindControl("lnkBtnDHInteractionVIDAL");

                //lnkBtnMonographVIDAL.BackColor = System.Drawing.Color.FromName(common.myStr(ViewState["DrugMonographColor"]));
                lnkBtnInteractionVIDAL.BackColor = System.Drawing.Color.FromName(common.myStr(ViewState["DrugtoDrugInteractionColor"]));
                lnkBtnDHInteractionVIDAL.BackColor = System.Drawing.Color.FromName(common.myStr(ViewState["DrugHealthInteractionColor"]));
            }
        }
    }

    private void setPatientOPIPType()
    {
        try
        {

            objEMR = new BaseC.clsEMR(sConString);
            DataSet ds = objEMR.getEncounterList(common.myInt(Session["EncounterId"]), common.myInt(Session["RegistrationId"]),
                                common.myInt(Session["FacilityId"]), common.myInt(Session["HospitalLocationId"]));

            ViewState["PatientOPIPType"] = "O";
            if (ds.Tables[0].Rows.Count > 0)
            {
                ViewState["PatientOPIPType"] = common.myStr(ds.Tables[0].Rows[0]["OPIP"]);
            }

            if (common.myStr(ViewState["PatientOPIPType"]) == "O")
            {
                tdStore.Visible = false;
                ddlIndentType.SelectedIndex = 0;
                ddlIndentType.Enabled = false;

                //if (ds.Tables[0].Rows.Count > 0)
                //{

                //    //ViewState["OPAdvisingDoctorId"] = common.myInt(ds.Tables[0].Rows[0]["DoctorId"]);
                //    //ddlAdvisingDoctor.SelectedIndex = ddlAdvisingDoctor.Items.IndexOf(ddlAdvisingDoctor.Items.FindItemByValue(common.myStr(ds.Tables[0].Rows[0]["DoctorId"])));
                //    string empid = getEmpID();
                //    ViewState["OPAdvisingDoctorId"] = common.myStr(empid);
                //    ddlAdvisingDoctor.SelectedIndex = ddlAdvisingDoctor.Items.IndexOf(ddlAdvisingDoctor.Items.FindItemByValue(common.myStr(empid)));

                //}
                ddlAdvisingDoctor.Enabled = false;
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }
    private void ShowPatientDetails()
    {
        try
        {
            objEMR = new BaseC.clsEMR(sConString);
            DataSet ds = objEMR.getScreeningParameters(common.myInt(Session["EncounterId"]), common.myInt(Session["RegistrationId"]));

            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i][0].ToString() == "Gender")
                    {
                        ViewState["PatientGender"] = ds.Tables[0].Rows[i][1].ToString();
                    }
                    else if (ds.Tables[0].Rows[i][0].ToString() == "Age")
                    {
                        ViewState["PatientDOB"] = DateTime.Now.AddDays(-common.myInt(ds.Tables[0].Rows[i][1].ToString())).ToString("yyyy-MM-dd");
                    }
                }

                for (int i = 2; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i][0].ToString() == "WT")// Weight
                    {
                        lbl_Weight.Text = ds.Tables[0].Rows[i][1].ToString();
                    }
                    else if (ds.Tables[0].Rows[i][0].ToString() == "HT")// Height
                    {
                        txtHeight.Text = ds.Tables[0].Rows[i][1].ToString();
                    }
                    else if (ds.Tables[0].Rows[i][0].ToString() == "BSA")
                    {
                        lbl_BSA.Text = ds.Tables[0].Rows[i][1].ToString();
                    }
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }
    protected void RetrievePatientAllergies()
    {
        try
        {
            BaseC.Dashboard objD = new BaseC.Dashboard();
            DataSet ds = objD.getAllergies(common.myInt(Session["RegistrationID"]));

            if (ds.Tables[0].Rows.Count > 0)
            {
                DataView dvAllergy = new DataView(ds.Tables[0]);
                dvAllergy.RowFilter = "AllergyType='Drug' AND ItemType='P'";

                ViewState["DrugAllergy"] = dvAllergy.ToTable();

                //if (dvAllergy.ToTable().Rows.Count > 0)
                //{
                //    lstDrugAllergy.DataSource = dvAllergy.ToTable();
                //    lstDrugAllergy.DataTextField = "AllergyName";
                //    lstDrugAllergy.DataValueField = "Generic_Id";
                //    lstDrugAllergy.DataBind();
                //}

                //dvAllergy.RowFilter = "AllergyType<>'Drug'";

                //ViewState["OtherAllergy"] = dvAllergy.ToTable();

                //if (dvAllergy.ToTable().Rows.Count > 0)
                //{
                //    lstOtherAllergy.DataSource = dvAllergy.ToTable();
                //    lstOtherAllergy.DataTextField = "AllergyName";
                //    lstOtherAllergy.DataValueField = "AllergyId";
                //    lstOtherAllergy.DataBind();
                //}
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }
    private void bindControl()
    {
        try
        {
            objPharmacy = new BaseC.clsPharmacy(sConString);
            DataSet ds = new DataSet();

            /*************** Prescription No ***************/
            bindPrescriptionNo();

            /*************** Drugs Remarks ***************/
            bindDrugsRemarks();

            /*************** Store ***************/
            ds = objPharmacy.GetStoreToChangefromWard(common.myInt(Session["HospitalLocationID"]), common.myInt(Session["GroupID"]), common.myInt(Session["FacilityId"]), "IPD Issue");

            ddlStore.DataSource = ds.Tables[0];
            ddlStore.DataTextField = "DepartmentName";
            ddlStore.DataValueField = "StoreId";
            ddlStore.DataBind();

            if (ds.Tables[0].Rows.Count > 0)
            {
                DataView DV = ds.Tables[0].DefaultView;
                DV.RowFilter = " StoreId = 5 ";
                if (DV.Count > 0)
                {
                    ddlStore.SelectedIndex = ddlStore.Items.IndexOf(ddlStore.Items.FindItemByValue(common.myStr(DV.ToTable().Rows[0]["StoreId"])));
                }
                else
                {
                    ddlStore.SelectedIndex = 0;
                }
                hdnStoreId.Value = common.myInt(ddlStore.SelectedValue).ToString();
            }

            /*************** Advising Doctor ***************/
            BaseC.clsLISMaster objlis = new BaseC.clsLISMaster(sConString);

            DataSet tbl = objlis.getDoctorList(0, "", common.myInt(Session["HospitalLocationID"]), 0, 0, 0, 0);

            {

                ddlAdvisingDoctor.DataSource = tbl;
                ddlAdvisingDoctor.DataTextField = "DoctorName";
                ddlAdvisingDoctor.DataValueField = "DoctorId";
                ddlAdvisingDoctor.DataBind();

                ddlAdvisingDoctor.Items.Insert(0, new RadComboBoxItem("", "0"));
                //ViewState["OPAdvisingDoctorId"] = common.myStr(Session["EmployeeId"]);
                ddlAdvisingDoctor.SelectedIndex = ddlAdvisingDoctor.Items.IndexOf(ddlAdvisingDoctor.Items.FindItemByValue(common.myStr(Session["EmployeeId"])));
                // ddlAdvisingDoctor.SelectedIndex = 0;
            }


            /*************** Formulation ***************/
            ds = objPharmacy.GetFormulationMaster(0, common.myInt(Session["HospitalLocationID"]), 1, common.myInt(Session["UserID"]));

            ddlFormulation.DataSource = ds.Tables[0];
            ddlFormulation.DataTextField = "FormulationName";
            ddlFormulation.DataValueField = "FormulationId";
            ddlFormulation.DataBind();

            ddlFormulation.Items.Insert(0, new RadComboBoxItem("", "0"));
            ddlFormulation.SelectedIndex = 0;

            /*************** Route ***************/
            OpPrescription OpPre = new OpPrescription(sConString);
            DataSet dsRoute = new DataSet();
            dsRoute = (DataSet)OpPre.GetRouteDetails();

            ddlRoute.DataSource = dsRoute.Tables[0];
            ddlRoute.DataValueField = "Id";
            ddlRoute.DataTextField = "RouteName";
            ddlRoute.DataBind();

            ddlRoute.Items.Insert(0, new RadComboBoxItem("", "0"));
            ddlRoute.SelectedIndex = 0;

            /*************** Strength ***************/
            objPharmacy = new BaseC.clsPharmacy(sConString);
            ds = objPharmacy.GetItemStrength(0, 0, common.myInt(Session["HospitalLocationID"]), 1, common.myInt(Session["UserID"]));

            ddlStrength.DataSource = ds.Tables[0];
            ddlStrength.DataValueField = "StrengthId";
            ddlStrength.DataTextField = "Strength";
            ddlStrength.DataBind();

            ddlStrength.Items.Insert(0, new RadComboBoxItem("", "0"));
            ddlStrength.SelectedIndex = 0;

            /*************** Frequency ***************/
            ds = objPharmacy.GetDoctorFrequencyFavorite(Convert.ToInt32(Session["DoctorId"]));

            //rdoRequency.DataSource = ds.Tables[0];
            //rdoRequency.DataTextField = "Abbreviation";
            //rdoRequency.DataValueField = "Id";
            //rdoRequency.DataBind();

            //BaseC.clsPharmacy phar = new BaseC.clsPharmacy(sConString);
            //ds = new DataSet();
            //ds = phar.getFrequencyMaster();

            foreach (DataRow dr in ds.Tables[0].Rows)
            {
                RadComboBoxItem item = new RadComboBoxItem();

                item.Text = common.myStr(dr["Description"]);
                item.Value = common.myStr(common.myInt(dr["Id"]));
                item.Attributes.Add("Frequency", common.myStr(dr["Frequency"]));
                item.DataBind();
                this.ddlFrequency.Items.Add(item);
            }
            

            ddlFrequency.Items.Insert(0, new RadComboBoxItem("", "0"));
            ddlFrequency.SelectedIndex = 0;

            /*************** Refill ***************/
            for (int idx = 0; idx < 11; idx++)
            {
                ddlRefill.Items.Add(new RadComboBoxItem(idx.ToString(), idx.ToString()));
            }

            ddlRefill.SelectedIndex = 0;

            /*************** Patient Alert ***************/
            //bindPatientAlert();

            /*************** PrescriptionMode ***************/
            BaseC.clsLISPhlebotomy objHs = new BaseC.clsLISPhlebotomy(sConString);
            DataSet dsMode = objHs.getStatus(common.myInt(Session["HospitalLocationId"]), "PrescriptionMode", "");
            if (dsMode.Tables.Count > 0)
            {
                if (dsMode.Tables[0].Rows.Count > 0)
                {
                    ddlPrescriptionMode.DataSource = dsMode;
                    ddlPrescriptionMode.DataTextField = "Status";
                    ddlPrescriptionMode.DataValueField = "StatusId";
                    ddlPrescriptionMode.DataBind();
                    ddlPrescription.SelectedIndex = 0;
                }
            }

            /*************** OrderSet ***************/
            BaseC.EMRMasters objMst = new BaseC.EMRMasters(sConString);
            DataSet dsSet = objMst.GetEMRDrugSet(common.myInt(Session["HospitalLocationId"]), 0);
            if (dsSet.Tables.Count > 0)
            {
                if (dsSet.Tables[0].Rows.Count > 0)
                {
                    DataView dv = dsSet.Tables[0].DefaultView;
                    dv.RowFilter = "DetailActive = 1";
                    ddlOrderSet.Items.Clear();
                    ddlOrderSet.DataSource = dv.ToTable();
                    ddlOrderSet.DataTextField = "SetName";
                    ddlOrderSet.DataValueField = "SetId";
                    ddlOrderSet.DataBind();
                    ddlOrderSet.Items.Insert(0, new RadComboBoxItem("", "0"));
                    ddlOrderSet.SelectedIndex = 0;
                }
            }

            if (common.myStr(Session["IsMedicalAlert"]) == "")
            {
                lnkAlerts.Enabled = false;
                lnkAlerts.CssClass = "blinkNone";
                lnkAlerts.ForeColor = System.Drawing.Color.FromName("Blue");
            }
            else if (common.myStr(Session["IsMedicalAlert"]).ToUpper() == "YES")
            {
                lnkAlerts.Enabled = true;
                lnkAlerts.Font.Bold = true;
                lnkAlerts.CssClass = "blink";
                lnkAlerts.Font.Size = 11;
                lnkAlerts.ForeColor = System.Drawing.Color.FromName("Red");
            }
            //Added by rakesh start
            /*************** Food master ***************/
            ds = objPharmacy.GetFood(common.myInt(Session["HospitalLocationID"]), common.myInt(Session["FacilityId"]), 1);
            foreach (DataRow dr in ds.Tables[0].Rows)
            {
                RadComboBoxItem item = new RadComboBoxItem();

                item.Text = common.myStr(dr["FoodName"]);
                item.Value = common.myStr(common.myInt(dr["Id"]));
                item.Attributes.Add("FoodName", common.myStr(dr["FoodName"]));
                item.DataBind();
                this.ddlFood.Items.Add(item);
            }

            ddlFood.Items.Insert(0, new RadComboBoxItem("", "0"));
            ddlFood.SelectedIndex = 0;

            ///************************************************************/
            ///*************** Unit master ***************/
            //ds = objPharmacy.GetUnit(common.myInt(Session["HospitalLocationID"]), common.myInt(Session["FacilityId"]), 1);
            //foreach (DataRow dr in ds.Tables[0].Rows)
            //{
            //    RadComboBoxItem item = new RadComboBoxItem();

            //    item.Text = common.myStr(dr["UnitName"]);
            //    item.Value = common.myStr(common.myInt(dr["Id"]));
            //    item.Attributes.Add("UnitName", common.myStr(dr["UnitName"]));
            //    item.DataBind();
            //    this.ddlUnit.Items.Add(item);
            //}

            //ddlUnit.Items.Insert(0, new RadComboBoxItem("", "0"));
            //ddlUnit.SelectedIndex = 0;
            ///************************************************************/

            //Added by rakesh end

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }
    private void bindPrescriptionNo()
    {
        try
        {
            objEMR = new BaseC.clsEMR(sConString);
            DataSet ds = new DataSet();

            ds = objEMR.getMedicinesOPList(common.myInt(Session["HospitalLocationID"]), common.myInt(Session["FacilityId"]),
                                        common.myInt(Session["EncounterId"]), 0);

            ddlPrescription.DataSource = ds.Tables[0];
            ddlPrescription.DataTextField = "IndentNo";
            ddlPrescription.DataValueField = "IndentId";
            ddlPrescription.DataBind();

            ddlPrescription.Items.Insert(0, new RadComboBoxItem("", "0"));
            ddlPrescription.SelectedIndex = 0;

            btnCancel.Visible = false;
            btnPrint.Visible = false;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }
    private void bindDrugsRemarks()
    {
        try
        {
            objEMR = new BaseC.clsEMR(sConString);
            DataSet ds = new DataSet();

            objEMR = new BaseC.clsEMR(sConString);
            //commented by rakesh start
            //ds = objEMR.getEMRPrescriptionRemarks(0, common.myInt(Session["HospitalLocationID"]), common.myInt(Session["FacilityId"]), 1);
            //commented by rakesh end
            //Added by rakesh start
            ds = objEMR.getEMRPrescriptionRemarks(0, common.myInt(Session["HospitalLocationID"]), common.myInt(Session["FacilityId"]), 1, common.myInt(Session["UserId"]));

            //Added by rakesh end

            ddlDrugRemarks.DataSource = ds.Tables[0];
            ddlDrugRemarks.DataTextField = "Remarks";
            ddlDrugRemarks.DataValueField = "RemarkId";
            ddlDrugRemarks.DataBind();

            ddlDrugRemarks.Items.Insert(0, new RadComboBoxItem("", "0"));
            ddlDrugRemarks.SelectedIndex = 0;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }
    //private void bindPatientAlert()
    //{
    //    try
    //    {
    //        objEMR = new BaseC.clsEMR(sConString);
    //        DataSet ds = objEMR.getEMRPatientAlertDetails(common.myInt(Session["RegistrationId"]));

    //        ddlPatientAlert.DataSource = ds.Tables[0];
    //        ddlPatientAlert.DataValueField = "AlertId";
    //        ddlPatientAlert.DataTextField = "AlertDescription";
    //        ddlPatientAlert.DataBind();

    //        for (int idx = 0; idx < ds.Tables[0].Rows.Count; idx++)
    //        {
    //            ddlPatientAlert.Items[idx].Checked = common.myBool(ds.Tables[0].Rows[idx]["IsChk"]);
    //        }
    //    }
    //    catch (Exception Ex)
    //    {
    //        lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
    //        lblMessage.Text = "Error: " + Ex.Message;
    //        objException.HandleException(Ex);
    //    }
    //}
    private bool isSaved()
    {
        bool isSave = true;
        string strmsg = "";

        if (common.myInt(Session["EncounterId"]) == 0)
        {
            strmsg += "Encounter not selected !";
            isSave = false;
        }
        if (common.myInt(ddlAdvisingDoctor.SelectedValue) == 0)
        {
            strmsg += "Advising Doctor not selected!";
            isSave = false;
        }

        lblMessage.Text = strmsg;
        return isSave;
    }
    protected void btnSave_Onclick(object sender, EventArgs e)
    {
        try
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "";

            if (!isSaved())
            {
                return;
            }

            StringBuilder strXMLAleart = new StringBuilder();
            strXML = new StringBuilder();
            coll = new ArrayList();
            BaseC.WardManagement ward = new BaseC.WardManagement();
            DataSet ds = new DataSet();

            double iConversionFactor = 0;
            double sQuantity = 0;

            foreach (GridViewRow dataItem in gvStore.Rows)
            {
                HiddenField GenericId = (HiddenField)dataItem.FindControl("hdnGenericId");
                HiddenField ItemId = (HiddenField)dataItem.FindControl("hdnItemId");
                Label lblTotalQty = (Label)dataItem.FindControl("lblTotalQty");

                if (common.myDbl(lblTotalQty.Text) == 0)
                {
                    continue;
                }

                //if (common.myBool(ViewState["ConversioinFactor"]))
                //{
                //    ds = ward.GetItemConversionFactor(common.myInt(ItemId.Value));

                //    if (ds.Tables[0].Rows.Count > 0)
                //    {
                //        iConversionFactor = common.myDbl(ds.Tables[0].Rows[0]["ConversionFactor2"]);
                //    }
                //    if (iConversionFactor != 0)
                //    {
                //        for (int i = 1; i <= iConversionFactor * common.myDbl(lblTotalQty.Text); i++)
                //        {
                //            if (common.myDbl(lblTotalQty.Text) <= iConversionFactor * i)
                //            {
                //                sQuantity = iConversionFactor * i;
                //                break;
                //            }
                //        }
                //    }
                //}

                HiddenField FormulationId = (HiddenField)dataItem.FindControl("hdnFormulationId");
                HiddenField RouteId = (HiddenField)dataItem.FindControl("hdnRouteId");
                HiddenField StrengthId = (HiddenField)dataItem.FindControl("hdnStrengthId");
                HiddenField FrequencyId = (HiddenField)dataItem.FindControl("hdnFrequencyId");
                HiddenField Dose = (HiddenField)dataItem.FindControl("hdnDose");
                HiddenField Frequency = (HiddenField)dataItem.FindControl("hdnFrequency");
                HiddenField Days = (HiddenField)dataItem.FindControl("hdnDays");
                HiddenField hdnDurationType = (HiddenField)dataItem.FindControl("hdnDurationType");
                HiddenField StartDate = (HiddenField)dataItem.FindControl("hdnStartDate");
                HiddenField EndDate = (HiddenField)dataItem.FindControl("hdnEndDate");
                HiddenField Remarks = (HiddenField)dataItem.FindControl("hdnRemarks");
                //Label lblTotalQty = (Label)dataItem.FindControl("lblTotalQty");

                Label lblCustomMedication = (Label)dataItem.FindControl("lblCustomMedication");
                HiddenField hdnICDCode = (HiddenField)dataItem.FindControl("hdnICDCode");
                HiddenField hdnSOS = (HiddenField)dataItem.FindControl("hdnSOS");
                HiddenField hdnRefill = (HiddenField)dataItem.FindControl("hdnRefill");
                HiddenField hdnPrescriptionModeId = (HiddenField)dataItem.FindControl("hdnPrescriptionModeId");
                HiddenField chdnIsOverride = (HiddenField)dataItem.FindControl("chdnIsOverride");
                HiddenField chdnOverrideComments = (HiddenField)dataItem.FindControl("chdnOverrideComments");
                HiddenField chdnDrugAllergyScreeningResult = (HiddenField)dataItem.FindControl("chdnDrugAllergyScreeningResult");


                //Added by rakesh start

                HiddenField hdnDoseTime = (HiddenField)dataItem.FindControl("hdnDoseTime");
                HiddenField hdnDoseUnitID = (HiddenField)dataItem.FindControl("hdnDoseUnitID");
                HiddenField hdnFoodID = (HiddenField)dataItem.FindControl("hdnFoodID");
                HiddenField hdnPRNRemarks = (HiddenField)dataItem.FindControl("hdnPRNRemarks");
                //Added by rekesh end


                HiddenField hdnSubDurationType = (HiddenField)dataItem.FindControl("hdnSubDurationType");

                coll.Add(common.myInt(GenericId.Value));//GenericId INT,
                coll.Add(common.myInt(ItemId.Value));//ItemId INT,
                coll.Add(common.myInt(FormulationId.Value));//FormulationId INT,
                coll.Add(common.myInt(RouteId.Value));//RouteId INT,
                coll.Add(common.myInt(StrengthId.Value));//StrengthId INT,
                coll.Add(common.myInt(FrequencyId.Value));//FrequencyId TINYINT,
                coll.Add(common.myStr(Dose.Value));//Dose varchar 10
                coll.Add(common.myDbl(Frequency.Value));//Frequency DECIMAL(10,3),
                coll.Add(common.myStr(Days.Value));//Days SMALLINT,
                coll.Add(common.myDate(StartDate.Value).ToString("yyyy-MM-dd"));//StartDate SMALLDATETIME,
                coll.Add(common.myDate(EndDate.Value).ToString("yyyy-MM-dd"));//EndDate SMALLDATETIME,

                if (common.myBool(ViewState["ConversioinFactor"]) && iConversionFactor != 0)
                {
                    coll.Add(common.myDbl(sQuantity).ToString("F2"));//Qty DECIMAL(10,3),
                }
                else
                {
                    coll.Add(common.myDbl(lblTotalQty.Text));//Qty DECIMAL(10,3),
                }
                coll.Add(common.myStr(Remarks.Value));//Remarks VARCHAR(250)

                coll.Add(common.myStr(lblCustomMedication.Text).Trim());//CustomMedication VARCHAR(1000),
                coll.Add(common.myStr(hdnICDCode.Value));//ICDCode VARCHAR(200),
                coll.Add(common.myBool(hdnSOS.Value) ? "1" : "0");//SOS BIT,
                coll.Add(common.myInt(hdnRefill.Value));//Refill TINYINT

                coll.Add(common.myBool(chdnIsOverride.Value) ? "1" : "0");//IsOverride BIT,
                coll.Add(common.myStr(chdnOverrideComments.Value));//OverrideComments VARCHAR(500),
                coll.Add(common.myStr(chdnDrugAllergyScreeningResult.Value));//DrugAllergyScreeningResult VARCHAR(1000)
                coll.Add(common.myInt(hdnPrescriptionModeId.Value));//PrescriptionModeId int 21

                //Added by rakesh start

                coll.Add(common.myInt(hdnDoseTime.Value));
                coll.Add(common.myInt(hdnDoseUnitID.Value));
                coll.Add(common.myInt(hdnFoodID.Value));
                coll.Add(common.myStr(hdnPRNRemarks.Value));
                coll.Add(common.myStr(hdnDurationType.Value));

                //Added by rekesh end

                coll.Add(common.myStr(hdnSubDurationType.Value));

                strXML.Append(common.setXmlTable(ref coll));
            }

            if (strXML.ToString() == "")
            {
                lblMessage.Text = "Please select any medicine before saving !";
                return;
            }

            //foreach (RadComboBoxItem item in ddlPatientAlert.Items)
            //{
            //    if (item.Checked)
            //    {
            //        coll.Add(common.myInt(item.Value));//AlertId SMALLINT

            //        strXMLAleart.Append(common.setXmlTable(ref coll));
            //    }
            //}

            objEMR = new BaseC.clsEMR(sConString);

            Hashtable hshOut = objEMR.SaveEMRMedicineOP(
                               common.myInt(Session["HospitalLocationId"]), common.myInt(Session["FacilityId"]),
                               common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"]),
                               common.myInt(ddlIndentType.SelectedValue), 0, common.myInt(ddlAdvisingDoctor.SelectedValue),
                               0, 0, common.myStr(txtPrescriptionRemarks.Text),
                               strXML.ToString(), strXMLAleart.ToString(), common.myInt(Session["UserId"]),"",false, string.Empty);

            //Hashtable hshOut = objEMR.SaveEMRMedicineOP(common.myInt(ddlPrescription.SelectedValue),
            //                    common.myInt(Session["HospitalLocationId"]), common.myInt(Session["FacilityId"]),
            //                    common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"]),
            //                    common.myInt(ddlIndentType.SelectedValue), common.myInt(ddlAdvisingDoctor.SelectedValue),
            //                    0, 0, 0, "", strXML.ToString(), strXMLAleart.ToString(), common.myInt(Session["UserId"]));

            string strMsg = common.myStr(hshOut["@chvErrorStatus"]);

            if ((strMsg.ToUpper().Contains(" UPDATE") || strMsg.ToUpper().Contains(" SAVE")) && !strMsg.ToUpper().Contains("USP"))
            {
                //for ePrescription
                //string OutRefno = "";
                //string s = PostePrescription(common.myInt(hshOut["@chvPrescriptionNo"].ToString().Split('$')[1]), "TEST", out OutRefno);
                //if (s.Contains("Operation is successful"))
                //{
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                    strMsg = "Prescription No : " +
                        ((common.myInt(ddlPrescription.SelectedValue) > 0) ? common.myStr(ddlPrescription.SelectedItem.Text) : common.myStr(hshOut["@chvPrescriptionNo"])).Split('$')[0]  ;
                //}
                //else
                //{
                //    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                //    lblMessage.Text = s;
                //}
            }
            hdnIsUnSavedData.Value = "0";
            btnCopyLastPrescription.Enabled = true;
            spnPrescriptionRemarks.Visible = false;
            hdnGenericId.Value = "0";
            hdnGenericName.Value = "";
            hdnItemId.Value = "0";
            hdnItemName.Value = "";

            hdnCIMSItemId.Value = "";
            hdnCIMSType.Value = "";
            hdnVIDALItemId.Value = "";

            ddlGeneric.Text = "";
            ddlBrand.Text = "";
            ddlIndentType.SelectedValue = "0";

            //if (common.myStr(ViewState["PatientOPIPType"]) == "O")
            //{
            //    ddlAdvisingDoctor.SelectedIndex = ddlAdvisingDoctor.Items.IndexOf(ddlAdvisingDoctor.Items.FindItemByValue(common.myStr(Session["EmployeeId"])));
            //}
            //else
            //{
            //    ddlAdvisingDoctor.SelectedIndex = 0;
            //}

            //bindPatientAlert();

            chkNoMedicine.Checked = false;

            clearItemDetails();

            bindPrescriptionNo();

            bindGridData(0);

            lblMessage.Text = strMsg;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }


    //private string PostePrescription(int PrescriptionID, string XMLflag, out string refno)
    //{
    //    SqlConnection con = new SqlConnection(sConString);

    //    SqlCommand cmd = new SqlCommand();
    //    cmd.CommandText = "UspGenerateeOPRxXml";
    //    cmd.CommandType = CommandType.StoredProcedure;

    //    SqlParameter prm = new SqlParameter("@iHospitalLocationId", common.myInt(Session["HospitalLocationId"].ToString()));
    //    cmd.Parameters.Add(prm);

    //    SqlParameter prm1 = new SqlParameter("@iFacilityId", common.myInt(Session["FacilityId"].ToString()));
    //    cmd.Parameters.Add(prm1);

    //    SqlParameter prm2 = new SqlParameter("@PrescriptionID", PrescriptionID);
    //    cmd.Parameters.Add(prm2);

    //    SqlParameter prm3 = new SqlParameter("@DispositionFlag", XMLflag);
    //    cmd.Parameters.Add(prm3);

    //    SqlParameter prm4 = new SqlParameter("@returnXML", "");
    //    prm4.Direction = ParameterDirection.Output;
    //    prm4.DbType = DbType.Xml;

    //    cmd.Parameters.Add(prm4);

    //    cmd.Connection = con;

    //    Hashtable hsin = new Hashtable();
    //    Hashtable hsout = new Hashtable();
    //    hsin.Add("@iHospitalLocationId", common.myInt(Session["HospitalLocationId"].ToString()));
    //    hsin.Add("@iFacilityId", common.myInt(Session["FacilityID"].ToString()));
    //    hsin.Add("@PrescriptionID", common.myInt(PrescriptionID));
    //    hsin.Add("@DispositionFlag", XMLflag);
    //    ////Out
    //    hsout.Add("@returnXML", "");

    //    SqlDataAdapter adpt = new SqlDataAdapter(cmd);
    //    DataSet ds = new DataSet("ds");
    //    con.Open();
    //    SqlDataReader rdr = cmd.ExecuteReader();
    //    //DAL.DAL dl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
    //    // hsout= dl.getOutputParametersValues(CommandType.StoredProcedure, "UspGenerateeOPRxXml", hsin, hsout);
    //    // string strxmltxt = hsout["@returnXML"].ToString(); ;

    //    string filename = PrescriptionID.ToString() + "_" + DateTime.Now.ToString("ddMMyyHHmm") + ".xml";
    //    string fileLoc = Server.MapPath("~/PatientDocuments/" + filename);
    //    FileStream fs = null;
    //    if (File.Exists(fileLoc))
    //    {
    //        File.Delete(fileLoc);
    //    }
    //    string strxmltxt = cmd.Parameters["@returnXML"].Value.ToString();
    //    var xdoc = new XmlDocument();
    //    xdoc.LoadXml(strxmltxt);
    //    xdoc.Save(fileLoc);

    //    con.Close();
    //    string outerrormessage;
    //    int outputrefno;
    //    byte[] outfile;
    //    int postrncount = objvalidatetransaction.UploadERxRequest("ASTER ELIXIR", "asterdmh", "DHA-P-0242455", "DHA-P-0242455", common.FileToByteArray(fileLoc), filename, out outputrefno, out outerrormessage, out outfile);
    //    //objvalidateerxtransaction.UploadERxRequest("ASTER ELIXIR", "asterdmh", "DHA-P-0242455", "DHA-P-0242455", common.FileToByteArray(fileLoc), filename, out outputrefno, out outerrormessage, out outfile);
    //    //objvalidatetransaction.UploadERxRequest("DHA-P-0242455", "DHA-P-0242455", common.FileToByteArray(fileLoc), filename, out outerrormessage, out outfile);  
    //    refno = outputrefno.ToString();

    //    //if (returnfilename == true)
    //    //{
    //    if (outfile != null)
    //    {
    //        string erfilename = Server.MapPath("~/PatientDocuments/Error.csv");
    //        if (File.Exists(erfilename))
    //        {
    //            File.Delete(erfilename);
    //        }

    //        Response.BinaryWrite(outfile);
    //        common.ByteArrayToFile(erfilename, outfile, out erfilename);
    //    }
    //    return outerrormessage;
    //    //}
    //}
    void BindPatientHiddenDetails(string RegistrationNo)
    {
        try
        {
            BaseC.Patient bC = new BaseC.Patient(sConString);
            BaseC.clsLISMaster objLISMaster = new BaseC.clsLISMaster(sConString);

            if (RegistrationNo != "")
            {
                int HospId = common.myInt(Session["HospitalLocationID"]);
                int FacilityId = common.myInt(Session["FacilityId"]);
                int EncodedBy = common.myInt(Session["UserId"]);
                DataSet ds = new DataSet();

                //wcf_Service_Billing.ServiceClient objIPBill = new wcf_Service_Billing.ServiceClient();
                //ds = objIPBill.GetPatientDetailsIP(HospId, FacilityId, 0, RegistrationNo, EncodedBy, 0, "");

                ////DataSet ds = bC.getPatientDetails(common.myInt(Session["HospitalLocationID"]), common.myInt(Session["FacilityId"]), 0, RegistrationNo, 0, common.myInt(Session["UserId"]));

                //if (ds.Tables.Count > 0)
                //{
                //    if (ds.Tables[0].Rows.Count > 0)
                //    {
                //        DataRow dr = ds.Tables[0].Rows[0];
                //        lblPatientName.Text = common.myStr(dr["PatientName"]) + ", " + common.myStr(dr["GenderAge"]);
                //        lblDob.Text = common.myStr(dr["DOB"]);
                //        lblMobile.Text = common.myStr(dr["MobileNo"]);
                //        lblEncounterNo.Text = common.myStr(dr["EncounterNo"]);
                //        lblAdmissionDate.Text = common.myStr(dr["EncounterDate"]);
                //        ddlAdvisingDoctor.SelectedValue = common.myStr(dr["ConsultingDoctorId"]);
                //    }
                //    else
                //    {
                //        lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                //        lblMessage.Text = "Patient not found !";
                //        return;
                //    }
                //}
                //else
                //{
                //    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                //    lblMessage.Text = "Patient not found !";
                //    return;
                //}
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }
    protected void ddlGeneric_OnItemsRequested(object sender, RadComboBoxItemsRequestedEventArgs e)
    {
        RadComboBox ddl = sender as RadComboBox;

        DataTable data = GetGenericData(e.Text);
        int itemOffset = e.NumberOfItems;
        int endOffset = Math.Min(itemOffset + ItemsPerRequest, data.Rows.Count);
        e.EndOfItems = endOffset == data.Rows.Count;

        for (int i = itemOffset; i < endOffset; i++)
        {
            ddl.Items.Add(new RadComboBoxItem(common.myStr(data.Rows[i]["GenericName"]), common.myStr(data.Rows[i]["GenericId"])));
        }
        e.Message = GetStatusMessage(endOffset, data.Rows.Count);
    }
    private DataTable GetGenericData(string text)
    {
        DataSet dsSearch = new DataSet();

        objPharmacy = new BaseC.clsPharmacy(sConString);
        int HospId = common.myInt(Session["HospitalLocationID"]);
        int EncodedBy = common.myInt(Session["UserId"]);
        int GenericId = 0;
        int Active = 1;
        dsSearch = objPharmacy.GetGenericDetails(GenericId, text, Active, HospId, EncodedBy);
        return dsSearch.Tables[0];
    }
    private static string GetStatusMessage(int offset, int total)
    {
        if (total <= 0)
            return "No matches found...";

        return String.Format("Items <b>1</b>-<b>{0}</b> out of <b>{1}</b>", offset, total);
    }

    //public void cmbDrugList_OnItemsRequested(object sender, RadComboBoxItemsRequestedEventArgs e)
    //{
    //    string strSRText = common.myStr(e.Text).Trim();

    //    DataTable data = BindSearchDrugCombo(strSRText);

    //    switch (common.myStr(rdoDrugType.SelectedValue))
    //    {
    //        case "ALL":
    //            data = PopulateAllDrug(strSRText);

    //            break;
    //        case "DOC":
    //            data = PopulatePastDrug(strSRText);

    //            break;
    //        case "PAT":
    //            data = PopulatePastPatientDrug(strSRText);

    //            break;
    //        case "FAV":
    //            data = PopulateFavouriteDrug(strSRText);

    //            break;
    //    }

    //    int itemOffset = e.NumberOfItems;
    //    if (itemOffset == 0)
    //    {
    //        this.cmbDrugList.Items.Clear();
    //    }
    //    int endOffset = Math.Min(itemOffset + 50, data.Rows.Count);
    //    e.EndOfItems = endOffset == data.Rows.Count;

    //    for (int i = itemOffset; i < endOffset; i++)
    //    {
    //        RadComboBoxItem item = new RadComboBoxItem();
    //        item.Text = (string)data.Rows[i]["Display_Name"];
    //        item.Value = data.Rows[i]["Drug_Id"].ToString();
    //        item.Attributes["GENPRODUCT_ID"] = data.Rows[i]["GENPRODUCT_ID"].ToString();
    //        item.Attributes["DRUG_SYN_ID"] = data.Rows[i]["DRUG_SYN_ID"].ToString();
    //        item.Attributes["SYNONYM_TYPE_ID"] = data.Rows[i]["SYNONYM_TYPE_ID"].ToString();
    //        item.Attributes["ROUTE_ID"] = data.Rows[i]["ROUTE_ID"].ToString();
    //        item.Attributes["ROUTE_DESCRIPTION"] = data.Rows[i]["ROUTE_DESCRIPTION"].ToString();
    //        item.Attributes["DOSEFORM_ID"] = data.Rows[i]["DOSEFORM_ID"].ToString();
    //        item.Attributes["DOSEFORM_DESCRIPTION"] = data.Rows[i]["DOSEFORM_DESCRIPTION"].ToString();
    //        item.Attributes["GENERIC_NAME"] = data.Rows[i]["GENERIC_NAME"].ToString();
    //        item.Attributes["JCODE"] = data.Rows[i]["JCODE"].ToString();
    //        this.cmbDrugList.Items.Add(item);
    //        item.DataBind();
    //        ViewState["Doseform"] = data.Rows[i]["DOSEFORM_DESCRIPTION"].ToString();
    //    }

    //    e.Message = GetStatusMessage(endOffset, data.Rows.Count);
    //}

    protected void ddlFrequency_OnSelectedIndexChanged(object sender, EventArgs e)
    {

        calcTotalQty();

        txtDays.Focus();
       
    }
    protected void rdoDurationList_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        endDateChange();
        //calcTotalQty();
    }
    
    protected void ddlPeriodType_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        txtDays.Text = "";
        endDateChange();
        //calcTotalQty();
        if (ddlPeriodType.SelectedValue == "O")
        {
            txtDays.Visible = true;
            rdoDurationList.Visible = false;
            ddlPeriodType1.Visible = true;
        }
        else
        {
            txtDays.Visible = false;
            rdoDurationList.Visible = true;
            ddlPeriodType1.Visible = false;
        }
    }

    protected void ddlPeriodType1_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        endDateChange();
        //calcTotalQty();
        if (ddlPeriodType.SelectedValue == "O")
        {
            txtDays.Visible = true;
            rdoDurationList.Visible = false;
            ddlPeriodType1.Visible = true;
        }
        else
        {
            txtDays.Visible = false;
            rdoDurationList.Visible = true;
            ddlPeriodType1.Visible = false;
        }
    }


    protected void txtDays_OnTextChanged(object sender, EventArgs e)
    {
        endDateChange();
        txtDose.Focus();
    }

    protected void txtDose_OnTextChanged(object sender, EventArgs e)
    {
        endDateChange();
        txtSpecialInstrucation.Focus();
    }

    protected void txtStartDate_OnTextChanged(object sender, EventArgs e)
    {
        endDateChange();
    }

    protected void btnEndDate_OnClick(object sender, EventArgs e)
    {
        endDateChange();
    }

    protected void btnCalc_OnClick(object sender, EventArgs e)
    {
        endDateChange();

        ddlFrequency.Focus();
    }

    private void endDateChange()
    {
        calcTotalQty();

        DateTime dt = common.myDate(txtStartDate.SelectedDate);

        int days = ddlPeriodType.SelectedValue == "O" ? common.myInt(txtDays.Text) : common.myInt(rdoDurationList.SelectedValue);
        if (ddlPeriodType.SelectedValue != "O")
        {
            switch (common.myStr(ddlPeriodType.SelectedValue))
            {
                case "D":
                    days = days * 1;
                    break;
                case "W":
                    days = days * 7;
                    break;
                case "M":
                    days = days * 30;
                    break;
                case "Y":
                    days = days * 365;
                    break;
                default:
                    days = days * 1;
                    break;
            }
        }
        else
        {
            switch (common.myStr(ddlPeriodType1.SelectedValue))
            {
                case "D":
                    days = days * 1;
                    break;
                case "W":
                    days = days * 7;
                    break;
                case "M":
                    days = days * 30;
                    break;
                case "Y":
                    days = days * 365;
                    break;
                default:
                    days = days * 1;
                    break;
            }
        }

        txtEndDate.SelectedDate = dt.AddDays(days - 1);
    }
    protected void lnkLabHistory_OnClick(object sender, EventArgs e)
    {

        RadWindow1.NavigateUrl = "/LIS/Phlebotomy/PatientHistory.aspx?CF=&Master=Blank&EncId=" + common.myStr(Session["EncounterID"]) + "&RegNo=" + Session["RegistrationNo"].ToString() + "";
        RadWindow1.Height = 600;
        RadWindow1.Width = 900;
        RadWindow1.Top = 20;
        RadWindow1.Left = 20;
        RadWindow1.OnClientClose = "OnClientClose";
        RadWindow1.VisibleOnPageLoad = true; // Set this property to True for showing window from code 
        RadWindow1.Modal = true;
        RadWindow1.InitialBehavior = WindowBehaviors.Maximize;
        RadWindow1.VisibleStatusbar = false;

    }
    private void calcTotalQty()
    {
        try
        {
            double dose = common.myDbl(txtDose.Text);
            double frequency = (common.myInt(ddlFrequency.SelectedValue) == 0) ? 0 : common.myDbl(ddlFrequency.SelectedItem.Attributes["Frequency"]);
            int days = ddlPeriodType.SelectedValue == "O" ? common.myInt(txtDays.Text) : Convert.ToInt16(rdoDurationList.SelectedValue);
            double totalQty = 0;
            if (ddlPeriodType.SelectedValue != "O")
            {
                switch (common.myStr(ddlPeriodType.SelectedValue))
                {
                    case "D":
                        days = days * 1;
                        break;
                    case "W":
                        days = days * 7;
                        break;
                    case "M":
                        days = days * 30;
                        break;
                    case "Y":
                        days = days * 365;
                        break;
                    default:
                        days = days * 1;
                        break;
                }
            }
            else
            {
                switch (common.myStr(ddlPeriodType1.SelectedValue))
                {
                    case "D":
                        days = days * 1;
                        break;
                    case "W":
                        days = days * 7;
                        break;
                    case "M":
                        days = days * 30;
                        break;
                    case "Y":
                        days = days * 365;
                        break;
                    default:
                        days = days * 1;
                        break;
                }
            }
            if (common.myBool(ViewState["ISCalculationRequired"]))
            {
                totalQty = frequency * days * dose;
                txtTotQty.Text = totalQty.ToString("F2");
            }
            else
            {
                txtTotQty.Text = "1";
            }
            txtSpecialInstrucation.Attributes.Add("Style", "Width:100%");

            //Added by rakesh start
            string vTime = string.Empty;
            if (common.myInt(ddlTime.SelectedValue) > 0)
            {
                vTime = " at " + ddlTime.SelectedItem.Text;
            }
            string vDose = string.Empty;

            if (txtDose.Text.Trim().Equals(string.Empty))
            {
                vDose = " Dose " + txtDose.Text.Trim();
            }
            string vUnit = string.Empty;

            if (common.myInt(ddlUnit.SelectedValue) > 0)
            {
                vUnit = " " + ddlUnit.SelectedValue;
            }
            //Added by rakesh end
            //txtSpecialInstrucation.Text = dose.ToString() + " (Advised Unit) " + ddlFrequency.Text + " For " + txtDays.Text + " " + ddlPeriodType.Text ;
            txtSpecialInstrucation.Text = dose.ToString() + " (Advised Unit) " + ddlFrequency.Text + " For " + txtDays.Text + " " + ddlPeriodType.Text + vTime + vDose + vUnit;
            
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;

            objException.HandleException(Ex);
        }
    }




    protected void gvStore_OnRowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                Label TotalQty = (Label)e.Row.FindControl("lblTotalQty");

                Label lblItemName = (Label)e.Row.FindControl("lblItemName");
                Label lblCustomMedication = (Label)e.Row.FindControl("lblCustomMedication");
                HiddenField hdnGenericName = (HiddenField)e.Row.FindControl("hdnGenericName");

                TotalQty.Text = common.myDbl(TotalQty.Text).ToString("F2");

                if (common.myStr(lblCustomMedication.Text).Trim().Length > 0)
                {
                    lblItemName.Visible = false;
                    lblCustomMedication.Visible = true;

                    if (common.myStr(hdnGenericName.Value).Trim().Length > 0)
                    {
                        lblCustomMedication.Text = common.myStr(hdnGenericName.Value) + " - " + lblCustomMedication.Text;
                    }
                }
                else
                {
                    lblItemName.Visible = true;
                    lblCustomMedication.Visible = false;

                    if (common.myStr(hdnGenericName.Value).Trim().Length > 0)
                    {
                        lblItemName.Text = common.myStr(hdnGenericName.Value) + " - " + lblItemName.Text;
                    }
                }

                System.Drawing.Color color = System.Drawing.Color.White;

                if (common.myStr(lblCustomMedication.Text).Trim().Length > 0)
                {
                    e.Row.BackColor = System.Drawing.Color.Bisque;
                }
                else
                {
                    e.Row.BackColor = color;
                }

                gvStore.Columns[(byte)enumColumns.MonographCIMS].Visible = false;
                gvStore.Columns[(byte)enumColumns.InteractionCIMS].Visible = false;
                gvStore.Columns[(byte)enumColumns.DHInteractionCIMS].Visible = false;

                gvStore.Columns[(byte)enumColumns.MonographVIDAL].Visible = false;
                gvStore.Columns[(byte)enumColumns.InteractionVIDAL].Visible = false;
                gvStore.Columns[(byte)enumColumns.DHInteractionVIDAL].Visible = false;

                if (common.myBool(ViewState["IsCIMSInterfaceActive"]))
                {
                    gvStore.Columns[(byte)enumColumns.MonographCIMS].Visible = true;
                    gvStore.Columns[(byte)enumColumns.InteractionCIMS].Visible = true;
                    gvStore.Columns[(byte)enumColumns.DHInteractionCIMS].Visible = true;

                    HiddenField hdnCIMSItemId = (HiddenField)e.Row.FindControl("hdnCIMSItemId");
                    LinkButton lnkBtnMonographCIMS = (LinkButton)e.Row.FindControl("lnkBtnMonographCIMS");
                    LinkButton lnkBtnInteractionCIMS = (LinkButton)e.Row.FindControl("lnkBtnInteractionCIMS");
                    LinkButton lnkBtnDHInteractionCIMS = (LinkButton)e.Row.FindControl("lnkBtnDHInteractionCIMS");

                    //lnkBtnMonographCIMS.BackColor = System.Drawing.Color.FromName(common.myStr(ViewState["DrugMonographColor"]));
                    lnkBtnInteractionCIMS.BackColor = System.Drawing.Color.FromName(common.myStr(ViewState["DrugtoDrugInteractionColor"]));
                    lnkBtnDHInteractionCIMS.BackColor = System.Drawing.Color.FromName(common.myStr(ViewState["DrugHealthInteractionColor"]));

                    if (common.myStr(hdnCIMSItemId.Value).Trim().Length == 0)
                    {
                        lnkBtnMonographCIMS.Visible = false;
                        lnkBtnInteractionCIMS.Visible = false;
                        lnkBtnDHInteractionCIMS.Visible = false;
                    }
                    else
                    {
                        HiddenField hdnCIMSType = (HiddenField)e.Row.FindControl("hdnCIMSType");

                        string strXML = getMonographXML(common.myStr(hdnCIMSType.Value), common.myStr(hdnCIMSItemId.Value));

                        if (strXML != "")
                        {
                            string outputValues = objCIMS.getFastTrack5Output(strXML);

                            if (!outputValues.ToUpper().Contains("<MONOGRAPH>"))
                            {
                                lnkBtnMonographCIMS.Visible = false;
                            }
                        }
                    }
                }
                else if (common.myBool(ViewState["IsVIDALInterfaceActive"]))
                {
                    gvStore.Columns[(byte)enumColumns.MonographVIDAL].Visible = true;
                    gvStore.Columns[(byte)enumColumns.InteractionVIDAL].Visible = true;
                    gvStore.Columns[(byte)enumColumns.DHInteractionVIDAL].Visible = true;

                    HiddenField hdnVIDALItemId = (HiddenField)e.Row.FindControl("hdnVIDALItemId");
                    LinkButton lnkBtnMonographVIDAL = (LinkButton)e.Row.FindControl("lnkBtnMonographVIDAL");
                    LinkButton lnkBtnInteractionVIDAL = (LinkButton)e.Row.FindControl("lnkBtnInteractionVIDAL");
                    LinkButton lnkBtnDHInteractionVIDAL = (LinkButton)e.Row.FindControl("lnkBtnDHInteractionVIDAL");

                    //lnkBtnMonographVIDAL.BackColor = System.Drawing.Color.FromName(common.myStr(ViewState["DrugMonographColor"]));
                    lnkBtnInteractionVIDAL.BackColor = System.Drawing.Color.FromName(common.myStr(ViewState["DrugtoDrugInteractionColor"]));
                    lnkBtnDHInteractionVIDAL.BackColor = System.Drawing.Color.FromName(common.myStr(ViewState["DrugHealthInteractionColor"]));

                    if (common.myStr(hdnVIDALItemId.Value).Trim().Length == 0)
                    {
                        lnkBtnMonographVIDAL.Visible = false;
                        lnkBtnInteractionVIDAL.Visible = false;
                        lnkBtnDHInteractionVIDAL.Visible = false;
                    }
                }
            }
        }
        catch
        {
        }
    }

    protected void gvStore_OnRowCommand(object Sender, GridViewCommandEventArgs e)
    {
        try
        {
            lblMessage.Text = "";

            if (e.CommandName == "Select")
            {
                GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);

                int ItemId = common.myInt(((HiddenField)row.FindControl("hdnItemId")).Value);
                int GenericId = common.myInt(((HiddenField)row.FindControl("hdnGenericId")).Value);

                string customMedication = common.myStr(((Label)row.FindControl("lblCustomMedication")).Text).Trim();

                if (ItemId == 0 && GenericId == 0 && customMedication.Length == 0)
                {
                    return;
                }

                string CIMSItemId = common.myStr(((HiddenField)row.FindControl("hdnCIMSItemId")).Value);
                string CIMSType = common.myStr(((HiddenField)row.FindControl("hdnCIMSType")).Value);

                string VIDALItemId = common.myStr(((HiddenField)row.FindControl("hdnVIDALItemId")).Value);

                if (customMedication.Length > 0)
                {
                    chkCustomMedication.Checked = true;
                }
                else
                {
                    chkCustomMedication.Checked = false;

                    if (ItemId > 0)
                    {
                        ddlFormulation.Enabled = false;
                        ddlRoute.Enabled = false;
                        ddlStrength.Enabled = false;
                    }
                    else
                    {
                        ddlFormulation.Enabled = true;
                        ddlRoute.Enabled = true;
                        ddlStrength.Enabled = true;
                    }
                }

                chkCustomMedicationChanged();

                hdnGenericId.Value = common.myStr(GenericId);
                hdnItemId.Value = common.myStr(ItemId);

                hdnCIMSItemId.Value = common.myStr(CIMSItemId);
                hdnCIMSType.Value = common.myStr(CIMSType);

                hdnVIDALItemId.Value = common.myStr(VIDALItemId);

                Label lblItemName = (Label)row.FindControl("lblItemName");
                HiddenField hdnGenericName = (HiddenField)row.FindControl("hdnGenericName");
                Label TotalQty = (Label)row.FindControl("lblTotalQty");

                HiddenField hdnFormulationId = (HiddenField)row.FindControl("hdnFormulationId");
                HiddenField hdnRouteId = (HiddenField)row.FindControl("hdnRouteId");
                HiddenField hdnStrengthId = (HiddenField)row.FindControl("hdnStrengthId");
                HiddenField hdnFrequencyId = (HiddenField)row.FindControl("hdnFrequencyId");
                HiddenField hdnDose = (HiddenField)row.FindControl("hdnDose");
                HiddenField hdnDays = (HiddenField)row.FindControl("hdnDays");
                HiddenField hdnRemarks = (HiddenField)row.FindControl("hdnRemarks");

                HiddenField hdnDurationType = (HiddenField)row.FindControl("hdnDurationType");

                HiddenField hdnSubDurationType = (HiddenField)row.FindControl("hdnSubDurationType");
                
                HiddenField hdnStartDate = (HiddenField)row.FindControl("hdnStartDate");
                HiddenField hdnEndDate = (HiddenField)row.FindControl("hdnEndDate");

                HiddenField hdnICDCode = (HiddenField)row.FindControl("hdnICDCode");
                HiddenField hdnSOS = (HiddenField)row.FindControl("hdnSOS");
                HiddenField hdnRefill = (HiddenField)row.FindControl("hdnRefill");

                HiddenField chdnIsOverride = (HiddenField)row.FindControl("chdnIsOverride");
                HiddenField chdnOverrideComments = (HiddenField)row.FindControl("chdnOverrideComments");
                HiddenField chdnDrugAllergyScreeningResult = (HiddenField)row.FindControl("chdnDrugAllergyScreeningResult");
                HiddenField hdnPrescriptionModeId = (HiddenField)row.FindControl("hdnPrescriptionModeId");

                //Added by rakesh start
                HiddenField hdnDoseTime = (HiddenField)row.FindControl("hdnDoseTime");
                HiddenField hdnDoseUnitID = (HiddenField)row.FindControl("hdnDoseUnitID");
                HiddenField hdnFoodID = (HiddenField)row.FindControl("hdnFoodID");
                HiddenField hdnPRNRemarks = (HiddenField)row.FindControl("hdnPRNRemarks");
                //double days = common.myDbl(hdnDays.Value);
                ddlTime.Enabled = hdnFrequencyId.Value == "78" ? true : false;
                
                ddlTime.SelectedValue = hdnDoseTime.Value;
                ddlUnit.SelectedValue = hdnDoseUnitID.Value;
                ddlFood.SelectedValue = hdnFoodID.Value;
                txtPRN.Text = hdnPRNRemarks.Value;
                if (hdnDurationType.Value != "")
                {
                    int days = 0;
                    if (hdnDurationType.Value == "O")
                    {
                        txtDays.Visible = true;
                        rdoDurationList.Visible = false;
                        ddlPeriodType1.Visible = true;
                        ddlPeriodType.SelectedValue = hdnDurationType.Value;
                        ddlPeriodType1.SelectedValue = hdnSubDurationType.Value;
                        switch (common.myStr(hdnSubDurationType.Value))
                        {
                            case "D":
                                days = Convert.ToInt32(hdnDays.Value) / 1;
                                break;
                            case "W":
                                days = Convert.ToInt32(hdnDays.Value) / 7;
                                break;
                            case "M":
                                days = Convert.ToInt32(hdnDays.Value) / 30;
                                break;
                            case "Y":
                                days = Convert.ToInt32(hdnDays.Value) / 365;
                                break;
                        }
                        txtDays.Text = days.ToString();
                    }
                    else
                    {
                        
                        switch (common.myStr(hdnDurationType.Value))
                        {
                            case "D":
                                days = Convert.ToInt32(hdnDays.Value) / 1;
                                break;
                            case "W":
                                days = Convert.ToInt32(hdnDays.Value) / 7;
                                break;
                            case "M":
                                days = Convert.ToInt32(hdnDays.Value) / 30;
                                break;
                            case "Y":
                                days = Convert.ToInt32(hdnDays.Value) / 365;
                                break;
                        }
                        rdoDurationList.Visible = true;
                        txtDays.Visible = false;
                        ddlPeriodType1.Visible = false;
                        ddlPeriodType.SelectedValue = hdnDurationType.Value;
                        rdoDurationList.SelectedValue = days.ToString();
                    }
                }
                if (common.myInt(ddlTime.SelectedValue) > 0)
                {
                    ddlTime.Enabled = true;
                }
                objPharmacy = new BaseC.clsPharmacy(sConString);
                DataSet dsCalisreq = objPharmacy.ISCalculationRequired(common.myInt(hdnItemId.Value));
                if (dsCalisreq.Tables[0].Rows.Count > 0)
                {
                    ViewState["ISCalculationRequired"] = common.myBool(dsCalisreq.Tables[0].Rows[0]["CalculationRequired"]);
                }

                hdnGenericName.Value = common.myStr(hdnGenericName.Value);
                ddlGeneric.Text = common.myStr(hdnGenericName.Value);

                hdnItemName.Value = common.myStr(lblItemName.Text);
                ddlBrand.Text = common.myStr(lblItemName.Text);

                hdnIsUnSavedData.Value = "1";
                txtTotQty.Text = common.myDbl(TotalQty.Text).ToString("F2");
                ddlFormulation.SelectedIndex = ddlFormulation.Items.IndexOf(ddlFormulation.Items.FindItemByValue(common.myStr(hdnFormulationId.Value)));
                ddlRoute.SelectedIndex = ddlRoute.Items.IndexOf(ddlRoute.Items.FindItemByValue(common.myStr(hdnRouteId.Value)));
                ddlStrength.SelectedIndex = ddlStrength.Items.IndexOf(ddlStrength.Items.FindItemByValue(common.myStr(hdnStrengthId.Value)));
                txtDose.Text = common.myStr(hdnDose.Value);
                ddlFrequency.SelectedIndex = ddlFrequency.Items.IndexOf(ddlFrequency.Items.FindItemByValue(common.myStr(hdnFrequencyId.Value)));
                
                txtStartDate.SelectedDate = common.myDate(hdnStartDate.Value);
                txtEndDate.SelectedDate = common.myDate(hdnEndDate.Value);
                txtSpecialInstrucation.Text = common.myStr(hdnRemarks.Value).Trim();
                ddlPrescriptionMode.SelectedValue = common.myStr(hdnPrescriptionModeId.Value);
                txtCustomMedication.Text = customMedication;

                txtICDCode.Text = common.myStr(hdnICDCode.Value);
                chkSOS.Checked = common.myBool(hdnSOS.Value);
                ddlRefill.SelectedIndex = ddlRefill.Items.IndexOf(ddlRefill.Items.FindItemByValue(common.myStr(hdnRefill.Value)));

                hdnIsOverride.Value = common.myBool(chdnIsOverride.Value) ? "1" : "0";
                hdnOverrideComments.Value = common.myStr(chdnOverrideComments.Value);
                hdnDrugAllergyScreeningResult.Value = common.myStr(chdnDrugAllergyScreeningResult.Value);

                setSOSVisible();
            }
            else if (e.CommandName == "ItemDelete")
            {
                dvprescripConfirmDeletion.Visible = true;
                int ItemId = common.myInt(e.CommandArgument);
                GridViewRow row = (GridViewRow)(((ImageButton)e.CommandSource).NamingContainer);
                int DetailsId = common.myInt(((HiddenField)row.FindControl("hdnDetailsId")).Value);
                int GenericId = common.myInt(((HiddenField)row.FindControl("hdnGenericId")).Value);
                string customMedication = common.myStr(((Label)row.FindControl("lblCustomMedication")).Text).Trim();

                ViewState["ItemId"] = ItemId;
                ViewState["GenericId"] = GenericId;
                ViewState["customMedication"] = customMedication;
                ViewState["DetailsId"] = DetailsId;
            }
            else if (e.CommandName == "MonographCIMS")
            {
                if (Cache["CIMSXML" + common.myStr(Session["UserId"])] != null)
                {
                    Cache.Remove("CIMSXML" + common.myStr(Session["UserId"]));
                }

                GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
                HiddenField hdnCIMSType = (HiddenField)row.FindControl("hdnCIMSType");

                showMonograph(common.myStr(e.CommandArgument).Trim(), common.myStr(hdnCIMSType.Value).Trim());
            }
            else if (e.CommandName == "InteractionCIMS")
            {
                ViewState["NewPrescribing"] = "";
                showIntreraction();
            }
            else if (e.CommandName == "DHInteractionCIMS")
            {
                ViewState["NewPrescribing"] = "";
                showHealthOrAllergiesIntreraction("H");
            }
            else if (e.CommandName == "MonographVIDAL")
            {
                if (common.myInt(e.CommandArgument) > 0)
                {
                    getMonographVidal((int?)common.myInt(e.CommandArgument));
                }
            }
            else if (e.CommandName == "InteractionVIDAL")
            {
                int?[] commonNameGroupIds = getVIDALCommonNameGroupIds();

                if (commonNameGroupIds.Length > 0)
                {
                    getDrugToDrugInteractionVidal(commonNameGroupIds);
                }
            }
            else if (e.CommandName == "DHInteractionVIDAL")
            {
                showHealthOrAllergiesIntreraction("H");
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;

            objException.HandleException(Ex);
        }
    }

    private int?[] getVIDALCommonNameGroupIds()
    {
        int?[] commonNameGroupIds = null;
        try
        {
            List<int?> list = new List<int?>();

            foreach (GridViewRow dataItem in gvStore.Rows)
            {
                HiddenField VIDALItemId = (HiddenField)dataItem.FindControl("hdnVIDALItemId");
                LinkButton lnkBtnInteractionVIDAL = (LinkButton)dataItem.FindControl("lnkBtnInteractionVIDAL");
                LinkButton lnkBtnDHInteractionVIDAL = (LinkButton)dataItem.FindControl("lnkBtnDHInteractionVIDAL");

                if (common.myInt(VIDALItemId.Value) > 0)
                //&& (lnkBtnInteractionVIDAL.Visible || lnkBtnDHInteractionVIDAL.Visible))
                {
                    list.Add(common.myInt(VIDALItemId.Value));
                }
            }

            commonNameGroupIds = list.ToArray();
        }
        catch
        {
        }
        return commonNameGroupIds;
    }

    protected void bindGridData(int PrescriptionId)
    {
        try
        {
            DataSet ds = new DataSet();
            //if (common.myStr(ViewState["PatientOPIPType"]) == "I")
            //{
            //    objPharmacy = new BaseC.clsPharmacy(sConString);
            //    if (PrescriptionId > 0)
            //    {
            //        ds = objPharmacy.getPreviousMedicines(common.myInt(Session["HospitalLocationID"]),
            //            common.myInt(Session["FacilityId"]), common.myInt(Session["EncounterId"]), PrescriptionId);
            //    }
            //    else
            //    {
            //        ds = objPharmacy.getPreviousMedicines(common.myInt(Session["HospitalLocationID"]),
            //            common.myInt(Session["FacilityId"]), 0, PrescriptionId);
            //    }
            //}
            //else
            //{
            objEMR = new BaseC.clsEMR(sConString);
            if (PrescriptionId > 0)
            {
                ds = objEMR.getPreviousMedicinesOP(common.myInt(Session["HospitalLocationID"]),
                    common.myInt(Session["FacilityId"]), common.myInt(Session["EncounterId"]), PrescriptionId);
            }
            else
            {
                ds = objEMR.getPreviousMedicinesOP(common.myInt(Session["HospitalLocationID"]),
                    common.myInt(Session["FacilityId"]), -1, PrescriptionId);
            }
            //}

            if (ds.Tables[0].Rows.Count == 0)
            {
                ds.AcceptChanges();

                DataRow DR = ds.Tables[0].NewRow();
                ds.Tables[0].Rows.Add(DR);
            }

            ViewState["GridData"] = ds.Tables[0];

            gvStore.DataSource = ds.Tables[0];
            gvStore.DataBind();

            setVisiblilityInteraction();
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }

    private void clearItemDetails()
    {
        txtTotQty.Text = "0.00";
        ddlFormulation.SelectedIndex = 0;
        ddlRoute.SelectedIndex = 0;
        ddlStrength.SelectedIndex = 0;
        txtDose.Text = "";
        ddlFrequency.SelectedIndex = 0;
        txtDays.Text = "";
        ddlPeriodType.SelectedIndex = 0;
        txtStartDate.SelectedDate = DateTime.Now;
        txtEndDate.SelectedDate = DateTime.Now;
        txtSpecialInstrucation.Text = "";
        //ddlDrugRemarks.SelectedIndex = 0;
       // txtSpecialInstrucation.Text = "";
        txtICDCode.Text = "";
        chkSOS.Checked = false;
        ddlRefill.SelectedIndex = 0;

        hdnIsOverride.Value = "";
        hdnOverrideComments.Value = "";
        hdnDrugAllergyScreeningResult.Value = "";

        //Added by rakesh start
        ddlTime.SelectedIndex = 0;
        ddlFood.SelectedIndex = 0;
        ddlUnit.SelectedIndex = 0;
        txtPRN.Text = string.Empty;

        ddlTime.Enabled = false;

        //Added by rakesh end

        setSOSVisible();
    }

    protected void btnGetInfoGeneric_Click(object sender, EventArgs e)
    {
        ddlFormulation.Enabled = true;
        ddlRoute.Enabled = true;
        ddlStrength.Enabled = true;

        ddlBrand.Focus();
    }

    protected void btnGetInfo_Click(object sender, EventArgs e)
    {
        try
        {
            int ItemId = common.myInt(hdnItemId.Value);
            string CIMSItemId = common.myStr(hdnCIMSItemId.Value);
            string CIMSType = common.myStr(hdnCIMSType.Value);
            int VIDALItemId = common.myInt(hdnVIDALItemId.Value);

            clearItemDetails();
            BindICDPanel();
            ddlFormulation.Enabled = true;
            ddlRoute.Enabled = true;
            ddlStrength.Enabled = true;

            //Added by rakesh start
            SetStrengthFormUnitRouteOfSelectedDrug();

            //Added by rakesh end

            if (ItemId > 0)
            {
                hdnGenericId.Value = "0";

                objPharmacy = new BaseC.clsPharmacy(sConString);

                DataSet ds = objPharmacy.getItemMaster(ItemId, "", "", 1, common.myInt(Session["HospitalLocationID"]), common.myInt(Session["UserId"]));
                if (ds.Tables[0].Rows.Count > 0)
                {
                    DataRow DR = ds.Tables[0].Rows[0];

                    hdnGenericId.Value = common.myInt(DR["GenericId"]).ToString();
                    ddlFormulation.SelectedIndex = ddlFormulation.Items.IndexOf(ddlFormulation.Items.FindItemByValue(common.myInt(DR["FormulationId"]).ToString()));
                    ddlRoute.SelectedIndex = ddlRoute.Items.IndexOf(ddlRoute.Items.FindItemByValue(common.myInt(DR["RouteId"]).ToString()));
                    ddlStrength.SelectedIndex = ddlStrength.Items.IndexOf(ddlStrength.Items.FindItemByValue(common.myInt(DR["StrengthId"]).ToString()));
                    ViewState["UnitName"] = common.myStr(DR["ItemUnitName"]);
                    ddlFormulation.Enabled = false;
                    ddlRoute.Enabled = false;
                    ddlStrength.Enabled = false;

                    txtDose.Focus();
                }
               
                DataSet dsCalisreq = objPharmacy.ISCalculationRequired(common.myInt(hdnItemId.Value));
                if (dsCalisreq.Tables[0].Rows.Count > 0)
                {
                    ViewState["ISCalculationRequired"] = common.myBool(dsCalisreq.Tables[0].Rows[0]["CalculationRequired"]);
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;

            objException.HandleException(Ex);
        }
    }

    protected void btnBindGridWithXml_OnClick(object sender, EventArgs e)
    {
        try
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "";

            if (common.myStr(hdnxmlString.Value).Trim().Length > 0)
            {
                string xmlSchema = common.myStr(hdnxmlString.Value);
                StringReader sr = new StringReader(xmlSchema);
                DataSet dsXml = new DataSet();
                dsXml.ReadXml(sr, XmlReadMode.ReadSchema);
                sr.Close();

                if (dsXml.Tables[0].Rows.Count == 0)
                {
                    return;
                }

                ViewState["GridData"] = dsXml.Tables[0];
                hdnIsUnSavedData.Value = "1";
                gvStore.DataSource = dsXml.Tables[0];
                gvStore.DataBind();

                setVisiblilityInteraction();

                hdnxmlString.Value = "";
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }

    protected void btnNew_OnClick(Object sender, EventArgs e)
    {
        Response.Redirect(common.myStr(Request.Url.AbsoluteUri), false);
    }

    protected void btnPrint_Click(object sender, EventArgs e)
    {
        try
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "";

            if (common.myInt(ddlPrescription.SelectedValue) == 0)
            {
                lblMessage.Text = "Prescription No not selected !";
                return;
            }

            if (common.myBool(ViewState["IsPrecription"]) == true)
            {
                RadWindow1.NavigateUrl = "/EMR/Medication/PrintPriscription.aspx?PT=P&PId=" + common.myInt(ddlPrescription.SelectedValue);
            }
            else
            {
                RadWindow1.NavigateUrl = "/EMR/Medication/PrintPriscription.aspx?PT=M&PId=" + common.myInt(ddlPrescription.SelectedValue);
            }

            RadWindow1.Height = 650;
            RadWindow1.Width = 900;
            RadWindow1.Top = 10;
            RadWindow1.Left = 10;
            //RadWindow1.OnClientClose = "BindDrugsBySubstitute";
            RadWindow1.Modal = true;
            RadWindow1.VisibleOnPageLoad = true;
            RadWindow1.VisibleStatusbar = false;
            RadWindow1.Behaviors = WindowBehaviors.Maximize | WindowBehaviors.Minimize | WindowBehaviors.Close | WindowBehaviors.Move | WindowBehaviors.Pin;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }

    //protected void lnkPatientDashboard_Click(Object sender, EventArgs e)
    //{
    //    Response.Redirect("~/EMR/Dashboard/PatientDashboard.aspx", false);
    //}

    protected void chkSOS_OnCheckedChanged(object sender, EventArgs e)
    {
        setSOSVisible();
    }

    private void setSOSVisible()
    {
        lblRefill.Visible = !chkSOS.Checked;
        ddlRefill.Visible = !chkSOS.Checked;
    }

    protected void rdoFormularyType_SelectedIndexChanged(object sender, EventArgs e)
    {
        lblMessage.Text = "";
        ddlBrand.Text = "";
        hdnItemId.Value = "0";
        hdnCIMSItemId.Value = "";
        hdnCIMSType.Value = "";
        hdnVIDALItemId.Value = "";
    }

    protected void rdoDrugType_SelectedIndexChanged(object sender, EventArgs e)
    {
        lblMessage.Text = "";
        ddlBrand.Text = "";
        hdnItemId.Value = "0";
        hdnCIMSItemId.Value = "";
        hdnCIMSType.Value = "";
        hdnVIDALItemId.Value = "";

        ddlOrderSet.Visible = false;
        ddlOrderSet.SelectedIndex = -1;
        switch (common.myStr(rdoDrugType.SelectedValue))
        {
            case "ALL":
                btnAddtoFav.Visible = true;
                btnDeleteFavourite.Visible = false;
                break;

            case "FAV":
                btnAddtoFav.Visible = false;
                btnDeleteFavourite.Visible = true;
                break;

            case "OS":
                ddlOrderSet.Visible = true;
                break;
        }
    }

    protected void lnkPrescriptionRemarks_OnClick(object sender, EventArgs e)
    {
        divPrescriptionRemarks.Visible = true;
    }

    protected void btnSaveCustum_Click(object sender, EventArgs e)
    {
        try
        {
            //DAL.DAL objDl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
            //DateTime dtStartDate = Convert.ToDateTime("1990-01-01");
            //if (rdpStartDate.SelectedDate != null)
            //    dtStartDate = (DateTime)rdpStartDate.SelectedDate.Value;

            //StringBuilder objStr = new StringBuilder();
            //objStr.Append("<Table1><c1>" + hdn_GENPRODUCT_ID.Text + "</c1>");
            //objStr.Append("<c2>" + hdn_DRUG_SYN_ID.Text + "</c2>");
            //if (dtStartDate != Convert.ToDateTime("1990-01-01"))
            //    objStr.Append("<c3>" + dtStartDate.ToString("dd/MM/yyyy") + "</c3>");
            //else
            //    objStr.Append("<c3>" + DBNull.Value + "</c3>");

            //objStr.Append("<c4>" + ddlFrequency.SelectedValue + "</c4>");
            //objStr.Append("<c5>" + ddlDose.SelectedValue + "</c5>");
            //objStr.Append("<c6>" + ddlRouteForms.SelectedValue + "</c6>");
            //objStr.Append("<c7>" + txtICDCode.Text + "</c7>");
            ////remarks
            //objStr.Append("<c8>" + chkSOS.Checked + "</c8>");
            //objStr.Append("<c9>" + chkDAW.Checked + "</c9>");
            //objStr.Append("<c10>" + txtQtyAmount.Text + "</c10>");
            //objStr.Append("<c11>" + txt_Days.Text + "</c11>");
            //objStr.Append("<c12>" + ddlunit.SelectedValue + "</c12>");
            //objStr.Append("<c13>" + ddlrefill.SelectedValue + "</c13>");
            //objStr.Append("<c14>35</c14>");
            //objStr.Append("<c15>" + txtcomments.Text + "</c15>");
            //objStr.Append("<c16>" + ddlModeType.SelectedValue + "</c16>");

            //DateTime StartDate = Convert.ToDateTime("1990-01-01");
            //DateTime EndDate;
            //if (dtStartDate != Convert.ToDateTime("1990-01-01"))
            //    StartDate = dtStartDate;

            //if (txt_Days.Text == "" || txt_Days.Text == null)
            //{
            //    EndDate = StartDate;
            //}
            //else
            //{
            //    if (StartDate != Convert.ToDateTime("1990-01-01"))
            //        EndDate = StartDate + TimeSpan.FromDays(Convert.ToDouble(txt_Days.Text));
            //    else
            //        EndDate = StartDate;
            //}

            //if (EndDate != Convert.ToDateTime("1990-01-01"))
            //{
            //    objStr.Append("<c17>" + EndDate.ToString("dd/MM/yyyy") + "</c17>");
            //}
            //else
            //{
            //    objStr.Append("<c17>" + DBNull.Value + "</c17>");
            //}
            //if (Session["Override"] != null)
            //    objStr.Append("<c18>" + Session["Override"].ToString() + "</c18>");
            //else
            //    objStr.Append("<c18>" + DBNull.Value + "</c18>");

            //if (Session["Comment"] != null)
            //    objStr.Append("<c19>" + Session["Comment"].ToString() + "</c19>");
            //else
            //    objStr.Append("<c19>" + DBNull.Value + "</c19>");

            //objStr.Append("<c20>" + DBNull.Value + "</c20>");
            //objStr.Append("<c21>0</c21>");
            //objStr.Append("<c22>" + chkIsBillable.Checked + "</c22>");
            //objStr.Append("<c23>" + hdnCurrentRowId.Text + "</c23>");
            //objStr.Append("<c24>" + ddlSupervisor.SelectedValue + "</c24>");
            //objStr.Append("<c25>" + txtCustomMedication.Text + "</c25>");
            //objStr.Append("</Table1>");
            //if (objStr.ToString() != "")
            //{
            //    Int16 IsChecked = 0;
            //    Hashtable hshTable = new Hashtable();
            //    hshTable.Add("@intRegistrationId", Session["RegistrationID"]);
            //    hshTable.Add("@inyHospitalLocationId", Session["HospitalLocationID"]); //Request.QueryString["RegNo"];
            //    hshTable.Add("@intEncounterId", Session["encounterid"]); //Request.QueryString["IpNo"];
            //     hshTable.Add("@intEncodedBy", Session["UserId"]);
            //    hshTable.Add("XMLData", objStr.ToString());

            //    if (chkNoMedicine.Checked == true)
            //    {
            //        IsChecked = 1;
            //    }
            //    else
            //    {
            //        IsChecked = 0;
            //    }
            //    hshTable.Add("@bitNoCurrentMedication", IsChecked);

            //    if (ViewState["PageId"] != null)
            //    {
            //        pageId = ViewState["PageId"].ToString();
            //    }
            //    else
            //        pageId = "0";

            //    hshTable.Add("@intLoginFacilityId", Session["facilityId"]);
            //    if (Convert.ToInt32(pageId) == 153)
            //        pageId = "128";

            //    hshTable.Add("@intPageId", pageId);

            //    if (chkePrescribe.Checked == true)
            //    {
            //        IsChecked = 1;
            //    }
            //    else
            //    {
            //        IsChecked = 0;
            //    }
            //    hshTable.Add("bitIsePrescribe", IsChecked);
            //    if (chkPregnant.Checked == true)
            //    {
            //        IsChecked = 1;
            //    }
            //    else
            //    {
            //        IsChecked = 0;
            //    }
            //    hshTable.Add("bitIsPregnant", IsChecked);

            //    if (chkBreastFeeding.Checked == true)
            //    {
            //        IsChecked = 1;
            //    }
            //    else
            //    {
            //        IsChecked = 0;
            //    }
            //    hshTable.Add("bitIsBreastFeeding", IsChecked);
            //    hshTable.Add("@IsShowNote", rblShowNote.SelectedItem.Value);
            //    if (ViewState["IsPrecription"].ToString() == "True")
            //    {
            //        hshTable.Add("@isPrescription", Convert.ToString("Yes"));
            //    }
            //    else
            //    {
            //        hshTable.Add("@isPrescription", Convert.ToString("No"));
            //    }
            //    if (hdnCurrentRowId.Text.Trim() != "" && hdnCurrentRowId.Text.Trim() != null)
            //    {
            //        objDl.ExecuteNonQuery(CommandType.StoredProcedure, "USPEMRUpdateCustomMedication", hshTable);
            //        lbl_Msg.Text = "Record(s) Has Been Update...";
            //    }
            //    else
            //    {
            //        objDl.ExecuteNonQuery(CommandType.StoredProcedure, "USPEMRSaveCustomMedication", hshTable);
            //        lbl_Msg.Text = "Record(s) Has Been Saved...";
            //    }

            //    ScriptManager.RegisterStartupScript(Page, GetType(), "scrip1", "nSat=0;", true);
            //    //Alert.ShowAjaxMsg("Record(s) Has Been Saved. ", Page);

            //    RetrivePatientCurrentEncounterDrugs();
            //    btnCustomMed.Text = "Custom Medication";
            //    divCustomMed.Visible = false;
            //    txtCustomMedication.Text = "";
            //}
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }

    protected void btnDeleteFavourite_Click(object sender, EventArgs e)
    {
        try
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            if (common.myInt(hdnItemId.Value) == 0)
            {
                lblMessage.Text = "Drug not selected ! ";
                return;
            }

            objEMR = new BaseC.clsEMR(sConString);
            string strMsg = objEMR.DeleteFavoriteDrugs(common.myInt(Session["UserID"]), common.myInt(hdnItemId.Value),
                                            getFormularyType(), common.myInt(Session["UserID"]));

            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            if (strMsg.ToLower().Contains(" delete"))
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                ddlBrand.Text = "";
                hdnItemId.Value = "0";
                hdnCIMSItemId.Value = "";
                hdnCIMSType.Value = "";
                hdnVIDALItemId.Value = "";
            }
            lblMessage.Text = strMsg;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }

    protected void btnAddtoFav_Click(object sender, EventArgs e)
    {
        try
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            if (common.myInt(hdnItemId.Value) == 0)
            {
                lblMessage.Text = "Drug not selected ! ";
                return;
            }

            objEMR = new BaseC.clsEMR(sConString);
            string strMsg = objEMR.SaveFavouriteDrugs(common.myInt(Session["DoctorId"]), common.myInt(hdnItemId.Value),
                                                      getFormularyType(), common.myInt(Session["UserID"]), 0, 0, 0, 0, 
                                                      0, 0, 0, string.Empty, 0, string.Empty);

            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            if ((strMsg.ToLower().Contains(" update") || strMsg.ToLower().Contains(" save")))
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                ddlBrand.Text = "";
                hdnItemId.Value = "0";
                hdnCIMSItemId.Value = "";
                hdnCIMSType.Value = "";
                hdnVIDALItemId.Value = "";
            }
            lblMessage.Text = strMsg;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;

            objException.HandleException(Ex);
        }
    }

    protected void ddlBrand_OnItemsRequested(object sender, RadComboBoxItemsRequestedEventArgs e)
    {
        if (common.myStr(rdoDrugType.SelectedValue) != "FAV")
        {
            if (e.Text == "" || e.Text.Length < 2)
            {
                return;
            }
        }

        RadComboBox ddl = sender as RadComboBox;

        int GenericId = 0;

        if (common.myStr(ddlGeneric.Text).Length > 0)
        {
            string selectedValue = common.myStr(e.Context["GenericId"]);
            if (common.myInt(selectedValue) > 0)
            {
                GenericId = common.myInt(selectedValue);
            }
        }

        //if (common.myInt(hdnStoreId.Value) == 0)
        //{
        //    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
        //    lblMessage.Text = "Store not selected !";

        //    return;
        //}

        DataTable data = new DataTable();
        switch (common.myStr(rdoDrugType.SelectedValue))
        {
            case "ALL":
                data = GetBrandData(e.Text, GenericId);
                break;
            case "FAV":
                data = GetBrandFavouriteData(e.Text, GenericId);
                break;
        }

        int itemOffset = e.NumberOfItems;
        int endOffset = Math.Min(itemOffset + ItemsPerRequest, data.Rows.Count);
        e.EndOfItems = endOffset == data.Rows.Count;

        for (int i = itemOffset; i < endOffset; i++)
        {
            RadComboBoxItem item = new RadComboBoxItem();
            item.Text = (string)data.Rows[i]["ItemName"];
            item.Value = common.myStr(data.Rows[i]["ItemId"]);

            item.Attributes.Add("ClosingBalance", common.myStr(data.Rows[i]["ClosingBalance"]));
            item.Attributes.Add("CIMSItemId", common.myStr(data.Rows[i]["CIMSItemId"]));
            item.Attributes.Add("CIMSType", common.myStr(data.Rows[i]["CIMSType"]));
            item.Attributes.Add("VIDALItemId", common.myStr(data.Rows[i]["VIDALItemId"]));
            //if (common.myStr(data.Rows[i]["DDCcode"]).ToString().Trim() == "")
            //{
            //    item.ForeColor = System.Drawing.Color.Red;
            //    item.Value = item.Value.ToString() + "*";
            //}
            //else
            //{
            //    item.ForeColor = System.Drawing.Color.Green;
            //}
            //item.Attributes.Add("DDCcode", common.myStr(data.Rows[i]["DDCcode"]));
            this.ddlBrand.Items.Add(item);
            item.DataBind();
        }
        e.Message = GetStatusMessage(endOffset, data.Rows.Count);
    }

    private DataTable GetBrandData(string text, int GenericId)
    {
        DataSet dsSearch = new DataSet();
        DataTable dt = new DataTable();

        objPharmacy = new BaseC.clsPharmacy(sConString);

        int StoreId = 0; //common.myInt(hdnStoreId.Value); //common.myInt(Session["StoreId"]);
        int ItemId = 0;

        int itemBrandId = 0;
        int WithStockOnly = 0;

        if (common.myDbl(ViewState["QtyBal"]) > 0
               && common.myInt(Request.QueryString["ItemId"]) > 0)
        {
            ItemId = common.myInt(ViewState["ItemId"]);
        }

        dsSearch = objPharmacy.getItemsWithStock(common.myInt(Session["HospitalLocationID"]), StoreId, ItemId, itemBrandId, GenericId,
                                        common.myInt(Session["UserId"]), common.myInt(Session["FacilityId"]), 0,
                                        text.Replace("'", "''"), WithStockOnly, getFormularyType());

        if (dsSearch.Tables.Count > 0)
        {
            if (dsSearch.Tables[0].Rows.Count > 0)
            {
                dt = dsSearch.Tables[0];
            }
        }
        return dt;
    }

    private DataTable GetBrandFavouriteData(string text, int GenericId)
    {
        DataSet dsSearch = new DataSet();
        DataTable dt = new DataTable();

        objEMR = new BaseC.clsEMR(sConString);
        dsSearch = objEMR.getFavoriteDrugWithStock(common.myInt(Session["HospitalLocationID"]),
                            common.myInt(Session["FacilityId"]), common.myInt(Session["UserId"]), 0,
                            GenericId, common.myInt(Session["DoctorId"]), getFormularyType(), text.Replace("'", "''"));

        if (dsSearch.Tables.Count > 0)
        {
            if (dsSearch.Tables[0].Rows.Count > 0)
            {
                dt = dsSearch.Tables[0];
            }
        }
        return dt;
    }

    private string getFormularyType()
    {
        string FormularyType = "H";
        switch (common.myInt(rdoFormularyType.SelectedValue))
        {
            case 0:
                FormularyType = "H";
                break;
            case 1:
                FormularyType = "N";
                break;
        }

        return FormularyType;
    }

    protected void btnWarnings_Click(object sender, EventArgs e)
    {
        try
        {
            //lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            //if (common.myInt(hdnItemId.Value) == 0)
            //{
            //    lblMessage.Text = "Please select a drug to view warnings and side effects ! ";
            //    return;
            //}

            //RadWindow1.NavigateUrl = "/EMR/Medication/Warnings.aspx?DrugId=" + common.myInt(hdnItemId.Value);
            //RadWindow1.Height = 500;
            //RadWindow1.Width = 600;
            //RadWindow1.Top = 40;
            //RadWindow1.Left = 100;
            ////RadWindow1.OnClientClose = "OnClientClose";
            //RadWindow1.Modal = true;
            //RadWindow1.Behaviors = WindowBehaviors.Maximize | WindowBehaviors.Minimize | WindowBehaviors.Close | WindowBehaviors.Move | WindowBehaviors.Pin;
            //RadWindow1.VisibleOnPageLoad = true;
            //RadWindow1.VisibleStatusbar = false;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }

    protected void btnMonograph_OnClick(object sender, EventArgs e)
    {
        try
        {
            //lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            //if (common.myInt(hdnItemId.Value) == 0)
            //{
            //    lblMessage.Text = "Please select a drug to view monographs and image ! ";
            //    return;
            //}

            //objEMR = new BaseC.clsEMR(sConString);
            //string strMsg = objEMR.SaveMonographMUD(common.myInt(Session["HospitalLocationID"]), common.myInt(Session["EncounterId"]),
            //                                common.myInt(Session["UserId"]), common.myInt(Session["RegistrationId"]), common.myInt(Session["UserId"]));

            //lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            //if ((strMsg.ToLower().Contains(" update") || strMsg.ToLower().Contains(" save")))
            //{
            //    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
            //}
            //lblMessage.Text = strMsg;

            ////Alert.ShowAjaxMsg(strMsg, this);

            //RadWindow1.NavigateUrl = "/EMR/Medication/Monograph.aspx?GenProduct_Id=" + common.myInt(hdnGenericId.Value) + "&Drug_Id=" + common.myInt(hdnItemId.Value) + "&DisplayName=" + common.myStr(ddlBrand.Text);
            //RadWindow1.Height = 500;
            //RadWindow1.Width = 600;
            //RadWindow1.Top = 40;
            //RadWindow1.Left = 100;
            ////RadWindow1.OnClientClose = "BindDrugsBySubstitute";
            //RadWindow1.Modal = true;
            //RadWindow1.VisibleOnPageLoad = true; // Set this property to True for showing window from code    
            //RadWindow1.VisibleStatusbar = false;
            //RadWindow1.Behaviors = WindowBehaviors.Maximize | WindowBehaviors.Minimize | WindowBehaviors.Close | WindowBehaviors.Move | WindowBehaviors.Pin;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;

            objException.HandleException(Ex);
        }

    }

    protected void PrescriptionRemarks_Click(object sender, EventArgs e)
    {
        spnPrescriptionRemarks.Visible = false;
        if (common.myStr(txtPrescriptionRemarks.Text).Trim().Length > 0)
        {
            spnPrescriptionRemarks.Visible = true;
        }

        divPrescriptionRemarks.Visible = false;
    }

    protected void PrescriptionRemarksClose_Click(object sender, EventArgs e)
    {
        spnPrescriptionRemarks.Visible = false;
        if (common.myStr(txtPrescriptionRemarks.Text).Trim().Length > 0)
        {
            spnPrescriptionRemarks.Visible = true;
        }

        divPrescriptionRemarks.Visible = false;
    }

    protected void ddlPrescription_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            lblMessage.Text = "";
            if (common.myInt(ddlPrescription.SelectedValue) > 0)
            {
                btnCancel.Visible = true;
                btnPrint.Visible = true;
                btnCopyLastPrescription.Enabled = false;
            }
            else
            {
                btnCancel.Visible = false;
                btnPrint.Visible = false;
                btnCopyLastPrescription.Enabled = true;
            }

            spnPrescriptionRemarks.Visible = false;

            hdnGenericId.Value = "0";
            hdnGenericName.Value = "";
            hdnItemId.Value = "0";
            hdnItemName.Value = "";

            ddlGeneric.Text = "";
            ddlBrand.Text = "";
            txtCustomMedication.Text = "";

            hdnCIMSItemId.Value = "";
            hdnCIMSType.Value = "";
            hdnVIDALItemId.Value = "";

            ddlIndentType.SelectedValue = "0";
            //if (common.myStr(ViewState["PatientOPIPType"]) == "O")
            //{
            //    ddlAdvisingDoctor.SelectedIndex = ddlAdvisingDoctor.Items.IndexOf(ddlAdvisingDoctor.Items.FindItemByValue(common.myStr(Session["EmployeeId"])));
            //}
            //else
            //{
            //    ddlAdvisingDoctor.SelectedIndex = 0;
            //}

            chkNoMedicine.Checked = false;

            clearItemDetails();

            DataSet ds = new DataSet();
            objEMR = new BaseC.clsEMR(sConString);
            ds = objEMR.getMedicinesOPList(common.myInt(Session["HospitalLocationID"]), common.myInt(Session["FacilityId"]),
                                        common.myInt(Session["EncounterId"]), common.myInt(ddlPrescription.SelectedValue));

            if (ds.Tables[0].Rows.Count > 0)
            {
                DataRow DR = ds.Tables[0].Rows[0];

                ddlIndentType.SelectedIndex = ddlIndentType.Items.IndexOf(ddlIndentType.Items.FindItemByValue(common.myStr(DR["IndentType"])));
                ddlAdvisingDoctor.SelectedIndex = ddlAdvisingDoctor.Items.IndexOf(ddlAdvisingDoctor.Items.FindItemByValue(common.myStr(DR["AdvisingDoctorId"])));

                txtPrescriptionRemarks.Text = common.myStr(DR["Remarks"]);
                if (common.myStr(DR["Remarks"]).Trim().Length > 0)
                {
                    spnPrescriptionRemarks.Visible = true;
                }

                chkNoMedicine.Checked = common.myBool(DR["IsNoCurrentMedications"]);
            }

            bindGridData(common.myInt(ddlPrescription.SelectedValue));
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }

    protected void ddlStore_SelectedIndexChanged(object sender, EventArgs e)
    {
        hdnStoreId.Value = common.myInt(ddlStore.SelectedValue).ToString();
    }

    protected void chkCustomMedication_OnCheckedChanged(object sender, EventArgs e)
    {
        if (chkCustomMedication.Checked)
        {
            hdnGenericId.Value = "0";
            ddlGeneric.Text = "";
            hdnItemId.Value = "0";
            ddlBrand.Text = "";
            ddlBrand.SelectedValue = "*";
            hdnCIMSItemId.Value = "";
            hdnCIMSType.Value = "";
            hdnVIDALItemId.Value = "";
        }
        else
        {
            txtCustomMedication.Text = "";
        }

        chkCustomMedicationChanged();
    }

    private void chkCustomMedicationChanged()
    {
        trGeneric.Visible = !chkCustomMedication.Checked;
        trDrugs.Visible = !chkCustomMedication.Checked;
        trCustomMedication.Visible = chkCustomMedication.Checked;
    }

    protected void imgBtnPrescriptionRemarks_Click(object sender, EventArgs e)
    {
        try
        {
            RadWindow1.NavigateUrl = "~/EMR/Medication/PrescriptionRemarks.aspx";
            RadWindow1.Height = 490;
            RadWindow1.Width = 560;
            RadWindow1.Top = 10;
            RadWindow1.Left = 10;
            RadWindow1.OnClientClose = "OnClientClosePrescription";
            RadWindow1.VisibleOnPageLoad = true; // Set this property to True for showing window from code 
            RadWindow1.Modal = true;
            RadWindow1.VisibleStatusbar = false;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;

            objException.HandleException(Ex);
        }
    }

    protected void btnPrescriptionRemarksMaster_Click(object sender, EventArgs e)
    {
        bindDrugsRemarks();
    }

    protected void btnCopyLastPrescription_Click(object sender, EventArgs e)
    {
        try
        {
            DataSet ds = new DataSet();
            objEMR = new BaseC.clsEMR(sConString);

            //if (common.myStr(ViewState["PatientOPIPType"]) == "I")
            //{
            //    ds = objEMR.getCopyPreviousMedicinesIP(common.myInt(Session["HospitalLocationID"]),
            //                        common.myInt(Session["FacilityId"]), common.myInt(Session["RegistrationId"]),
            //                        common.myInt(Session["EncounterId"]), common.myInt(Session["UserId"]));
            //}
            //else
            //{
            ds = objEMR.getCopyPreviousMedicinesOP(common.myInt(Session["HospitalLocationID"]),
                                common.myInt(Session["FacilityId"]), common.myInt(Session["RegistrationId"]),
                                common.myInt(Session["EncounterId"]), common.myInt(Session["UserId"]));
            //}

            if (ds.Tables[0].Rows.Count == 0)
            {
                ds.AcceptChanges();

                DataRow DR = ds.Tables[0].NewRow();
                ds.Tables[0].Rows.Add(DR);
            }

            ViewState["GridData"] = ds.Tables[0];
            hdnIsUnSavedData.Value = "1";
            gvStore.DataSource = ds.Tables[0];
            gvStore.DataBind();

            setVisiblilityInteraction();
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }

    protected void btnCancel_Onclick(object sender, EventArgs e)
    {
        lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
        lblMessage.Text = "";

        if (common.myInt(ddlPrescription.SelectedValue) == 0)
        {
            lblMessage.Text = "Prescription No not selected !";
            return;
        }

        dvConfirmCancel.Visible = true;
    }

    protected void btnYesCancel_OnClick(object sender, EventArgs e)
    {
        try
        {
            objEMR = new BaseC.clsEMR(sConString);
            objEMR.cancelPrescription(common.myInt(ddlPrescription.SelectedValue));

            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
            lblMessage.Text = "Prescription canceled successfully !";

            btnCancel.Visible = false;
            bindPrescriptionNo();

            bindGridData(0);

            dvConfirmCancel.Visible = false;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }

    protected void btnNoCancel_OnClick(object sender, EventArgs e)
    {
        dvConfirmCancel.Visible = false;
    }

    protected void lnkAllergyDetails_OnClick(object sender, EventArgs e)
    {
        RadWindow1.NavigateUrl = "~/EMR/Allergy/PatientAllergy.aspx";
        RadWindow1.Height = 200;
        RadWindow1.Width = 520;
        RadWindow1.Top = 40;
        RadWindow1.Left = 100;
        RadWindow1.Title = "Patient Allergy";
        //RadWindow1.OnClientClose = "OnClientClose";
        RadWindow1.Modal = true;
        RadWindow1.VisibleOnPageLoad = true; // Set this property to True for showing window from code    
        RadWindow1.VisibleStatusbar = false;
    }

    private bool isSavedItem()
    {
        bool isSave = true;
        string strmsg = "";

        //Added by rakesh start

        if (chkSOS.Checked && txtPRN.Text.Trim().Equals(string.Empty))
        {
            strmsg += "Enter the PRN Details";
            txtPRN.Focus();
            isSave = false;
        }
        //if (ddlFrequency.SelectedValue == "78" && ddlTime.SelectedValue == "")
        //{
        //    strmsg += "Select the Once a day time.";
        //    ddlTime.Focus();
        //    isSave = false;
        //}

        //Added by rakesh end

        if (common.myInt(hdnGenericId.Value) == 0 && common.myInt(hdnItemId.Value) == 0
            && common.myStr(txtCustomMedication.Text).Trim().Length == 0)
        {
            strmsg += "[Generic or Drug] or [Custom Medication] not selected !";
            isSave = false;
        }

        if ((common.myInt(hdnGenericId.Value) > 0 || common.myInt(hdnItemId.Value) > 0)
            && common.myStr(txtCustomMedication.Text).Trim().Length > 0)
        {
            strmsg += "[Generic or Drug] and [Custom Medication] both entry not allowed !";
            isSave = false;
        }

        if (common.myInt(ddlFrequency.SelectedValue) == 0)
        {
            strmsg += "  Please Select Frequency !  ! !";
            isSave = false;
        }

        //if (common.myInt(txtDays.Text) == 0)
        //{
        //    strmsg += "Please Enter Duration !";
        //    isSave = false;
        //}
        //if (common.myStr(txtICDCode.Text) == "")
        //{

        //    strmsg += "Please Select Diagnosis ! !";
        //    isSave = false;
        //}
        if (ddlPeriodType.SelectedValue == "O")
        {
            if (common.myDbl(txtTotQty.Text) == 0)
            {
                strmsg += "Total quantity can not be zero or blank !";
                isSave = false;
            }
        }

       
        if (txtDose.Text == "")
        {
            strmsg += "Please Enter Dose !";
            isSave = false;
        }
        //if (ddlBrand.SelectedValue.ToString().Contains("*"))
        //{
        //    strmsg += "This Medicine Is not an Approved From DHA...Please Select Another One";
        //    Alert.ShowAjaxMsg(strmsg, this);
        //    ddlBrand.Focus();
        //    isSave = false;
        ////}
        //BaseC.clsPharmacy phr = new BaseC.clsPharmacy(sConString);
        //if (phr.CheckDiagnosisPrimaryForPatient(common.myInt(Session["RegistrationID"])) == false)
        //{
        //    strmsg += "Atleast One Primery Diagnosis Is Required. Please Enter Diagnosis then Continue..";
        //    Alert.ShowAjaxMsg(strmsg, this);

        //    isSave = false;
        //}
        lblMessage.Text = strmsg;

        return isSave;
    }

    protected void btnAddItem_OnClick(object sender, EventArgs e)
    {
        try
        {




            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);

            if (common.myInt(ddlOrderSet.SelectedValue) > 0)
            {
                AddOrderSet();
            }
            else
            {
                if (!isSavedItem())
                {
                    return;
                }

                bool IsAllergy = false;

                string customMedication = common.myStr(txtCustomMedication.Text).Trim();

                if (customMedication.Length == 0)
                {
                    if (ViewState["DrugAllergy"] != null)
                    {
                        DataTable tblDrugAllergy = (DataTable)ViewState["DrugAllergy"];
                        DataView dvDrugAllergy = tblDrugAllergy.Copy().DefaultView;

                        if (common.myInt(hdnItemId.Value) > 0)
                        {
                            dvDrugAllergy.RowFilter = "AllergyID=" + common.myInt(hdnItemId.Value);
                        }
                        else
                        {
                            dvDrugAllergy.RowFilter = "Generic_Id=" + common.myInt(hdnGenericId.Value);
                        }

                        if (dvDrugAllergy.ToTable().Rows.Count > 0)
                        {
                            IsAllergy = true;
                        }
                    }
                }

                if (IsAllergy)
                {
                    lblMessage.Text = "Patient is allergy to this drug !";

                    RadWindow1.NavigateUrl = "/EMR/Medication/MedicationOverride.aspx?" +
                                            "D=" + common.myStr(ddlBrand.Text).Trim() +
                                            "&IsO=" + common.myInt(hdnIsOverride.Value) +
                                            "&OC=" + common.myStr(hdnOverrideComments.Value) +
                                            "&DASR=" + common.myStr(hdnDrugAllergyScreeningResult.Value);
                    RadWindow1.Height = 280;
                    RadWindow1.Width = 620;
                    RadWindow1.Top = 10;
                    RadWindow1.Left = 10;
                    RadWindow1.OnClientClose = "OnClientMedicationOverrideClose";
                    RadWindow1.VisibleOnPageLoad = true;
                    RadWindow1.Modal = true;
                    RadWindow1.VisibleStatusbar = false;

                    return;
                }
                else
                {
                    addToList();
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }

    protected void addToList()
    {
        try
        {
            if (common.myStr(Request.QueryString["Dispense"]) == "Dispense")
            {
                spnremarks.Visible = true;

                if (common.myStr(txtSpecialInstrucation.Text.Trim()) == "")
                {
                    lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
                    lblMessage.Text = "Please Enter Remarks !";
                    txtSpecialInstrucation.Focus();
                    return;
                }
            }
            spnremarks.Visible = false;


            ViewState["NewPrescribing"] = "";
            bool IsInteraction = false;

            if (common.myBool(ViewState["IsCIMSInterfaceActive"]))
            {
                DataTable tblItem = new DataTable();
                tblItem = (DataTable)ViewState["GridData"];

                DataView dvRemoveBlank = tblItem.Copy().DefaultView;
                dvRemoveBlank.RowFilter = "ISNULL(GenericId,0)>0 OR ISNULL(ItemId,0)>0 OR ISNULL(CustomMedication,'')<>''";
                tblItem = dvRemoveBlank.ToTable();

                DataView DVItem = tblItem.Copy().DefaultView;

                if (common.myStr(txtCustomMedication.Text).Trim().Length == 0)
                {
                    if (common.myInt(hdnItemId.Value) > 0)
                    {
                        DVItem.RowFilter = "ItemId=" + common.myInt(hdnItemId.Value);
                    }
                }

                if (DVItem.ToTable().Rows.Count == 0)
                {
                    string strPrescribing = "<Prescribing><" + common.myStr(hdnCIMSType.Value) + " reference=\"" + common.myStr(hdnCIMSItemId.Value) + "\" /></Prescribing>";

                    string strXML = getInterationXML(strPrescribing);

                    if (strXML == "")
                    {
                        return;
                    }

                    string outputValues = objCIMS.getFastTrack5Output(strXML);

                    if (outputValues.ToUpper().Contains("<SEVERITY NAME"))
                    {
                        string strFindCIMSItemId = "<PRODUCT REFERENCE=\"" + common.myStr(hdnCIMSItemId.Value).Trim() + "\" NAME=\"\"></PRODUCT>";

                        if (!outputValues.ToUpper().Contains(strFindCIMSItemId.ToUpper()))
                        {
                            IsInteraction = true;

                            ViewState["NewPrescribing"] = strXML;

                            dvInteraction.Visible = true;
                        }
                    }
                }
            }

            else if (common.myBool(ViewState["IsVIDALInterfaceActive"]))
            {
                addToListFinal();

                return;
            }

            if (!IsInteraction)
            {
                addToListFinal();
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }

    }
    protected void addToListFinal()
    {
        try
        {
            DataTable tblItem = new DataTable();
            tblItem = (DataTable)ViewState["GridData"];

            DataView dvRemoveBlank = tblItem.Copy().DefaultView;
            dvRemoveBlank.RowFilter = "ISNULL(GenericId,0)>0 OR ISNULL(ItemId,0)>0 OR ISNULL(CustomMedication,'')<>''";
            tblItem = dvRemoveBlank.ToTable();

            DataView DVItem = tblItem.Copy().DefaultView;

            string customMedication = common.myStr(txtCustomMedication.Text).Trim();

            if (customMedication.Length > 0)
            {
                DVItem.RowFilter = "CustomMedication='" + customMedication + "'";
                hdnIsUnSavedData.Value = "1";
            }
            else
            {
                if (common.myInt(hdnItemId.Value) > 0)
                {
                    DVItem.RowFilter = "ItemId=" + common.myInt(hdnItemId.Value);
                }
                else
                {
                    DVItem.RowFilter = "GenericId=" + common.myInt(hdnGenericId.Value);
                }
            }

            string genericName = common.myStr(hdnGenericName.Value);
            string itemName = common.myStr(hdnItemName.Value);

            //string days = txtDays.Text;

            bool IsAdded = false;
            int days = ddlPeriodType.SelectedValue == "O" ? Convert.ToInt16(txtDays.Text) : Convert.ToInt16(rdoDurationList.SelectedValue);
            if (ddlPeriodType.SelectedValue != "O")
            {
                switch (common.myStr(ddlPeriodType.SelectedValue))
                {
                    case "D":
                        days = days * 1;
                        break;
                    case "W":
                        days = days * 7;
                        break;
                    case "M":
                        days = days * 30;
                        break;
                    case "Y":
                        days = days * 365;
                        break;
                    default:
                        days = days * 1;
                        break;
                }
            }
            else
            {
                switch (common.myStr(ddlPeriodType1.SelectedValue))
                {
                    case "D":
                        days = days * 1;
                        break;
                    case "W":
                        days = days * 7;
                        break;
                    case "M":
                        days = days * 30;
                        break;
                    case "Y":
                        days = days * 365;
                        break;
                    default:
                        days = days * 1;
                        break;
                }
            }

            if (DVItem.ToTable().Rows.Count > 0)
            {
                int rowIdx = 0;
                foreach (DataRow DRItem in tblItem.Rows)
                {
                    if (common.myInt(DRItem["ItemId"]) == common.myInt(hdnItemId.Value)
                        && common.myStr(DRItem["CustomMedication"]) == customMedication)
                    {
                        tblItem.Rows[rowIdx]["GenericId"] = common.myInt(hdnGenericId.Value);
                        tblItem.Rows[rowIdx]["GenericName"] = genericName;
                        tblItem.Rows[rowIdx]["ItemId"] = common.myInt(hdnItemId.Value);
                        tblItem.Rows[rowIdx]["ItemName"] = itemName;
                        tblItem.Rows[rowIdx]["FormulationId"] = common.myInt(ddlFormulation.SelectedValue);
                        tblItem.Rows[rowIdx]["RouteId"] = common.myInt(ddlRoute.SelectedValue);
                        tblItem.Rows[rowIdx]["StrengthId"] = common.myInt(ddlStrength.SelectedValue);
                        tblItem.Rows[rowIdx]["Dose"] = common.myStr(txtDose.Text);
                        tblItem.Rows[rowIdx]["FrequencyId"] = common.myInt(ddlFrequency.SelectedValue);
                        tblItem.Rows[rowIdx]["Frequency"] = (common.myInt(ddlFrequency.SelectedValue) == 0) ? 0 : common.myDbl(ddlFrequency.SelectedItem.Attributes["Frequency"]);
                        tblItem.Rows[rowIdx]["FrequencyName"] = common.myStr(ddlFrequency.SelectedItem.Text);
                        tblItem.Rows[rowIdx]["Days"] = days;
                        //tblItem.Rows[rowIdx]["DurationType"] = ddlPeriodType.SelectedValue == "O" ? ddlPeriodType.SelectedValue : ddlPeriodType.SelectedValue;
                        tblItem.Rows[rowIdx]["DurationType"] = ddlPeriodType.SelectedValue;

                        tblItem.Rows[rowIdx]["SubDurationType"] = ddlPeriodType.SelectedValue == "O" ? ddlPeriodType1.SelectedValue : null;


                        tblItem.Rows[rowIdx]["StartDate"] = common.myDate(txtStartDate.SelectedDate).ToString("dd/MM/yyyy");
                        tblItem.Rows[rowIdx]["EndDate"] = common.myDate(txtEndDate.SelectedDate).ToString("dd/MM/yyyy");

                        tblItem.Rows[rowIdx]["Qty"] = common.myDbl(txtTotQty.Text).ToString("F2");
                        tblItem.Rows[rowIdx]["UnitName"] = common.myStr(ViewState["UnitName"]);
                        tblItem.Rows[rowIdx]["Remarks"] = common.myStr(txtSpecialInstrucation.Text).Trim();

                        tblItem.Rows[rowIdx]["CustomMedication"] = customMedication;
                        tblItem.Rows[rowIdx]["ICDCode"] = common.myStr(txtICDCode.Text);
                        tblItem.Rows[rowIdx]["SOS"] = common.myBool(chkSOS.Checked) ? 1 : 0;
                        tblItem.Rows[rowIdx]["Refill"] = common.myBool(chkSOS.Checked) ? 0 : common.myInt(ddlRefill.SelectedValue);

                        tblItem.Rows[rowIdx]["IsOverride"] = common.myInt(hdnIsOverride.Value);
                        tblItem.Rows[rowIdx]["OverrideComments"] = common.myStr(hdnOverrideComments.Value);
                        tblItem.Rows[rowIdx]["DrugAllergyScreeningResult"] = common.myStr(hdnDrugAllergyScreeningResult.Value);
                        tblItem.Rows[rowIdx]["PrescriptionModeId"] = common.myInt(ddlPrescriptionMode.SelectedValue);

                        tblItem.Rows[rowIdx]["CIMSItemId"] = common.myStr(hdnCIMSItemId.Value);
                        tblItem.Rows[rowIdx]["CIMSType"] = common.myStr(hdnCIMSType.Value);
                        tblItem.Rows[rowIdx]["VIDALItemId"] = common.myInt(hdnVIDALItemId.Value);

                        //Added by rakesh start

                        tblItem.Rows[rowIdx]["DoseTime"] = common.myInt(ddlTime.SelectedValue);
                        tblItem.Rows[rowIdx]["DoseUnitID"] = common.myInt(ddlUnit.SelectedValue);
                        tblItem.Rows[rowIdx]["FoodID"] = common.myInt(ddlFood.SelectedValue);
                        tblItem.Rows[rowIdx]["PRNRemarks"] = txtPRN.Text.Trim();

                        //Addeed by rakesh end

                        tblItem.AcceptChanges();

                        IsAdded = true;

                        break;
                    }
                    rowIdx++;
                }
            }
            else
            {
                DataRow DR = tblItem.NewRow();

                DR["GenericId"] = common.myInt(hdnGenericId.Value);
                DR["GenericName"] = genericName;
                DR["ItemId"] = common.myInt(hdnItemId.Value);
                DR["ItemName"] = itemName;
                DR["FormulationId"] = common.myInt(ddlFormulation.SelectedValue);
                DR["RouteId"] = common.myInt(ddlRoute.SelectedValue);
                DR["StrengthId"] = common.myInt(ddlStrength.SelectedValue);
                DR["Dose"] = common.myStr(txtDose.Text);
                DR["FrequencyId"] = common.myInt(ddlFrequency.SelectedValue);
                DR["Frequency"] = (common.myInt(ddlFrequency.SelectedValue) == 0) ? 0 : common.myDbl(ddlFrequency.SelectedItem.Attributes["Frequency"]);
                DR["FrequencyName"] = common.myStr(ddlFrequency.SelectedItem.Text);
                DR["Days"] = days;
                //DR["DurationType"] = ddlPeriodType.SelectedValue == "O" ? ddlPeriodType1.SelectedValue : ddlPeriodType.SelectedValue;

                DR["DurationType"] =  ddlPeriodType.SelectedValue;


                DR["SubDurationType"] = ddlPeriodType.SelectedValue == "O" ? ddlPeriodType1.SelectedValue : null;


                DR["StartDate"] = common.myDate(txtStartDate.SelectedDate).ToString("dd/MM/yyyy");
                DR["EndDate"] = common.myDate(txtEndDate.SelectedDate).ToString("dd/MM/yyyy");

                DR["Qty"] = common.myDbl(txtTotQty.Text).ToString("F2");
                DR["UnitName"] = common.myStr(ViewState["UnitName"]);
                DR["Remarks"] = common.myStr(txtSpecialInstrucation.Text).Trim();

                DR["CustomMedication"] = customMedication;
                DR["ICDCode"] = common.myStr(txtICDCode.Text);
                DR["SOS"] = common.myBool(chkSOS.Checked) ? 1 : 0;
                DR["Refill"] = common.myBool(chkSOS.Checked) ? 0 : common.myInt(ddlRefill.SelectedValue);

                DR["IsOverride"] = common.myInt(hdnIsOverride.Value);
                DR["OverrideComments"] = common.myStr(hdnOverrideComments.Value);
                DR["DrugAllergyScreeningResult"] = common.myStr(hdnDrugAllergyScreeningResult.Value);
                DR["PrescriptionModeId"] = common.myInt(ddlPrescriptionMode.SelectedValue);

                DR["CIMSItemId"] = common.myStr(hdnCIMSItemId.Value);
                DR["CIMSType"] = common.myStr(hdnCIMSType.Value);
                DR["VIDALItemId"] = common.myInt(hdnVIDALItemId.Value);

                //Added by rakesh start

                DR["DoseTime"] = common.myInt(ddlTime.SelectedValue);
                DR["DoseUnitID"] = common.myInt(ddlUnit.SelectedValue);
                DR["FoodID"] = common.myInt(ddlFood.SelectedValue);
                DR["PRNRemarks"] = txtPRN.Text.Trim();


                //tblItem.Rows[rowIdx]["DoseTime"] = common.myInt(ddlTime.SelectedValue);
                //tblItem.Rows[rowIdx]["DoseUnitID"] = common.myInt(ddlUnit.SelectedValue);
                //tblItem.Rows[rowIdx]["FoodID"] = common.myInt(ddlFood.SelectedValue);
                //tblItem.Rows[rowIdx]["PRNRemarks"] = common.myInt(txtPRN.Text);
                //Addeed by rakesh end

                tblItem.Rows.Add(DR);
                tblItem.AcceptChanges();

                IsAdded = true;
            }

            //DataView DV = tblItem.Copy().DefaultView;
            //DV.RowFilter = "ISNULL(ItemId,0)<>0";

            ddlGeneric.Text = "";
            ddlBrand.Text = "";

            hdnGenericId.Value = "0";
            hdnItemId.Value = "0";

            hdnCIMSItemId.Value = "";
            hdnCIMSType.Value = "";
            hdnVIDALItemId.Value = "";

            hdnGenericName.Value = "";
            hdnItemName.Value = "";

            txtCustomMedication.Text = "";

            clearItemDetails();

            ViewState["GridData"] = tblItem.Copy();

            gvStore.DataSource = tblItem.Copy();
            gvStore.DataBind();

            setVisiblilityInteraction();

            ddlFormulation.Enabled = true;
            ddlRoute.Enabled = true;
            ddlStrength.Enabled = true;

            ddlBrand.Focus();

            if (IsAdded)
            {
                btnCopyLastPrescription.Enabled = false;

                //lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                //lblMessage.Text = "Drug added in list !";
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }

    protected void btnMedicationOverride_OnClick(object sender, EventArgs e)
    {
        try
        {
            if (common.myInt(hdnIsOverride.Value) > 0)
            {
                addToList();
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }

    protected void btnPreviewPreviousMedications_Click(Object sender, EventArgs e)
    {
        RadWindow1.NavigateUrl = "/EMR/Medication/OPPrescriptionMain.aspx?OPIP=" + common.myStr(ViewState["PatientOPIPType"]);
        RadWindow1.Height = 650;
        RadWindow1.Width = 1000;
        RadWindow1.Top = 10;
        RadWindow1.Left = 10;
        RadWindow1.OnClientClose = "SearchPatientOnClientClose";
        RadWindow1.VisibleOnPageLoad = true; // Set this property to True for showing window from code 
        RadWindow1.Modal = true;
        RadWindow1.VisibleStatusbar = false;
    }
    private void getCurrentICDCodes()
    {
        try
        {
            DataSet ds = new DataSet();

            BaseC.EMROrders order = new BaseC.EMROrders(sConString);
            ds = order.GetPatientDiagnosis(Convert.ToInt32(Session["RegistrationID"]), Convert.ToInt16(Session["HospitalLocationID"]),
               Convert.ToInt32(Session["EncounterId"]));
            String sICDCodes = "";
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (sICDCodes == "")
                    {
                        sICDCodes += ds.Tables[0].Rows[i]["ICDCode"].ToString();
                    }
                    else
                    {
                        sICDCodes += "," + ds.Tables[0].Rows[i]["ICDCode"].ToString();
                    }
                }
            }

            if (ds.Tables[0].Rows.Count > 0)
            {
                ViewState["ICDCodes"] = sICDCodes;
            }
            else
            {
                ViewState["ICDCodes"] = null;
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }
    private void BindICDPanel()
    {
        try
        {
            DataSet dsTemp = new DataSet();
            if (ViewState["ICDCodes"] != null)
            {

                DataTable dt = new DataTable();
                dt.Columns.Add("ID");
                dt.Columns.Add("ICDCodes");
                dt.Columns.Add("Description");
                dt.Columns["ID"].AutoIncrement = true;
                dt.Columns["ID"].AutoIncrementSeed = 1;
                dt.Columns["ID"].AutoIncrementStep = 1;

                char[] chArray = { ',' };
                string[] serviceIdXml = ViewState["ICDCodes"].ToString().Split(chArray);
                DAL.DAL objSave = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
                foreach (string item in serviceIdXml)
                {
                    DataRow drdt = dt.NewRow();
                    BaseC.EMROrders order = new BaseC.EMROrders(sConString);
                    dsTemp = order.GetICDCode(item.ToString());
                    if (dsTemp.Tables.Count > 0)
                    {
                        if (dsTemp.Tables[0].Rows.Count > 0)
                        {
                            drdt["ICDCodes"] = item.ToString();
                            drdt["Description"] = dsTemp.Tables[0].Rows[0]["Description"].ToString();
                            dt.Rows.Add(drdt);
                        }
                    }
                }
                if (dt.Rows.Count > 0)
                {
                    txtICDCode.Text = dt.Rows[0]["ICDCodes"].ToString();
                    hdnICDCode.Value = dt.Rows[0]["ICDCodes"].ToString();
                }
            }
            else
            {
                txtICDCode.ReadOnly = true;
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
    }

    protected void btnprescripNo_OnClick(object sender, EventArgs e)
    {
        dvprescripConfirmDeletion.Visible = false;
    }
    protected void btnprescripYes_OnClick(object sender, EventArgs e)
    {
        objEMR = new BaseC.clsEMR(sConString);
        if (common.myInt(ViewState["DetailsId"]) != 0)
        {
            int i = objEMR.DeletePrescription(common.myInt(ViewState["DetailsId"]));
            if (i == 0)
            {
                lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
                lblMessage.Text = "Drug deleted from list !";
            }
            bindGridData(common.myInt(ddlPrescription.SelectedValue));
            dvprescripConfirmDeletion.Visible = false;

        }
        else
        {
            int ItemId = common.myInt(ViewState["ItemId"]);
            int GenericId = common.myInt(ViewState["GenericId"]);
            string customMedication = common.myStr(ViewState["customMedication"]);

            if (ViewState["GridData"] != null
                && (ItemId > 0 || GenericId > 0 || customMedication.Length > 0))
            {
                DataTable tbl = (DataTable)ViewState["GridData"];

                DataView DV = tbl.Copy().DefaultView;
                if (customMedication.Length > 0)
                {
                    DV.RowFilter = "CustomMedication<>'" + customMedication + "'";
                }
                else
                {
                    if (ItemId > 0)
                    {
                        DV.RowFilter = "ISNULL(ItemId,0)<>" + ItemId;
                    }
                    else
                    {
                        DV.RowFilter = "ISNULL(GenericId,0)<>" + GenericId;
                    }
                }

                tbl = DV.ToTable();

                ViewState["GridData"] = tbl;

                if (tbl.Rows.Count == 0)
                {
                    DataRow DR = tbl.NewRow();
                    tbl.Rows.Add(DR);
                    tbl.AcceptChanges();
                }

                gvStore.DataSource = tbl;
                gvStore.DataBind();

                setVisiblilityInteraction();

                dvprescripConfirmDeletion.Visible = false;
            }
        }
        dvprescripConfirmDeletion.Visible = false;
    }
    void BindAccounttypeid()
    {
        objEMR = new BaseC.clsEMR(sConString);
        DataSet ds = new DataSet();

        ds = objEMR.GetAccounttypeId(common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"]));
        if (ds.Tables[0].Rows.Count > 0)
        {
            ViewState["AccounttypeId"] = ds.Tables[0].Rows[0]["AccountTypeId"].ToString().Trim();
        }
    }
    protected void btnCaseSheet_Click(object sender, EventArgs e)
    {
        Response.Redirect("~/Editor/WordProcessor.aspx", false);
    }

    protected void AddOrderSet()
    {
        try
        {
            //if (common.myStr(txtICDCode.Text) == "")
            //{
            //    Alert.ShowAjaxMsg("Please Select ICDcode First!..", Page.Page);
            //    return;
            //}

            DataTable tblItem = new DataTable();
            tblItem = (DataTable)ViewState["GridData"];

            DataView dvRemoveBlank = tblItem.Copy().DefaultView;
            dvRemoveBlank.RowFilter = "ISNULL(GenericId,0)>0 OR ISNULL(ItemId,0)>0 OR ISNULL(CustomMedication,'')<>''";
            tblItem = dvRemoveBlank.ToTable();

            DataView DVItem = tblItem.Copy().DefaultView;
            string customMedication = common.myStr(txtCustomMedication.Text).Trim();

            if (customMedication.Length > 0)
            {
                DVItem.RowFilter = "CustomMedication='" + customMedication + "'";
            }
            else
            {
                if (common.myInt(hdnItemId.Value) > 0)
                {
                    DVItem.RowFilter = "ItemId=" + common.myInt(hdnItemId.Value);
                }
                else
                {
                    DVItem.RowFilter = "GenericId=" + common.myInt(hdnGenericId.Value);
                }
            }

            string genericName = common.myStr(hdnGenericName.Value);
            string itemName = common.myStr(hdnItemName.Value);

            string days = txtDays.Text;

            bool IsAdded = false;

            //switch (common.myStr(ddlPeriodType.SelectedValue))
            //{
            //    case "D":
            //        days = days * 1;
            //        break;
            //    case "W":
            //        days = days * 7;
            //        break;
            //    case "M":
            //        days = days * 30;
            //        break;
            //    case "Y":
            //        days = days * 365;
            //        break;
            //    default:
            //        days = days * 1;
            //        break;
            //}

            if (DVItem.ToTable().Rows.Count > 0)
            {
                int rowIdx = 0;
                foreach (DataRow DRItem in tblItem.Rows)
                {
                    if (common.myInt(DRItem["ItemId"]) == common.myInt(hdnItemId.Value)
                        && common.myStr(DRItem["CustomMedication"]) == customMedication)
                    {
                        tblItem.Rows[rowIdx]["GenericId"] = common.myInt(hdnGenericId.Value);
                        tblItem.Rows[rowIdx]["GenericName"] = genericName;
                        tblItem.Rows[rowIdx]["ItemId"] = common.myInt(hdnItemId.Value);
                        tblItem.Rows[rowIdx]["ItemName"] = itemName;
                        tblItem.Rows[rowIdx]["FormulationId"] = common.myInt(ddlFormulation.SelectedValue);
                        tblItem.Rows[rowIdx]["RouteId"] = common.myInt(ddlRoute.SelectedValue);
                        tblItem.Rows[rowIdx]["StrengthId"] = common.myInt(ddlStrength.SelectedValue);
                        tblItem.Rows[rowIdx]["Dose"] = common.myStr(txtDose.Text);
                        tblItem.Rows[rowIdx]["FrequencyId"] = common.myInt(ddlFrequency.SelectedValue);
                        tblItem.Rows[rowIdx]["Frequency"] = (common.myInt(ddlFrequency.SelectedValue) == 0) ? 0 : common.myDbl(ddlFrequency.SelectedItem.Attributes["Frequency"]);
                        tblItem.Rows[rowIdx]["FrequencyName"] = common.myStr(ddlFrequency.SelectedItem.Text);
                        tblItem.Rows[rowIdx]["Days"] = ddlPeriodType.SelectedValue == "O" ? days : rdoDurationList.SelectedValue;
                        tblItem.Rows[rowIdx]["DurationType"] =  rdoDurationList.SelectedValue;
                        tblItem.Rows[rowIdx]["StartDate"] = common.myDate(txtStartDate.SelectedDate).ToString("dd/MM/yyyy");
                        tblItem.Rows[rowIdx]["EndDate"] = common.myDate(txtEndDate.SelectedDate).ToString("dd/MM/yyyy");

                        tblItem.Rows[rowIdx]["Qty"] = common.myDbl(txtTotQty.Text).ToString("F2");
                        tblItem.Rows[rowIdx]["UnitName"] = common.myStr(ViewState["UnitName"]);
                        tblItem.Rows[rowIdx]["Remarks"] = common.myStr(txtSpecialInstrucation.Text).Trim();

                        tblItem.Rows[rowIdx]["CustomMedication"] = customMedication;
                        tblItem.Rows[rowIdx]["ICDCode"] = common.myStr(txtICDCode.Text);
                        tblItem.Rows[rowIdx]["SOS"] = common.myBool(chkSOS.Checked) ? 1 : 0;
                        tblItem.Rows[rowIdx]["Refill"] = common.myBool(chkSOS.Checked) ? 0 : common.myInt(ddlRefill.SelectedValue);

                        tblItem.Rows[rowIdx]["IsOverride"] = common.myInt(hdnIsOverride.Value);
                        tblItem.Rows[rowIdx]["OverrideComments"] = common.myStr(hdnOverrideComments.Value);
                        tblItem.Rows[rowIdx]["DrugAllergyScreeningResult"] = common.myStr(hdnDrugAllergyScreeningResult.Value);
                        tblItem.Rows[rowIdx]["PrescriptionModeId"] = common.myInt(ddlPrescriptionMode.SelectedValue);

                        tblItem.Rows[rowIdx]["CIMSItemId"] = common.myStr(hdnCIMSItemId.Value);
                        tblItem.Rows[rowIdx]["CIMSType"] = common.myStr(hdnCIMSType.Value);
                        tblItem.Rows[rowIdx]["VIDALItemId"] = common.myInt(hdnVIDALItemId.Value);

                        //Added by rakesh start

                        tblItem.Rows[rowIdx]["DoseTime"] = common.myInt(ddlTime.SelectedValue);
                        tblItem.Rows[rowIdx]["DoseUnitID"] = common.myInt(ddlUnit.SelectedValue);
                        tblItem.Rows[rowIdx]["FoodID"] = common.myInt(ddlFood.SelectedValue);
                        tblItem.Rows[rowIdx]["PRNRemarks"] = common.myInt(txtPRN.Text.Trim());

                        //Addeed by rakesh end
                        tblItem.AcceptChanges();

                        IsAdded = true;

                        break;
                    }
                    rowIdx++;
                }
            }
            else
            {
                string strIndentId = "";
                foreach (DataRow dr in DVItem.Table.Rows)
                {
                    if (strIndentId == "")
                        strIndentId = strIndentId + dr["ItemId"];
                    else
                        strIndentId = strIndentId + "," + dr["ItemId"];
                }

                BaseC.EMRMasters objMst = new BaseC.EMRMasters(sConString);
                DataSet dsDetail = objMst.GetEMRDrugSetDetail(common.myInt(Session["HospitalLocationId"]), common.myInt(ddlOrderSet.SelectedValue), 0);
                DataView dv = new DataView();
                dv.RowFilter = "";
                if (dsDetail.Tables.Count > 0)
                {
                    if (dsDetail.Tables[0].Rows.Count > 0)
                    {
                        dv = dsDetail.Tables[0].DefaultView;

                        if (strIndentId != "")
                        {
                            dv.RowFilter = "ItemId NOT IN(" + strIndentId + ")";
                        }
                    }
                }
                if (dv.Count > 0)
                {
                    DataTable dt = dv.ToTable();

                    foreach (DataRow drM in dt.Rows)
                    {
                        DataRow DR = tblItem.NewRow();

                        DR["GenericId"] = DBNull.Value;
                        DR["GenericName"] = "";
                        DR["ItemId"] = common.myInt(drM["itemid"]);
                        DR["ItemName"] = common.myStr(drM["itemName"]);
                        DR["FormulationId"] = DBNull.Value;
                        DR["RouteId"] = DBNull.Value;
                        DR["StrengthId"] = DBNull.Value;
                        DR["Dose"] = DBNull.Value;
                        DR["FrequencyId"] = common.myInt(drM["FrequencyId"]);
                        DR["Frequency"] = common.myStr(drM["Frequency"]);
                        DR["FrequencyName"] = common.myStr(drM["FrequencyName"]);
                        DR["Days"] = common.myInt(drM["TotalDays"]);
                        DR["DurationType"] = ddlPeriodType.SelectedValue == "O" ? days : rdoDurationList.SelectedValue;

                        DR["StartDate"] = common.myDate(txtStartDate.SelectedDate).ToString("dd/MM/yyyy");
                        DR["EndDate"] = common.myDate(txtEndDate.SelectedDate).ToString("dd/MM/yyyy");

                        DR["Qty"] = common.myDbl(drM["Qty"]).ToString("F2");
                        DR["UnitName"] = DBNull.Value;
                        DR["Remarks"] = DBNull.Value;

                        DR["CustomMedication"] = "";
                        DR["ICDCode"] = common.myStr(txtICDCode.Text);
                        DR["SOS"] = 0;
                        DR["Refill"] = 0;

                        DR["IsOverride"] = 0;
                        DR["OverrideComments"] = DBNull.Value;
                        DR["DrugAllergyScreeningResult"] = "";
                        DR["PrescriptionModeId"] = common.myInt(drM["PrescriptionModeID"]);

                        DR["CIMSItemId"] = common.myStr(hdnCIMSItemId.Value);
                        DR["CIMSType"] = common.myStr(hdnCIMSType.Value);
                        DR["VIDALItemId"] = common.myInt(hdnVIDALItemId.Value);

                        //Added by rakesh start

                        DR["DoseTime"] = DBNull.Value;
                        DR["DoseUnitID"] = DBNull.Value;
                        DR["FoodID"] = DBNull.Value;
                        DR["PRNRemarks"] = DBNull.Value;

                        //Addeed by rakesh end

                        tblItem.Rows.Add(DR);
                    }


                    tblItem.AcceptChanges();

                }
            }
            ddlGeneric.Text = "";
            ddlBrand.Text = "";
            lblMessage.Text = "";
            hdnGenericId.Value = "0";
            hdnItemId.Value = "0";

            hdnCIMSItemId.Value = "";
            hdnCIMSType.Value = "";
            hdnVIDALItemId.Value = "";

            hdnIsUnSavedData.Value = "1";

            hdnGenericName.Value = "";
            hdnItemName.Value = "";

            txtCustomMedication.Text = "";

            clearItemDetails();

            ViewState["GridData"] = tblItem.Copy();

            gvStore.DataSource = tblItem.Copy();
            gvStore.DataBind();

            setVisiblilityInteraction();

            ddlFormulation.Enabled = true;
            ddlRoute.Enabled = true;
            ddlStrength.Enabled = true;

            ddlBrand.Focus();

            btnCopyLastPrescription.Enabled = false;

            //lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cSucceedColor);
            //lblMessage.Text = "Drug added in list !";

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }

    }

    //private DataTable setCIMSItemId(DataTable dtMain)
    //{
    //    try
    //    {
    //        if (common.myStr(ViewState["IsCIMSInterfaceActive"]) != "Y")
    //        {
    //            return dtMain;
    //        }

    //        StringBuilder ItemIds = new StringBuilder();

    //        foreach (DataRow DR in dtMain.Rows)
    //        {
    //            if (common.myInt(DR["ItemId"]) > 0)
    //            {
    //                if (ItemIds.ToString() == "")
    //                {
    //                    ItemIds.Append(common.myInt(DR["ItemId"]));
    //                }
    //                else
    //                {
    //                    ItemIds.Append(", " + common.myInt(DR["ItemId"]));
    //                }
    //            }
    //        }

    //        if (ItemIds.ToString() != "")
    //        {
    //            objEMR = new BaseC.clsEMR(sConString);

    //            DataSet dsCIMSItem = objEMR.getCIMSItemId(ItemIds.ToString());

    //            foreach (DataRow DR in dsCIMSItem.Tables[0].Rows)
    //            {
    //                dtMain.DefaultView.RowFilter = "ItemId=" + common.myInt(DR["ItemId"]);
    //                if (dtMain.DefaultView.Count > 0)
    //                {
    //                    dtMain.DefaultView[0]["CIMSItemId"] = common.myStr(DR["CIMSItemId"]).Trim();
    //                }
    //                else
    //                {
    //                    dtMain.DefaultView[0]["CIMSItemId"] = "";
    //                }

    //                dtMain.DefaultView.RowFilter = "";
    //            }
    //        }
    //    }
    //    catch
    //    {
    //    }

    //    return dtMain;
    //}

    private void setVisiblilityInteraction()
    {
        try
        {
            if (common.myBool(ViewState["IsCIMSInterfaceActive"]))
            {
                string strXML = getInterationXML("");

                string outputValues = string.Empty;

                if (strXML != "")
                {
                    outputValues = objCIMS.getFastTrack5Output(strXML);

                    foreach (GridViewRow dataItem in gvStore.Rows)
                    {
                        HiddenField CIMSItemId = (HiddenField)dataItem.FindControl("hdnCIMSItemId");
                        LinkButton lnkBtnInteractionCIMS = (LinkButton)dataItem.FindControl("lnkBtnInteractionCIMS");

                        if (!outputValues.ToUpper().Contains("<SEVERITY NAME"))
                        {
                            lnkBtnInteractionCIMS.Visible = false;
                            continue;
                        }
                        else
                        {
                            if (common.myStr(CIMSItemId.Value).Trim().Length > 0 && lnkBtnInteractionCIMS.Visible)
                            {
                                string strFindCIMSItemId = "<PRODUCT REFERENCE=\"" + common.myStr(CIMSItemId.Value).Trim() + "\" NAME=\"\"></PRODUCT>";

                                if (outputValues.ToUpper().Contains(strFindCIMSItemId.ToUpper()))
                                {
                                    lnkBtnInteractionCIMS.Visible = false;
                                }
                            }
                        }
                    }
                }

                ViewState["DrugHealthInteractionColorSet"] = System.Drawing.Color.FromName("#82AB76");
                ViewState["DrugAllergyColorSet"] = System.Drawing.Color.FromName("#82CAFA");

                strXML = getHealthOrAllergiesInterationXML("H");//Helth

                if (strXML != "")
                {
                    outputValues = objCIMS.getFastTrack5Output(strXML);

                    if (outputValues.Length > strXML.Length && outputValues.Length > 0)
                    {
                        if (outputValues.ToUpper().Contains("<SEVERITY NAME"))
                        {
                            ViewState["DrugHealthInteractionColorSet"] = System.Drawing.Color.FromName("#82AB76");
                        }
                    }
                }

                strXML = getHealthOrAllergiesInterationXML("A");//Allergies

                if (strXML != "")
                {
                    outputValues = objCIMS.getFastTrack5Output(strXML);

                    if (outputValues.Length > strXML.Length && outputValues.Length > 0)
                    {
                        if (outputValues.ToUpper().Contains("<SEVERITY NAME"))
                        {
                            ViewState["DrugAllergyColorSet"] = System.Drawing.Color.FromName("#82CAFA");
                        }
                    }
                }

                lnkDrugAllergy.BackColor = (System.Drawing.Color)ViewState["DrugAllergyColorSet"];

                //int count = 0;
                //int rIdx = 0;
                //int rIdxDataFound = 0;

                //foreach (GridViewRow dataItem in gvStore.Rows)
                //{
                //    HiddenField CIMSItemId = (HiddenField)dataItem.FindControl("hdnCIMSItemId");

                //    if (common.myStr(CIMSItemId.Value).Trim().Length > 0)
                //    {
                //        if (rIdxDataFound == 0)
                //        {
                //            rIdxDataFound = count;
                //        }
                //        rIdx++;
                //    }
                //    count++;
                //}

                //if (rIdx == 1)
                //{
                //    LinkButton lnkBtnInteractionCIMS = (LinkButton)gvStore.Rows[rIdxDataFound].FindControl("lnkBtnInteractionCIMS");
                //    if (lnkBtnInteractionCIMS.Visible)
                //    {
                //        lnkBtnInteractionCIMS.Visible = false;
                //    }
                //}
            }
            else if (common.myBool(ViewState["IsVIDALInterfaceActive"]))
            {
                int?[] commonNameGroupIds = getVIDALCommonNameGroupIds();
                lnkDrugAllergy.Visible = false;

                if (commonNameGroupIds.Length > 0)
                {
                    StringBuilder sb = new StringBuilder();
                    Hashtable collVitalItemIdFound = new Hashtable();
                    objVIDAL = new clsVIDAL(sConString);

                    sb = objVIDAL.getVIDALDrugToDrugInteraction(true, commonNameGroupIds, out collVitalItemIdFound);



                    DateTime dateOfBirth = Convert.ToDateTime(ViewState["PatientDOB"]);  //Convert.ToDateTime("1980-01-01 00:00:00"); //yyyy-mm-ddThh:mm:ss 
                    int? weight = common.myInt(lbl_Weight.Text);//In kilograms
                    //'NONE','LESS_THAN_ONE_MONTH','MORE_THAN_ONE_MONTH','ALL'
                    int? weeksOfAmenorrhoea = null;//21 Number of weeks of amenorrhea (usually, pregnancy + 2 weeks)
                    int? creatinClearance = null;//The creatin clearance, expressed in ml/min. 120 is the normal value

                    Hashtable collVitalItemIdFoundDH = new Hashtable();

                    StringBuilder sbDHI = objVIDAL.getVIDALDrugHealthInteraction(commonNameGroupIds, dateOfBirth, weight,
                            0, weeksOfAmenorrhoea, creatinClearance, common.myStr(ViewState["PatientGender"]),
                            (ViewState["PatientDiagnosisXML"] != "") ? (List<string>)ViewState["PatientDiagnosisXML"] : null,
                            out collVitalItemIdFoundDH);

                    foreach (GridViewRow dataItem in gvStore.Rows)
                    {
                        HiddenField VIDALItemId = (HiddenField)dataItem.FindControl("hdnVIDALItemId");

                        if (common.myInt(VIDALItemId.Value) > 0)
                        {
                            LinkButton lnkBtnInteractionVIDAL = (LinkButton)dataItem.FindControl("lnkBtnInteractionVIDAL");
                            LinkButton lnkBtnDHInteractionVIDAL = (LinkButton)dataItem.FindControl("lnkBtnDHInteractionVIDAL");

                            if (collVitalItemIdFound.ContainsValue(common.myInt(VIDALItemId.Value)))
                            {
                                lnkBtnInteractionVIDAL.Visible = true;
                            }
                            else
                            {
                                lnkBtnInteractionVIDAL.Visible = false;
                            }

                            if (sbDHI.ToString().Length > 0 || collVitalItemIdFoundDH.ContainsValue(common.myInt(VIDALItemId.Value)))
                            {
                                lnkBtnDHInteractionVIDAL.Visible = true;
                            }
                            else
                            {
                                lnkBtnDHInteractionVIDAL.Visible = false;
                            }
                        }
                    }

                    int?[] allergyIds = null; //new int?[] { 114 };
                    int?[] moleculeIds = null;  //new int?[] { 202, 96, 36 };

                    if (ViewState["PatientAllergyXML"] != "")
                    {
                        allergyIds = (int?[])ViewState["PatientAllergyXML"];
                    }

                    sb = objVIDAL.getVIDALDrugAllergyInteraction(commonNameGroupIds, allergyIds, moleculeIds);

                    if (sb.ToString().Length > 0)
                    {
                        lnkDrugAllergy.Visible = true;
                    }
                    else
                    {
                        lnkDrugAllergy.Visible = false;
                    }
                }
            }
        }
        catch
        {
        }
    }



    private string getMonographXML(string CIMSType, string CIMSItemId)
    {
        string strXML = "";
        try
        {
            //<Request>
            //    <Content>
            //        <Product reference="{DAABD513-72A6-41F2-ABEC-DDAEABBC18D9}" />
            //    </Content>
            //</Request>

            //strXML = "<Request><Content><Product reference=\"{DAABD513-72A6-41F2-ABEC-DDAEABBC18D9}\" /></Content></Request>";

            // <MONOGRAPH>
            CIMSType = (CIMSType == "") ? "Product" : CIMSType;

            strXML = "<Request><Content><" + CIMSType + " reference=\"" + CIMSItemId + "\" /></Content></Request>";
        }
        catch
        { }

        return strXML;
    }

    private string getInterationXML(string strNewPrescribing)
    {
        string strXML = "";
        try
        {
            if (common.myBool(ViewState["IsCIMSInterfaceActive"]))
            {
                //<Request>
                //    <Interaction>
                //        <Prescribing>
                //            <Product reference="{DAABD513-72A6-41F2-ABEC-DDAEABBC18D9}" />
                //        </Prescribing>
                //        <Prescribed>
                //            <Product reference="{FC27925F-AEA2-48C4-8DBC-088E56C0D0B3}" />
                //            <Product reference="{DF1478CC-9840-408E-9BF3-AE95CD4036B4}" />
                //        </Prescribed>
                //        <Allergies />
                //        <References/>
                //    </Interaction>
                //</Request>

                string strPrescribing = "";

                StringBuilder ItemIds = new StringBuilder();
                foreach (GridViewRow dataItem in gvStore.Rows)
                {
                    HiddenField CIMSItemId = (HiddenField)dataItem.FindControl("hdnCIMSItemId");
                    LinkButton lnkBtnInteractionCIMS = (LinkButton)dataItem.FindControl("lnkBtnInteractionCIMS");

                    if (common.myStr(CIMSItemId.Value).Trim().Length > 0
                        && lnkBtnInteractionCIMS.Visible)
                    {
                        string CIMSType = common.myStr(((HiddenField)dataItem.FindControl("hdnCIMSType")).Value).Trim();
                        CIMSType = (CIMSType == "") ? "Product" : CIMSType;

                        if (strNewPrescribing != "" && strPrescribing == "")
                        {
                            strPrescribing = strNewPrescribing;
                        }

                        if (strPrescribing == "")
                        {
                            strPrescribing = "<Prescribing><" + CIMSType + " reference=\"" + common.myStr(CIMSItemId.Value) + "\" /></Prescribing>";
                        }
                        else
                        {
                            ItemIds.Append("<" + CIMSType + " reference=\"" + common.myStr(CIMSItemId.Value) + "\" />");
                        }


                        //if (Prescribing == "")
                        //{
                        //    Prescribing = "Prescribing";
                        //}
                        //else
                        //{
                        //    Prescribing = "Prescribed";
                        //}

                        //ItemIds.Append("<" + Prescribing + "><" + CIMSType + " reference=\"" + common.myStr(CIMSItemId.Value) + "\" /></" + Prescribing + ">");

                    }
                }

                if (ItemIds.ToString() == "")
                {
                    return "";
                }

                strPrescribing = strPrescribing + "<Prescribed>" + ItemIds.ToString() + "</Prescribed>";

                // <Severity name
                //strXML = "<Request><Interaction><Prescribing><Product reference="{DAABD513-72A6-41F2-ABEC-DDAEABBC18D9}" /></Prescribing><Prescribed><Product reference="{FC27925F-AEA2-48C4-8DBC-088E56C0D0B3}" /><Product reference="{DF1478CC-9840-408E-9BF3-AE95CD4036B4}" /></Prescribed><Allergies /><References /></Interaction></Request>";

                strXML = "<Request><Interaction>" + strPrescribing + "<Allergies /><References /></Interaction></Request>";
            }
        }
        catch
        { }

        return strXML;
    }

    protected void btnInteractionView_OnClick(object sender, EventArgs e)
    {
        showIntreraction();
    }

    protected void btnMonographView_OnClick(object sender, EventArgs e)
    {
        showMonograph(common.myStr(hdnCIMSItemId.Value).Trim(), common.myStr(hdnCIMSType.Value).Trim());
    }

    private void showMonograph(string CIMSItemId, string CIMSType)
    {
        if (Cache["CIMSXML" + common.myStr(Session["UserId"])] != null)
        {
            Cache.Remove("CIMSXML" + common.myStr(Session["UserId"]));
        }

        string strXML = getMonographXML(CIMSType, common.myStr(CIMSItemId));

        if (strXML != "")
        {
            Cache.Insert("CIMSXML" + common.myStr(Session["UserId"]), strXML, null, DateTime.Now.AddMinutes(90), System.Web.Caching.Cache.NoSlidingExpiration);

            openWindowsCIMS();
        }
    }

    private void showIntreraction()
    {
        if (Cache["CIMSXML" + common.myStr(Session["UserId"])] != null)
        {
            Cache.Remove("CIMSXML" + common.myStr(Session["UserId"]));
        }

        string strXML = (common.myStr(ViewState["NewPrescribing"]).Trim().Length > 0) ? common.myStr(ViewState["NewPrescribing"]).Trim() : getInterationXML("");

        if (strXML != "")
        {
            Cache.Insert("CIMSXML" + common.myStr(Session["UserId"]), strXML, null, DateTime.Now.AddMinutes(90), System.Web.Caching.Cache.NoSlidingExpiration);

            openWindowsCIMS();
        }
    }

    private void showHealthOrAllergiesIntreraction(string HealthOrAllergies)
    {
        if (common.myBool(ViewState["IsCIMSInterfaceActive"]))
        {
            if (Cache["CIMSXML" + common.myStr(Session["UserId"])] != null)
            {
                Cache.Remove("CIMSXML" + common.myStr(Session["UserId"]));
            }

            string strXML = getHealthOrAllergiesInterationXML("B");

            if (strXML != "")
            {
                Cache.Insert("CIMSXML" + common.myStr(Session["UserId"]), strXML, null, DateTime.Now.AddMinutes(90), System.Web.Caching.Cache.NoSlidingExpiration);

                openWindowsCIMS();
            }
        }
        else if (common.myBool(ViewState["IsVIDALInterfaceActive"]))
        {
            if (HealthOrAllergies == "H")//Health
            {
                int?[] commonNameGroupIds = getVIDALCommonNameGroupIds();

                if (commonNameGroupIds.Length > 0)
                {
                    getDrugHealthInteractionVidal(commonNameGroupIds);
                }
            }
            else if (HealthOrAllergies == "A")//Allergies
            {
                int?[] commonNameGroupIds = getVIDALCommonNameGroupIds();

                if (commonNameGroupIds.Length > 0)
                {
                    getDrugAllergyVidal(commonNameGroupIds);
                }
            }
        }
    }

    private void openWindowsCIMS()
    {
        RadWindow1.NavigateUrl = "/EMR/Medication/Monograph1.aspx";
        RadWindow1.Height = 600;
        RadWindow1.Width = 900;
        RadWindow1.Top = 10;
        RadWindow1.Left = 10;
        //RadWindow1.OnClientClose = "";
        RadWindow1.VisibleOnPageLoad = true;
        RadWindow1.Modal = true;
        RadWindow1.InitialBehavior = WindowBehaviors.Maximize;
        RadWindow1.VisibleStatusbar = false;
    }

    private void openWindowsVIDAL(string parameters)
    {
        RadWindow1.NavigateUrl = "/EMR/Medication/MonographVidal.aspx" + parameters;
        RadWindow1.Height = 550;
        RadWindow1.Width = 800;
        RadWindow1.Top = 10;
        RadWindow1.Left = 10;
        //RadWindow1.OnClientClose = "";
        RadWindow1.VisibleOnPageLoad = true;
        RadWindow1.Modal = true;
        if (parameters.Contains("UseFor=MO"))
        {
            RadWindow1.InitialBehaviors = WindowBehaviors.Maximize;
        }
        RadWindow1.VisibleStatusbar = false;
    }

    protected void btnInteractionContinue_OnClick(object sender, EventArgs e)
    {
        addToListFinal();

        dvInteraction.Visible = false;
    }



    protected void btnInteractionCancel_OnClick(object sender, EventArgs e)
    {
        dvInteraction.Visible = false;
    }

    protected void lnkAlerts_OnClick(object sender, EventArgs e)
    {
        try
        {

            lblMessage.Text = "";
            RadWindow1.NavigateUrl = "~/MPages/CommonGridPage.aspx?MP=NO&CF=PTA&PId=" + common.myStr(Session["RegistrationId"]);
            RadWindow1.Height = 600;
            RadWindow1.Width = 600;
            RadWindow1.Top = 10;
            RadWindow1.Left = 10;
            RadWindow1.VisibleOnPageLoad = true; // Set this property to True for showing window from code 
            RadWindow1.Modal = true;
            RadWindow1.VisibleStatusbar = false;
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;

            objException.HandleException(Ex);
        }

    }

    protected void lnkAddName_OnClick(object sender, EventArgs e)
    {
        RadWindow1.NavigateUrl = "FrequencyFavorite.aspx";
        RadWindow1.Height = 600;
        RadWindow1.Width = 550;
        RadWindow1.Top = 40;
        RadWindow1.Left = 100;
        RadWindow1.OnClientClose = "OnClientFavoriteFrequencyClose";
        RadWindow1.VisibleOnPageLoad = true; // Set this property to True for showing window from code 
        RadWindow1.Modal = true;
        RadWindow1.VisibleStatusbar = false;
    }

    protected void btnBindFrequencyFavorite_Click(object sender, EventArgs e)
    {
        objPharmacy = new BaseC.clsPharmacy(sConString);
        ddlFrequency.Items.Clear();
        DataSet ds = new DataSet();
        ds = objPharmacy.GetDoctorFrequencyFavorite(Convert.ToInt32(Session["DoctorId"]));
        foreach (DataRow dr in ds.Tables[0].Rows)
        {
            RadComboBoxItem item = new RadComboBoxItem();
            item.Text = common.myStr(dr["Description"]);
            item.Value = common.myStr(common.myInt(dr["Id"]));
            item.Attributes.Add("Frequency", common.myStr(dr["Frequency"]));
            item.DataBind();
            this.ddlFrequency.Items.Add(item);
        }
        ddlFrequency.Items.Insert(0, new RadComboBoxItem("", "0"));
        ddlFrequency.SelectedIndex = 0;
    }

    private string getHealthOrAllergiesInterationXML(string useFor)
    {
        string strXML = "";
        try
        {
            //<Request>
            //    <Interaction>
            //        <Prescribing>
            //            <Product reference="{DAABD513-72A6-41F2-ABEC-DDAEABBC18D9}" />
            //        </Prescribing>
            //        <Prescribed>
            //            <Product reference="{FC27925F-AEA2-48C4-8DBC-088E56C0D0B3}" />
            //            <Product reference="{DF1478CC-9840-408E-9BF3-AE95CD4036B4}" />
            //        </Prescribed>
            //        <Allergies>
            //            <Product reference="{8A4E15CD-ACE3-41D9-A367-55658256C2D4}" />
            //            <Product reference="{6D8F3E40-FA33-49C9-9D34-7C13F88E00FD}" />
            //        </Allergies>
            //        <HealthIssueCodes>
            //            <HealthIssueCode code="K22" codeType="ICD10" />
            //            <HealthIssueCode code="K22.0" codeType="ICD10" />
            //        </HealthIssueCodes>
            //        <References/>
            //    </Interaction>
            //</Request>


            string strPrescribing = "";

            StringBuilder ItemIds = new StringBuilder();
            foreach (GridViewRow dataItem in gvStore.Rows)
            {
                HiddenField CIMSItemId = (HiddenField)dataItem.FindControl("hdnCIMSItemId");

                if (common.myStr(CIMSItemId.Value).Trim().Length > 0)
                {
                    string CIMSType = common.myStr(((HiddenField)dataItem.FindControl("hdnCIMSType")).Value).Trim();
                    CIMSType = (CIMSType == "") ? "Product" : CIMSType;

                    if (strPrescribing == "")
                    {
                        strPrescribing = "<Prescribing><" + CIMSType + " reference=\"" + common.myStr(CIMSItemId.Value) + "\" /></Prescribing>";
                    }
                    else
                    {
                        ItemIds.Append("<" + CIMSType + " reference=\"" + common.myStr(CIMSItemId.Value) + "\" />");
                    }

                    //if (Prescribing == "")
                    //{
                    //    Prescribing = "Prescribing";
                    //}
                    //else
                    //{
                    //    Prescribing = "Prescribed";
                    //}

                    //ItemIds.Append("<" + Prescribing + "><" + CIMSType + " reference=\"" + common.myStr(CIMSItemId.Value) + "\" /></" + Prescribing + ">");

                }
            }

            if (ItemIds.ToString() == "")
            {
                return "";
            }

            strPrescribing = strPrescribing + "<Prescribed>" + ItemIds.ToString() + "</Prescribed>";

            // <Severity name
            //strXML = "<Request><Interaction><Prescribing><Product reference="{DAABD513-72A6-41F2-ABEC-DDAEABBC18D9}" /></Prescribing><Prescribed><Product reference="{FC27925F-AEA2-48C4-8DBC-088E56C0D0B3}" /><Product reference="{DF1478CC-9840-408E-9BF3-AE95CD4036B4}" /></Prescribed><Allergies /><References /></Interaction></Request>";
            switch (useFor)
            {
                case "H"://Helth Interaction
                    strXML = "<Request><Interaction>" + strPrescribing + common.myStr(ViewState["PatientDiagnosisXML"]) + "<References /></Interaction></Request>";
                    break;
                case "A"://Allergies
                    strXML = "<Request><Interaction>" + strPrescribing + common.myStr(ViewState["PatientAllergyXML"]) + "<References /></Interaction></Request>";
                    break;
                case "B"://Both
                    strXML = "<Request><Interaction>" + strPrescribing + common.myStr(ViewState["PatientAllergyXML"]) + common.myStr(ViewState["PatientDiagnosisXML"]) + "<References /></Interaction></Request>";
                    break;
            }

        }
        catch
        { }

        return strXML;
    }

    protected void lnkDrugAllergy_OnClick(object sender, EventArgs e)
    {
        showHealthOrAllergiesIntreraction("A");
    }

    private void setDiagnosis()
    {
        DataSet ds = new DataSet();
        try
        {
            ViewState["PatientDiagnosisXML"] = "";
            if (common.myBool(ViewState["IsCIMSInterfaceActive"])
                || common.myBool(ViewState["IsVIDALInterfaceActive"]))
            {
                objEMR = new BaseC.clsEMR(sConString);

                ds = objEMR.getDiagnosis(common.myInt(Session["HospitalLocationID"]), common.myInt(Session["RegistrationId"]), common.myInt(Session["EncounterId"]));

                if (ds.Tables[0].Rows.Count > 0)
                {
                    if (common.myBool(ViewState["IsCIMSInterfaceActive"]))
                    {
                        StringBuilder HealthIssueCodes = new StringBuilder();
                        StringBuilder HealthCode = new StringBuilder();

                        foreach (DataRow DR in ds.Tables[0].Rows)
                        {
                            if (common.myStr(DR["ICDCode"]).Trim().Length > 0)
                            {
                                HealthCode.Append("<HealthIssueCode code=\"" + common.myStr(DR["ICDCode"]).Trim() + "\" codeType=\"ICD10\" />");
                            }
                        }

                        if (HealthCode.ToString() == "")
                        {
                            HealthIssueCodes.Append("<HealthIssueCodes />");
                        }
                        else
                        {
                            HealthIssueCodes.Append("<HealthIssueCodes>" + HealthCode.ToString() + "</HealthIssueCodes>");
                        }

                        ViewState["PatientDiagnosisXML"] = HealthIssueCodes.ToString();
                    }
                    else if (common.myBool(ViewState["IsVIDALInterfaceActive"]))
                    {
                        List<string> list = new List<string>();

                        foreach (DataRow DR in ds.Tables[0].Rows)
                        {
                            if (common.myStr(DR["ICDCode"]).Trim().Length > 0)
                            {
                                list.Add(common.myStr(DR["ICDCode"]).Trim().Replace(".", ""));
                            }
                        }
                        ViewState["PatientDiagnosisXML"] = list;
                    }
                }
            }

        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;

            objException.HandleException(Ex);
        }
        finally
        {
            ds.Dispose();
        }
    }

    private void setAllergiesWithInterfaceCode()
    {
        DataSet ds = new DataSet();
        try
        {
            ViewState["PatientAllergyXML"] = "";

            if (common.myBool(ViewState["IsCIMSInterfaceActive"])
                || common.myBool(ViewState["IsVIDALInterfaceActive"]))
            {
                objEMR = new BaseC.clsEMR(sConString);
                ds = objEMR.getDrugAllergiesInterfaceCode(common.myInt(Session["HospitalLocationID"]), common.myInt(Session["RegistrationId"]));
                DataView DV = ds.Tables[0].DefaultView;
                DataTable tbl = new DataTable();

                if (common.myBool(ViewState["IsCIMSInterfaceActive"]))
                {
                    DV.RowFilter = "AllergyType='CIMS'";
                    tbl = DV.ToTable();

                    if (tbl.Rows.Count > 0)
                    {
                        StringBuilder Allergies = new StringBuilder();
                        StringBuilder itemsDetails = new StringBuilder();

                        foreach (DataRow DR in tbl.Rows)
                        {
                            if (common.myStr(DR["InterfaceCode"]).Trim().Length > 0)
                            {
                                itemsDetails.Append("<" + common.myStr(DR["CIMSTYPE"]).Trim() + " reference=\"" + common.myStr(DR["InterfaceCode"]).Trim() + "\" />");
                            }
                        }

                        if (itemsDetails.ToString() == "")
                        {
                            Allergies.Append("<Allergies />");
                        }
                        else
                        {
                            Allergies.Append("<Allergies>" + itemsDetails.ToString() + "</Allergies>");
                        }

                        ViewState["PatientAllergyXML"] = Allergies.ToString();
                    }
                }
                else if (common.myBool(ViewState["IsVIDALInterfaceActive"]))
                {
                    DV.RowFilter = "AllergyType='VIDAL'";
                    tbl = DV.ToTable();

                    if (tbl.Rows.Count > 0)
                    {
                        List<int?> list = new List<int?>();

                        foreach (DataRow DR in tbl.Rows)
                        {
                            if (common.myStr(DR["InterfaceCode"]).Trim().Length > 0)
                            {
                                list.Add(common.myInt(DR["InterfaceCode"]));
                            }
                        }

                        int?[] allergyIds = list.ToArray();

                        ViewState["PatientAllergyXML"] = allergyIds;
                    }
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;

            objException.HandleException(Ex);
        }
        finally
        {
            ds.Dispose();
        }
    }

    //protected void gvMonographVidal_OnRowDataBound(object sender, GridViewRowEventArgs e)
    //{
    //    try
    //    {
    //        if (e.Row.RowType == DataControlRowType.DataRow)
    //        {
    //            HiddenField hdnTYPE = (HiddenField)e.Row.FindControl("hdnTYPE");

    //            LinkButton lnkMonographVidal = (LinkButton)e.Row.FindControl("lnkMonographVidal");
    //            if (common.myStr(hdnTYPE.Value) == "VMPFR")
    //            {
    //                lnkMonographVidal.Text = "Monograph";
    //            }
    //            else
    //            {
    //                lnkMonographVidal.Text = "Other Information";
    //            }
    //        }
    //    }
    //    catch
    //    {
    //    }
    //}

    //protected void gvMonographVidal_OnRowCommand(object Sender, GridViewCommandEventArgs e)
    //{
    //    try
    //    {
    //        lblMessage.Text = "";

    //        if (e.CommandName == "Select")
    //        {
    //            //GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
    //            //Label lblItemName = (Label)row.FindControl("lblItemName");

    //            string url = common.myStr(e.CommandArgument);

    //            if (url.Length > 0)
    //            {
    //                openWindowsVIDAL("?UseFor=MO&URL=" + common.myStr(url));
    //            }

    //        }
    //    }
    //    catch (Exception Ex)
    //    {
    //        lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
    //        lblMessage.Text = "Error: " + Ex.Message;

    //        objException.HandleException(Ex);
    //    }
    //}

    //protected void btnMonographVitalClose_OnClick(object sender, EventArgs e)
    //{
    //    DivMonographVidal.Visible = false;
    //}

    private void getMonographVidal(int? commonNameGroupId)
    {
        try
        {
            DataTable tbl = new DataTable();

            objVIDAL = new clsVIDAL(sConString);
            tbl = objVIDAL.getVIDALMonograph(commonNameGroupId);

            if (tbl.Rows.Count > 0)
            {
                openWindowsVIDAL("?UseFor=MO&URL=" + common.myStr(tbl.Rows[0]["URL"]));
            }
            //ViewState["tblMonographVidal"] = tbl;

            //gvMonographVidal.DataSource = tbl;
            //gvMonographVidal.DataBind();

            //DivMonographVidal.Visible = false;
            //if (tbl.Rows.Count > 0)
            //{
            //    DivMonographVidal.Visible = true;
            //}
        }
        catch
        {
        }
    }

    private void getDrugToDrugInteractionVidal(int?[] commonNameGroupIds)
    {
        try
        {
            //commonNameGroupIds = new int?[] { 15223, 15070, 1524, 4025, 4212, 516 };

            StringBuilder sb = new StringBuilder();
            Hashtable collVitalItemIdFound = new Hashtable();
            objVIDAL = new clsVIDAL(sConString);

            sb = objVIDAL.getVIDALDrugToDrugInteraction(false, commonNameGroupIds, out collVitalItemIdFound);

            if (Cache["VIDALXML" + common.myStr(Session["UserId"])] != null)
            {
                Cache.Remove("VIDALXML" + common.myStr(Session["UserId"]));
            }

            if (sb.ToString() != "")
            {
                Cache.Insert("VIDALXML" + common.myStr(Session["UserId"]), sb.ToString(), null, DateTime.Now.AddMinutes(90), System.Web.Caching.Cache.NoSlidingExpiration);

                openWindowsVIDAL("?UseFor=IN");
            }
        }
        catch
        {
        }
    }

    private void getDrugHealthInteractionVidal(int?[] commonNameGroupIds)
    {
        try
        {
            //int?[] commonNameGroupIds = new int?[] { 4025, 4212, 516, 3759, 1892, 4306, 4409, 3125, 3631, 1463, 3402, 368, 6559, 4197, 4040, 6628 };

            DateTime dateOfBirth = Convert.ToDateTime(ViewState["PatientDOB"]);  //Convert.ToDateTime("1980-01-01 00:00:00"); //yyyy-mm-ddThh:mm:ss  
            int? weight = common.myInt(lbl_Weight.Text);//In kilograms
            //'NONE','LESS_THAN_ONE_MONTH','MORE_THAN_ONE_MONTH','ALL'
            int? weeksOfAmenorrhoea = null;// 21 Number of weeks of amenorrhea (usually, pregnancy + 2 weeks)
            int? creatinClearance = null;//The creatin clearance, expressed in ml/min. 120 is the normal value

            Hashtable collVitalItemIdFound = new Hashtable();

            objVIDAL = new clsVIDAL(sConString);
            StringBuilder sb = objVIDAL.getVIDALDrugHealthInteraction(commonNameGroupIds, dateOfBirth, weight,
                    0, weeksOfAmenorrhoea, creatinClearance, common.myStr(ViewState["PatientGender"]),
                    (ViewState["PatientDiagnosisXML"] != "") ? (List<string>)ViewState["PatientDiagnosisXML"] : null,
                    out collVitalItemIdFound);

            if (Cache["VIDALXML" + common.myStr(Session["UserId"])] != null)
            {
                Cache.Remove("VIDALXML" + common.myStr(Session["UserId"]));
            }

            if (sb.ToString() != "")
            {
                Cache.Insert("VIDALXML" + common.myStr(Session["UserId"]), sb.ToString(), null, DateTime.Now.AddMinutes(90), System.Web.Caching.Cache.NoSlidingExpiration);

                openWindowsVIDAL("?UseFor=HI");
            }
        }
        catch
        {
        }
    }

    private void getDrugAllergyVidal(int?[] commonNameGroupIds)
    {
        try
        {
            //commonNameGroupIds = new int?[] { 4025, 4212, 516 };

            int?[] allergyIds = null; //new int?[] { 114 };
            int?[] moleculeIds = null;  //new int?[] { 202, 96, 36 };

            if (ViewState["PatientAllergyXML"] != "")
            {
                allergyIds = (int?[])ViewState["PatientAllergyXML"];
            }

            StringBuilder sb = new StringBuilder();

            objVIDAL = new clsVIDAL(sConString);
            sb = objVIDAL.getVIDALDrugAllergyInteraction(commonNameGroupIds, allergyIds, moleculeIds);

            if (Cache["VIDALXML" + common.myStr(Session["UserId"])] != null)
            {
                Cache.Remove("VIDALXML" + common.myStr(Session["UserId"]));
            }

            if (sb.ToString() != "")
            {
                Cache.Insert("VIDALXML" + common.myStr(Session["UserId"]), sb.ToString(), null, DateTime.Now.AddMinutes(90), System.Web.Caching.Cache.NoSlidingExpiration);

                openWindowsVIDAL("?UseFor=DA");
            }
        }
        catch
        {
        }
    }

    private void getWarningVidal(int? commonNameGroupId)
    {
        try
        {
            StringBuilder sb = new StringBuilder();

            objVIDAL = new clsVIDAL(sConString);
            sb = objVIDAL.getVIDALDrugWarning(commonNameGroupId);

            if (Cache["VIDALXML" + common.myStr(Session["UserId"])] != null)
            {
                Cache.Remove("VIDALXML" + common.myStr(Session["UserId"]));
            }

            if (sb.ToString() != "")
            {
                Cache.Insert("VIDALXML" + common.myStr(Session["UserId"]), sb.ToString(), null, DateTime.Now.AddMinutes(90), System.Web.Caching.Cache.NoSlidingExpiration);

                openWindowsVIDAL("?UseFor=WS");
            }
        }
        catch
        {
        }
    }

    private void getSideEffectVidal(int?[] commonNameGroupIds)
    {
        try
        {
            StringBuilder sb = new StringBuilder();

            objVIDAL = new clsVIDAL(sConString);
            sb = objVIDAL.getVIDALDrugSideEffect(commonNameGroupIds);

            if (Cache["VIDALXML" + common.myStr(Session["UserId"])] != null)
            {
                Cache.Remove("VIDALXML" + common.myStr(Session["UserId"]));
            }

            if (sb.ToString() != "")
            {
                Cache.Insert("VIDALXML" + common.myStr(Session["UserId"]), sb.ToString(), null, DateTime.Now.AddMinutes(90), System.Web.Caching.Cache.NoSlidingExpiration);

                openWindowsVIDAL("?UseFor=SE");
            }
        }
        catch
        {
        }
    }
    //Added by rakesh start
    protected void ddlFrequency_OnSelectedIndexChanged(object sender, RadComboBoxSelectedIndexChangedEventArgs e)
    {
        bool IsTimingRequired =common.myBool(GetIsTimingRequiredOfSelectedFrequencyID(common.myInt(ddlFrequency.SelectedValue)));
        if(IsTimingRequired)
            ddlTime.Enabled = true;
        else
            ddlTime.Enabled = false;
        ddlTime.Enabled = ddlFrequency.SelectedValue == "78" ? true : false;

    }
    protected void ddlBrand_SelectedIndexChanged(object sender, RadComboBoxSelectedIndexChangedEventArgs e)
    {
        DataSet ds = new DataSet();
        try
        {
            string brandID = ddlBrand.SelectedValue.ToString();

            if (common.myInt(brandID) > 0 && ddlGeneric.SelectedValue.Equals(string.Empty))
            {
                
                ds = GetphrGenericOfSelectedDrug(Convert.ToInt16(Session["HospitalLocationID"]), common.myInt(Session["Facilityid"]), common.myInt(brandID));
                //ddlGeneric.Items.Add(new RadComboBoxItem(ds.Tables[0].Rows[0][""].ToString
                if (ds.Tables[0].Rows.Count > 0)
                {
                    ddlGeneric.Items.Insert(0, new RadComboBoxItem(ds.Tables[0].Rows[0]["GenericName"].ToString(), ds.Tables[0].Rows[0]["GenericId"].ToString()));
                    ddlGeneric.SelectedIndex = 0;
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
        finally
        {
            ds.Dispose();
        }
    }


    

    

    private void SetStrengthFormUnitRouteOfSelectedDrug()
    {
        DataSet ds = new DataSet();
        try
        {
            string brandID = ddlBrand.SelectedValue.ToString();
            ds = GetphrGenericOfSelectedDrug(Convert.ToInt16(Session["HospitalLocationID"]), common.myInt(Session["Facilityid"]), common.myInt(brandID));

            //ddlGeneric.Items.Add(new RadComboBoxItem(ds.Tables[0].Rows[0][""].ToString
            if (ds.Tables[0].Rows.Count > 0)
            {
                if (!(ds.Tables[0].Rows[0]["StrengthId"].ToString().Equals(null)))
                {
                    ddlStrength.SelectedValue = ds.Tables[0].Rows[0]["StrengthId"].ToString();
                    ddlStrength.Enabled = false;
                }
                else
                {
                    ddlStrength.SelectedIndex = 0;
                    ddlStrength.Enabled = true;
                }
                if (!(ds.Tables[0].Rows[0]["FormulationId"].ToString().Equals(string.Empty)))
                {
                    ddlFormulation.SelectedValue = ds.Tables[0].Rows[0]["FormulationId"].ToString();
                    ddlFormulation.Enabled = false;
                }
                else
                {
                    ddlFormulation.SelectedIndex = 0;
                    ddlFormulation.Enabled = true;
                }


                if (ds.Tables[1].Rows.Count > 0)
                {
                    ddlRoute.DataSource = ds.Tables[1];
                    ddlRoute.DataValueField = "Id";
                    ddlRoute.DataTextField = "RouteName";
                    ddlRoute.DataBind();

                    ddlRoute.Items.Insert(0, new RadComboBoxItem("", "0"));
                    ddlRoute.SelectedIndex = 0;
                }
                if (ds.Tables[2].Rows.Count > 0)
                {
                    ddlUnit.DataSource = ds.Tables[2];
                    ddlUnit.DataValueField = "Id";
                    ddlUnit.DataTextField = "UnitName";
                    ddlUnit.DataBind();

                    ddlUnit.Items.Insert(0, new RadComboBoxItem("", "0"));
                    ddlUnit.SelectedIndex = 0;
                }
            }
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
        finally
        {
            ds.Dispose();
        }
    }
    protected void ddlUnit_SelectedIndexChanged(object sender, RadComboBoxSelectedIndexChangedEventArgs e)
    {
        calcTotalQty();
    }

    public DataSet GetphrGenericOfSelectedDrug(int HospId, int FacilityId, int ItemID)
    {
        Hashtable HshIn = new Hashtable();

        DAL.DAL objDl = new DAL.DAL(DAL.DAL.DBType.SqlServer, sConString);
        DataSet ds = new DataSet();
        try
        {
            HshIn.Add("ItemID", ItemID);
            HshIn.Add("intHospitalLocationId", HospId);
            HshIn.Add("intFacilityId", FacilityId);

            ds = (DataSet)objDl.FillDataSet(CommandType.StoredProcedure, "uspGetphrGenericRouteUnitOfSelectedDrug", HshIn);
        }
        catch (Exception Ex)
        {
            lblMessage.ForeColor = System.Drawing.Color.FromName(commonLabelSetting.cErrorColor);
            lblMessage.Text = "Error: " + Ex.Message;
            objException.HandleException(Ex);
        }
        finally
        {
            HshIn = null;
            ds.Dispose();
            objDl = null;
        }
        return ds;
    }

    public string GetIsTimingRequiredOfSelectedFrequencyID(int FID)
    {
        string result = string.Empty;
        SqlParameter[] param = new SqlParameter[1];
        SqlConnection con = new SqlConnection(sConString);

        if (con.State == ConnectionState.Open)
            con.Close();
        con.Open();

        param[0] = new SqlParameter("@FID", FID);
        SqlCommand cmd = new SqlCommand();
        try
        {
            cmd = new SqlCommand("uspGetIsTimingRequiredOfSelectedFrequencyID", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Connection = con;
            cmd.Parameters.AddRange(param);
            result = cmd.ExecuteScalar().ToString();
            cmd.Parameters.Clear();

        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
        finally
        {
            con.Close();
            con.Dispose();
            cmd = null;
            param = null;
        }

        return result;
    }
}
